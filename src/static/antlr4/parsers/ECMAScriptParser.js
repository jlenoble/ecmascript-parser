// Generated from /home/jason/Projets/ecmascript-parser/src/static/antlr4/grammars/ECMAScript.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ECMAScriptListener = require('./ECMAScriptListener').ECMAScriptListener;
var grammarFileName = "ECMAScript.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003w\u0707\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t",
    "\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004",
    "\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t",
    "\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t\u0097\u0004",
    "\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004\u009b\t",
    "\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t\u009e\u0004",
    "\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004\u00a2\t",
    "\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t\u00a5\u0003",
    "\u0002\u0003\u0002\u0005\u0002\u014d\n\u0002\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0151\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0007",
    "\u0004\u0156\n\u0004\f\u0004\u000e\u0004\u0159\u000b\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u015e\n\u0005\f\u0005\u000e\u0005",
    "\u0161\u000b\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u0165\n\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u016c\n\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0170\n\u0007\u0003",
    "\b\u0003\b\u0005\b\u0174\n\b\u0003\b\u0005\b\u0177\n\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0182",
    "\n\b\u0003\b\u0005\b\u0185\n\b\u0003\b\u0003\b\u0005\b\u0189\n\b\u0003",
    "\t\u0003\t\u0003\t\u0007\t\u018e\n\t\f\t\u000e\t\u0191\u000b\t\u0003",
    "\n\u0003\n\u0003\n\u0007\n\u0196\n\n\f\n\u000e\n\u0199\u000b\n\u0003",
    "\u000b\u0005\u000b\u019c\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0005\f\u01a2\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u01a8\n",
    "\f\u0003\r\u0003\r\u0005\r\u01ac\n\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u01b7\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u01bc\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012",
    "\u01c1\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u01c5\n\u0013\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u01c9\n\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01d6\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01dd",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01fb\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0206",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0211\n",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0215\n\u001a\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u0219\n\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u021d\n\u001b\u0003\u001b\u0005\u001b\u0220\n\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0225\n\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u022b\n\u001b\u0003\u001b",
    "\u0007\u001b\u022e\n\u001b\f\u001b\u000e\u001b\u0231\u000b\u001b\u0003",
    "\u001c\u0006\u001c\u0234\n\u001c\r\u001c\u000e\u001c\u0235\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u023e\n\u001e\u0005\u001e\u0240\n\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0247\n\u001f\f\u001f\u000e",
    "\u001f\u024a\u000b\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u0252\n \u0003!\u0003!\u0005!\u0256\n!\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u025b\n\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0005$\u0262\n$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0007$\u0270\n$\f$\u000e$\u0273\u000b$\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u027d\n&\u0003&\u0003&\u0005",
    "&\u0281\n&\u0003\'\u0005\'\u0284\n\'\u0003\'\u0003\'\u0003\'\u0005\'",
    "\u0289\n\'\u0003\'\u0007\'\u028c\n\'\f\'\u000e\'\u028f\u000b\'\u0003",
    "(\u0003(\u0005(\u0293\n(\u0003)\u0003)\u0003)\u0005)\u0298\n)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u02a2\n*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007",
    "*\u02ae\n*\f*\u000e*\u02b1\u000b*\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u02bb\n+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00050\u02d6\n0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u02f1\n0\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00070\u0336\n0\f0\u000e",
    "0\u0339\u000b0\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00051\u0343\n1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u035e\n1\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00071\u03a8\n1\f1\u000e1\u03ab\u000b1\u00032\u00032\u0003",
    "3\u00033\u00034\u00034\u00035\u00035\u00036\u00036\u00037\u00037\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u03ca\n9\u0003:\u0006",
    ":\u03cd\n:\r:\u000e:\u03ce\u0003;\u0003;\u0005;\u03d3\n;\u0003<\u0003",
    "<\u0003=\u0003=\u0005=\u03d9\n=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0007@\u03e7\n@\f@\u000e",
    "@\u03ea\u000b@\u0003A\u0005A\u03ed\nA\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0005B\u03f4\nB\u0005B\u03f6\nB\u0003C\u0003C\u0003C\u0003C\u0005",
    "C\u03fc\nC\u0003D\u0003D\u0005D\u0400\nD\u0003E\u0003E\u0005E\u0404",
    "\nE\u0003F\u0003F\u0003F\u0005F\u0409\nF\u0005F\u040b\nF\u0003F\u0003",
    "F\u0003G\u0003G\u0005G\u0411\nG\u0003G\u0005G\u0414\nG\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u041f\nG\u0003",
    "G\u0005G\u0422\nG\u0003G\u0003G\u0005G\u0426\nG\u0003H\u0003H\u0003",
    "H\u0007H\u042b\nH\fH\u000eH\u042e\u000bH\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0005I\u0435\nI\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003M\u0007M\u0444\nM\fM\u000e",
    "M\u0447\u000bM\u0003N\u0003N\u0003N\u0007N\u044c\nN\fN\u000eN\u044f",
    "\u000bN\u0003O\u0003O\u0005O\u0453\nO\u0003O\u0003O\u0003O\u0005O\u0458",
    "\nO\u0003P\u0003P\u0005P\u045c\nP\u0003P\u0003P\u0003P\u0005P\u0461",
    "\nP\u0003Q\u0003Q\u0003Q\u0005Q\u0466\nQ\u0003R\u0003R\u0005R\u046a",
    "\nR\u0003S\u0003S\u0005S\u046e\nS\u0003T\u0003T\u0003T\u0003T\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0005U\u0481\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003W\u0003W\u0003W\u0003X\u0003X\u0005X\u048e\nX\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0005",
    "[\u049c\n[\u0003\\\u0003\\\u0003\\\u0005\\\u04a1\n\\\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0003^\u0003^\u0005^\u04ab\n^\u0003^\u0003^\u0003",
    "^\u0005^\u04b0\n^\u0003^\u0003^\u0005^\u04b4\n^\u0003^\u0003^\u0005",
    "^\u04b8\n^\u0003_\u0006_\u04bb\n_\r_\u000e_\u04bc\u0003`\u0003`\u0003",
    "`\u0003`\u0005`\u04c3\n`\u0003a\u0003a\u0003a\u0005a\u04c8\na\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u04dd",
    "\nb\u0003b\u0003b\u0005b\u04e1\nb\u0003b\u0003b\u0005b\u04e5\nb\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u04ef\nb\u0003",
    "b\u0003b\u0005b\u04f3\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0005b\u04fc\nb\u0003b\u0003b\u0005b\u0500\nb\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u053f",
    "\nb\u0003c\u0003c\u0003c\u0003d\u0003d\u0005d\u0546\nd\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u054f\ne\u0003f\u0003f\u0005",
    "f\u0553\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u055b\n",
    "g\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u0563\nh\u0003i\u0003",
    "i\u0003j\u0003j\u0005j\u0569\nj\u0003j\u0003j\u0003k\u0003k\u0003k\u0003",
    "k\u0003l\u0003l\u0003l\u0007l\u0574\nl\fl\u000el\u0577\u000bl\u0003",
    "m\u0003m\u0003m\u0007m\u057c\nm\fm\u000em\u057f\u000bm\u0003n\u0003",
    "n\u0005n\u0583\nn\u0003n\u0003n\u0003n\u0005n\u0588\nn\u0003o\u0003",
    "o\u0005o\u058c\no\u0003o\u0003o\u0003o\u0005o\u0591\no\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003q\u0003q\u0005",
    "q\u059e\nq\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003r\u0003",
    "r\u0005r\u05a9\nr\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "s\u0003s\u0003s\u0003s\u0003t\u0003t\u0005t\u05b8\nt\u0003t\u0003t\u0003",
    "u\u0005u\u05bd\nu\u0003u\u0003u\u0005u\u05c1\nu\u0003u\u0003u\u0003",
    "v\u0003v\u0003v\u0003w\u0003w\u0003x\u0006x\u05cb\nx\rx\u000ex\u05cc",
    "\u0003y\u0003y\u0003y\u0003y\u0005y\u05d3\ny\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0003{\u0003{\u0005",
    "{\u05e2\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003|\u0003",
    "|\u0003|\u0005|\u05ee\n|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0005~\u05fd\n~\u0003~\u0003",
    "~\u0003~\u0003~\u0005~\u0603\n~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0007\u007f\u0608\n\u007f\f\u007f\u000e\u007f\u060b\u000b\u007f\u0003",
    "\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0005",
    "\u0082\u0613\n\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u0617\n\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u0624\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0005\u0086\u062b\n\u0086\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087",
    "\u0647\n\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0003\u008a\u0005\u008a\u0655\n\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008b\u0003\u008b\u0003\u008c\u0005\u008c\u065c\n\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008e\u0006\u008e\u0663",
    "\n\u008e\r\u008e\u000e\u008e\u0664\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0005\u008f\u066a\n\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005",
    "\u0090\u0675\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0005\u0091\u0682\n\u0091\u0003\u0092\u0003\u0092\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u068f\n\u0094\u0003\u0094",
    "\u0003\u0094\u0005\u0094\u0693\n\u0094\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0007\u0096\u069b\n\u0096",
    "\f\u0096\u000e\u0096\u069e\u000b\u0096\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u06a5\n\u0097\u0003\u0098",
    "\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u06c8\n\u009a\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u06cf\n\u009b",
    "\u0003\u009b\u0003\u009b\u0005\u009b\u06d3\n\u009b\u0003\u009c\u0003",
    "\u009c\u0003\u009c\u0007\u009c\u06d8\n\u009c\f\u009c\u000e\u009c\u06db",
    "\u000b\u009c\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0005\u009d\u06e2\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u06e9\n\u009e\u0003\u009f\u0005\u009f",
    "\u06ec\n\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0006",
    "\u00a0\u06f2\n\u00a0\r\u00a0\u000e\u00a0\u06f3\u0003\u00a1\u0003\u00a1",
    "\u0003\u00a1\u0005\u00a1\u06f9\n\u00a1\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0005\u00a2\u06ff\n\u00a2\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0002\u0007",
    "4FR^`\u00a6\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4",
    "\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc",
    "\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4",
    "\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c",
    "\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124",
    "\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c",
    "\u013e\u0140\u0142\u0144\u0146\u0148\u0002\u000e\u0005\u0002\u0007\u0007",
    "ABrr\u0003\u0002$%\b\u0002\u001f $%,-LL__aa\u0004\u0002!\"??\u0003\u0002",
    "\u001f \u0003\u0002&(\u0003\u0002\u0017\u001a\u0003\u0002\u001b\u001e",
    "\u0004\u00023=@@\u0004\u0002HHmm\u0003\u0002Cd\u0003\u0002iq\u0002\u0798",
    "\u0002\u014c\u0003\u0002\u0002\u0002\u0004\u0150\u0003\u0002\u0002\u0002",
    "\u0006\u0152\u0003\u0002\u0002\u0002\b\u015a\u0003\u0002\u0002\u0002",
    "\n\u0164\u0003\u0002\u0002\u0002\f\u016f\u0003\u0002\u0002\u0002\u000e",
    "\u0188\u0003\u0002\u0002\u0002\u0010\u018a\u0003\u0002\u0002\u0002\u0012",
    "\u0192\u0003\u0002\u0002\u0002\u0014\u019b\u0003\u0002\u0002\u0002\u0016",
    "\u01a7\u0003\u0002\u0002\u0002\u0018\u01a9\u0003\u0002\u0002\u0002\u001a",
    "\u01ad\u0003\u0002\u0002\u0002\u001c\u01b0\u0003\u0002\u0002\u0002\u001e",
    "\u01b6\u0003\u0002\u0002\u0002 \u01bb\u0003\u0002\u0002\u0002\"\u01c0",
    "\u0003\u0002\u0002\u0002$\u01c4\u0003\u0002\u0002\u0002&\u01c8\u0003",
    "\u0002\u0002\u0002(\u01d5\u0003\u0002\u0002\u0002*\u01d7\u0003\u0002",
    "\u0002\u0002,\u01fa\u0003\u0002\u0002\u0002.\u01fc\u0003\u0002\u0002",
    "\u00020\u0200\u0003\u0002\u0002\u00022\u0214\u0003\u0002\u0002\u0002",
    "4\u021f\u0003\u0002\u0002\u00026\u0233\u0003\u0002\u0002\u00028\u0237",
    "\u0003\u0002\u0002\u0002:\u023a\u0003\u0002\u0002\u0002<\u0243\u0003",
    "\u0002\u0002\u0002>\u0251\u0003\u0002\u0002\u0002@\u0255\u0003\u0002",
    "\u0002\u0002B\u025a\u0003\u0002\u0002\u0002D\u025c\u0003\u0002\u0002",
    "\u0002F\u0261\u0003\u0002\u0002\u0002H\u0274\u0003\u0002\u0002\u0002",
    "J\u0280\u0003\u0002\u0002\u0002L\u0283\u0003\u0002\u0002\u0002N\u0292",
    "\u0003\u0002\u0002\u0002P\u0297\u0003\u0002\u0002\u0002R\u02a1\u0003",
    "\u0002\u0002\u0002T\u02ba\u0003\u0002\u0002\u0002V\u02bc\u0003\u0002",
    "\u0002\u0002X\u02be\u0003\u0002\u0002\u0002Z\u02c2\u0003\u0002\u0002",
    "\u0002\\\u02c5\u0003\u0002\u0002\u0002^\u02f0\u0003\u0002\u0002\u0002",
    "`\u035d\u0003\u0002\u0002\u0002b\u03ac\u0003\u0002\u0002\u0002d\u03ae",
    "\u0003\u0002\u0002\u0002f\u03b0\u0003\u0002\u0002\u0002h\u03b2\u0003",
    "\u0002\u0002\u0002j\u03b4\u0003\u0002\u0002\u0002l\u03b6\u0003\u0002",
    "\u0002\u0002n\u03b8\u0003\u0002\u0002\u0002p\u03c9\u0003\u0002\u0002",
    "\u0002r\u03cc\u0003\u0002\u0002\u0002t\u03d2\u0003\u0002\u0002\u0002",
    "v\u03d4\u0003\u0002\u0002\u0002x\u03d6\u0003\u0002\u0002\u0002z\u03dc",
    "\u0003\u0002\u0002\u0002|\u03df\u0003\u0002\u0002\u0002~\u03e3\u0003",
    "\u0002\u0002\u0002\u0080\u03ec\u0003\u0002\u0002\u0002\u0082\u03f5\u0003",
    "\u0002\u0002\u0002\u0084\u03fb\u0003\u0002\u0002\u0002\u0086\u03fd\u0003",
    "\u0002\u0002\u0002\u0088\u0403\u0003\u0002\u0002\u0002\u008a\u0405\u0003",
    "\u0002\u0002\u0002\u008c\u0425\u0003\u0002\u0002\u0002\u008e\u0427\u0003",
    "\u0002\u0002\u0002\u0090\u0434\u0003\u0002\u0002\u0002\u0092\u0436\u0003",
    "\u0002\u0002\u0002\u0094\u043a\u0003\u0002\u0002\u0002\u0096\u043e\u0003",
    "\u0002\u0002\u0002\u0098\u0440\u0003\u0002\u0002\u0002\u009a\u0448\u0003",
    "\u0002\u0002\u0002\u009c\u0457\u0003\u0002\u0002\u0002\u009e\u0460\u0003",
    "\u0002\u0002\u0002\u00a0\u0465\u0003\u0002\u0002\u0002\u00a2\u0469\u0003",
    "\u0002\u0002\u0002\u00a4\u046d\u0003\u0002\u0002\u0002\u00a6\u046f\u0003",
    "\u0002\u0002\u0002\u00a8\u0480\u0003\u0002\u0002\u0002\u00aa\u0482\u0003",
    "\u0002\u0002\u0002\u00ac\u0488\u0003\u0002\u0002\u0002\u00ae\u048d\u0003",
    "\u0002\u0002\u0002\u00b0\u048f\u0003\u0002\u0002\u0002\u00b2\u0495\u0003",
    "\u0002\u0002\u0002\u00b4\u049b\u0003\u0002\u0002\u0002\u00b6\u04a0\u0003",
    "\u0002\u0002\u0002\u00b8\u04a2\u0003\u0002\u0002\u0002\u00ba\u04b7\u0003",
    "\u0002\u0002\u0002\u00bc\u04ba\u0003\u0002\u0002\u0002\u00be\u04be\u0003",
    "\u0002\u0002\u0002\u00c0\u04c4\u0003\u0002\u0002\u0002\u00c2\u053e\u0003",
    "\u0002\u0002\u0002\u00c4\u0540\u0003\u0002\u0002\u0002\u00c6\u0545\u0003",
    "\u0002\u0002\u0002\u00c8\u0547\u0003\u0002\u0002\u0002\u00ca\u0552\u0003",
    "\u0002\u0002\u0002\u00cc\u055a\u0003\u0002\u0002\u0002\u00ce\u0562\u0003",
    "\u0002\u0002\u0002\u00d0\u0564\u0003\u0002\u0002\u0002\u00d2\u0566\u0003",
    "\u0002\u0002\u0002\u00d4\u056c\u0003\u0002\u0002\u0002\u00d6\u0570\u0003",
    "\u0002\u0002\u0002\u00d8\u0578\u0003\u0002\u0002\u0002\u00da\u0587\u0003",
    "\u0002\u0002\u0002\u00dc\u0590\u0003\u0002\u0002\u0002\u00de\u0592\u0003",
    "\u0002\u0002\u0002\u00e0\u059b\u0003\u0002\u0002\u0002\u00e2\u05a6\u0003",
    "\u0002\u0002\u0002\u00e4\u05b1\u0003\u0002\u0002\u0002\u00e6\u05b5\u0003",
    "\u0002\u0002\u0002\u00e8\u05bc\u0003\u0002\u0002\u0002\u00ea\u05c4\u0003",
    "\u0002\u0002\u0002\u00ec\u05c7\u0003\u0002\u0002\u0002\u00ee\u05ca\u0003",
    "\u0002\u0002\u0002\u00f0\u05d2\u0003\u0002\u0002\u0002\u00f2\u05d4\u0003",
    "\u0002\u0002\u0002\u00f4\u05de\u0003\u0002\u0002\u0002\u00f6\u05ea\u0003",
    "\u0002\u0002\u0002\u00f8\u05f6\u0003\u0002\u0002\u0002\u00fa\u0602\u0003",
    "\u0002\u0002\u0002\u00fc\u0604\u0003\u0002\u0002\u0002\u00fe\u060c\u0003",
    "\u0002\u0002\u0002\u0100\u060e\u0003\u0002\u0002\u0002\u0102\u0612\u0003",
    "\u0002\u0002\u0002\u0104\u0614\u0003\u0002\u0002\u0002\u0106\u061a\u0003",
    "\u0002\u0002\u0002\u0108\u0623\u0003\u0002\u0002\u0002\u010a\u062a\u0003",
    "\u0002\u0002\u0002\u010c\u0646\u0003\u0002\u0002\u0002\u010e\u0648\u0003",
    "\u0002\u0002\u0002\u0110\u064a\u0003\u0002\u0002\u0002\u0112\u0654\u0003",
    "\u0002\u0002\u0002\u0114\u0658\u0003\u0002\u0002\u0002\u0116\u065b\u0003",
    "\u0002\u0002\u0002\u0118\u065f\u0003\u0002\u0002\u0002\u011a\u0662\u0003",
    "\u0002\u0002\u0002\u011c\u0669\u0003\u0002\u0002\u0002\u011e\u0674\u0003",
    "\u0002\u0002\u0002\u0120\u0681\u0003\u0002\u0002\u0002\u0122\u0683\u0003",
    "\u0002\u0002\u0002\u0124\u0685\u0003\u0002\u0002\u0002\u0126\u0692\u0003",
    "\u0002\u0002\u0002\u0128\u0694\u0003\u0002\u0002\u0002\u012a\u0697\u0003",
    "\u0002\u0002\u0002\u012c\u06a4\u0003\u0002\u0002\u0002\u012e\u06a6\u0003",
    "\u0002\u0002\u0002\u0130\u06a8\u0003\u0002\u0002\u0002\u0132\u06c7\u0003",
    "\u0002\u0002\u0002\u0134\u06d2\u0003\u0002\u0002\u0002\u0136\u06d4\u0003",
    "\u0002\u0002\u0002\u0138\u06e1\u0003\u0002\u0002\u0002\u013a\u06e8\u0003",
    "\u0002\u0002\u0002\u013c\u06eb\u0003\u0002\u0002\u0002\u013e\u06ef\u0003",
    "\u0002\u0002\u0002\u0140\u06f8\u0003\u0002\u0002\u0002\u0142\u06fe\u0003",
    "\u0002\u0002\u0002\u0144\u0700\u0003\u0002\u0002\u0002\u0146\u0702\u0003",
    "\u0002\u0002\u0002\u0148\u0704\u0003\u0002\u0002\u0002\u014a\u014d\u0005",
    "\u0112\u008a\u0002\u014b\u014d\u0005\u0116\u008c\u0002\u014c\u014a\u0003",
    "\u0002\u0002\u0002\u014c\u014b\u0003\u0002\u0002\u0002\u014d\u0003\u0003",
    "\u0002\u0002\u0002\u014e\u0151\u0007\u0015\u0002\u0002\u014f\u0151\u0006",
    "\u0003\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0150\u014f\u0003",
    "\u0002\u0002\u0002\u0151\u0005\u0003\u0002\u0002\u0002\u0152\u0157\u0005",
    "^0\u0002\u0153\u0154\u0007\u0016\u0002\u0002\u0154\u0156\u0005^0\u0002",
    "\u0155\u0153\u0003\u0002\u0002\u0002\u0156\u0159\u0003\u0002\u0002\u0002",
    "\u0157\u0155\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002",
    "\u0158\u0007\u0003\u0002\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002",
    "\u015a\u015f\u0005`1\u0002\u015b\u015c\u0007\u0016\u0002\u0002\u015c",
    "\u015e\u0005`1\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015e\u0161",
    "\u0003\u0002\u0002\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u015f\u0160",
    "\u0003\u0002\u0002\u0002\u0160\t\u0003\u0002\u0002\u0002\u0161\u015f",
    "\u0003\u0002\u0002\u0002\u0162\u0165\u0005\f\u0007\u0002\u0163\u0165",
    "\u0005\u000e\b\u0002\u0164\u0162\u0003\u0002\u0002\u0002\u0164\u0163",
    "\u0003\u0002\u0002\u0002\u0165\u000b\u0003\u0002\u0002\u0002\u0166\u0167",
    "\u0007\r\u0002\u0002\u0167\u0170\u0007\u000e\u0002\u0002\u0168\u0169",
    "\u0007\r\u0002\u0002\u0169\u016b\u0005\u0010\t\u0002\u016a\u016c\u0007",
    "\u0016\u0002\u0002\u016b\u016a\u0003\u0002\u0002\u0002\u016b\u016c\u0003",
    "\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\u0007",
    "\u000e\u0002\u0002\u016e\u0170\u0003\u0002\u0002\u0002\u016f\u0166\u0003",
    "\u0002\u0002\u0002\u016f\u0168\u0003\u0002\u0002\u0002\u0170\r\u0003",
    "\u0002\u0002\u0002\u0171\u0173\u0007\u0011\u0002\u0002\u0172\u0174\u0005",
    "6\u001c\u0002\u0173\u0172\u0003\u0002\u0002\u0002\u0173\u0174\u0003",
    "\u0002\u0002\u0002\u0174\u0176\u0003\u0002\u0002\u0002\u0175\u0177\u0005",
    "\u001a\u000e\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u0176\u0177\u0003",
    "\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u0189\u0007",
    "\u0012\u0002\u0002\u0179\u017a\u0007\u0011\u0002\u0002\u017a\u017b\u0005",
    "\u0012\n\u0002\u017b\u017c\u0007\u0012\u0002\u0002\u017c\u0189\u0003",
    "\u0002\u0002\u0002\u017d\u017e\u0007\u0011\u0002\u0002\u017e\u017f\u0005",
    "\u0012\n\u0002\u017f\u0181\u0007\u0016\u0002\u0002\u0180\u0182\u0005",
    "6\u001c\u0002\u0181\u0180\u0003\u0002\u0002\u0002\u0181\u0182\u0003",
    "\u0002\u0002\u0002\u0182\u0184\u0003\u0002\u0002\u0002\u0183\u0185\u0005",
    "\u001a\u000e\u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0184\u0185\u0003",
    "\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0007",
    "\u0012\u0002\u0002\u0187\u0189\u0003\u0002\u0002\u0002\u0188\u0171\u0003",
    "\u0002\u0002\u0002\u0188\u0179\u0003\u0002\u0002\u0002\u0188\u017d\u0003",
    "\u0002\u0002\u0002\u0189\u000f\u0003\u0002\u0002\u0002\u018a\u018f\u0005",
    "\u0016\f\u0002\u018b\u018c\u0007\u0016\u0002\u0002\u018c\u018e\u0005",
    "\u0016\f\u0002\u018d\u018b\u0003\u0002\u0002\u0002\u018e\u0191\u0003",
    "\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u018f\u0190\u0003",
    "\u0002\u0002\u0002\u0190\u0011\u0003\u0002\u0002\u0002\u0191\u018f\u0003",
    "\u0002\u0002\u0002\u0192\u0197\u0005\u0014\u000b\u0002\u0193\u0194\u0007",
    "\u0016\u0002\u0002\u0194\u0196\u0005\u0014\u000b\u0002\u0195\u0193\u0003",
    "\u0002\u0002\u0002\u0196\u0199\u0003\u0002\u0002\u0002\u0197\u0195\u0003",
    "\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0013\u0003",
    "\u0002\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u019a\u019c\u0005",
    "6\u001c\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019b\u019c\u0003",
    "\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002\u0002\u019d\u019e\u0005",
    "\u0018\r\u0002\u019e\u0015\u0003\u0002\u0002\u0002\u019f\u01a1\u0005",
    "\u001e\u0010\u0002\u01a0\u01a2\u0005\\/\u0002\u01a1\u01a0\u0003\u0002",
    "\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a8\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u0005@!\u0002\u01a4\u01a5\u00071\u0002\u0002",
    "\u01a5\u01a6\u0005\u0018\r\u0002\u01a6\u01a8\u0003\u0002\u0002\u0002",
    "\u01a7\u019f\u0003\u0002\u0002\u0002\u01a7\u01a3\u0003\u0002\u0002\u0002",
    "\u01a8\u0017\u0003\u0002\u0002\u0002\u01a9\u01ab\u0005\u001c\u000f\u0002",
    "\u01aa\u01ac\u0005\\/\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\u0003\u0002\u0002\u0002\u01ac\u0019\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0007\u0014\u0002\u0002\u01ae\u01af\u0005\u001c\u000f\u0002\u01af",
    "\u001b\u0003\u0002\u0002\u0002\u01b0\u01b1\u0005N(\u0002\u01b1\u001d",
    "\u0003\u0002\u0002\u0002\u01b2\u01b7\u0005&\u0014\u0002\u01b3\u01b7",
    "\u0007d\u0002\u0002\u01b4\u01b5\u0007C\u0002\u0002\u01b5\u01b7\u0007",
    "!\u0002\u0002\u01b6\u01b2\u0003\u0002\u0002\u0002\u01b6\u01b3\u0003",
    "\u0002\u0002\u0002\u01b6\u01b4\u0003\u0002\u0002\u0002\u01b7\u001f\u0003",
    "\u0002\u0002\u0002\u01b8\u01bc\u0005&\u0014\u0002\u01b9\u01ba\u0007",
    "C\u0002\u0002\u01ba\u01bc\u0007!\u0002\u0002\u01bb\u01b8\u0003\u0002",
    "\u0002\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bc!\u0003\u0002",
    "\u0002\u0002\u01bd\u01c1\u0005&\u0014\u0002\u01be\u01c1\u0007d\u0002",
    "\u0002\u01bf\u01c1\u0007C\u0002\u0002\u01c0\u01bd\u0003\u0002\u0002",
    "\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0\u01bf\u0003\u0002\u0002",
    "\u0002\u01c1#\u0003\u0002\u0002\u0002\u01c2\u01c5\u0005&\u0014\u0002",
    "\u01c3\u01c5\u0007C\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002",
    "\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5%\u0003\u0002\u0002\u0002",
    "\u01c6\u01c9\u0007s\u0002\u0002\u01c7\u01c9\u0005\u0148\u00a5\u0002",
    "\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002",
    "\u01c9\'\u0003\u0002\u0002\u0002\u01ca\u01d6\u0007\\\u0002\u0002\u01cb",
    "\u01d6\u0005\u001e\u0010\u0002\u01cc\u01d6\u0005*\u0016\u0002\u01cd",
    "\u01d6\u00052\u001a\u0002\u01ce\u01d6\u0005:\u001e\u0002\u01cf\u01d6",
    "\u0005\u00e2r\u0002\u01d0\u01d6\u0005\u00e6t\u0002\u01d1\u01d6\u0005",
    "\u00f6|\u0002\u01d2\u01d6\u0007\f\u0002\u0002\u01d3\u01d6\u0005\u013a",
    "\u009e\u0002\u01d4\u01d6\u0005,\u0017\u0002\u01d5\u01ca\u0003\u0002",
    "\u0002\u0002\u01d5\u01cb\u0003\u0002\u0002\u0002\u01d5\u01cc\u0003\u0002",
    "\u0002\u0002\u01d5\u01cd\u0003\u0002\u0002\u0002\u01d5\u01ce\u0003\u0002",
    "\u0002\u0002\u01d5\u01cf\u0003\u0002\u0002\u0002\u01d5\u01d0\u0003\u0002",
    "\u0002\u0002\u01d5\u01d1\u0003\u0002\u0002\u0002\u01d5\u01d2\u0003\u0002",
    "\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d4\u0003\u0002",
    "\u0002\u0002\u01d6)\u0003\u0002\u0002\u0002\u01d7\u01d8\t\u0002\u0002",
    "\u0002\u01d8+\u0003\u0002\u0002\u0002\u01d9\u01da\u0007\u000f\u0002",
    "\u0002\u01da\u01dc\u0005\b\u0005\u0002\u01db\u01dd\u0007\u0016\u0002",
    "\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002",
    "\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01df\u0007\u0010\u0002",
    "\u0002\u01df\u01fb\u0003\u0002\u0002\u0002\u01e0\u01e1\u0007\u000f\u0002",
    "\u0002\u01e1\u01fb\u0007\u0010\u0002\u0002\u01e2\u01e3\u0007\u000f\u0002",
    "\u0002\u01e3\u01e4\u0007\u0014\u0002\u0002\u01e4\u01e5\u0005\"\u0012",
    "\u0002\u01e5\u01e6\u0007\u0010\u0002\u0002\u01e6\u01fb\u0003\u0002\u0002",
    "\u0002\u01e7\u01e8\u0007\u000f\u0002\u0002\u01e8\u01e9\u0007\u0014\u0002",
    "\u0002\u01e9\u01ea\u0005\u0088E\u0002\u01ea\u01eb\u0007\u0010\u0002",
    "\u0002\u01eb\u01fb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007\u000f\u0002",
    "\u0002\u01ed\u01ee\u0005\b\u0005\u0002\u01ee\u01ef\u0007\u0016\u0002",
    "\u0002\u01ef\u01f0\u0007\u0014\u0002\u0002\u01f0\u01f1\u0005\"\u0012",
    "\u0002\u01f1\u01f2\u0007\u0010\u0002\u0002\u01f2\u01fb\u0003\u0002\u0002",
    "\u0002\u01f3\u01f4\u0007\u000f\u0002\u0002\u01f4\u01f5\u0005\b\u0005",
    "\u0002\u01f5\u01f6\u0007\u0016\u0002\u0002\u01f6\u01f7\u0007\u0014\u0002",
    "\u0002\u01f7\u01f8\u0005\u0088E\u0002\u01f8\u01f9\u0007\u0010\u0002",
    "\u0002\u01f9\u01fb\u0003\u0002\u0002\u0002\u01fa\u01d9\u0003\u0002\u0002",
    "\u0002\u01fa\u01e0\u0003\u0002\u0002\u0002\u01fa\u01e2\u0003\u0002\u0002",
    "\u0002\u01fa\u01e7\u0003\u0002\u0002\u0002\u01fa\u01ec\u0003\u0002\u0002",
    "\u0002\u01fa\u01f3\u0003\u0002\u0002\u0002\u01fb-\u0003\u0002\u0002",
    "\u0002\u01fc\u01fd\u0007\u000f\u0002\u0002\u01fd\u01fe\u0005(\u0015",
    "\u0002\u01fe\u01ff\u0007\u0010\u0002\u0002\u01ff/\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u0005R*\u0002\u0201\u0202\u0005J&\u0002\u02021\u0003",
    "\u0002\u0002\u0002\u0203\u0205\u0007\u0011\u0002\u0002\u0204\u0206\u0005",
    "6\u001c\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0205\u0206\u0003",
    "\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0215\u0007",
    "\u0012\u0002\u0002\u0208\u0209\u0007\u0011\u0002\u0002\u0209\u020a\u0005",
    "4\u001b\u0002\u020a\u020b\u0007\u0012\u0002\u0002\u020b\u0215\u0003",
    "\u0002\u0002\u0002\u020c\u020d\u0007\u0011\u0002\u0002\u020d\u020e\u0005",
    "4\u001b\u0002\u020e\u0210\u0007\u0016\u0002\u0002\u020f\u0211\u0005",
    "6\u001c\u0002\u0210\u020f\u0003\u0002\u0002\u0002\u0210\u0211\u0003",
    "\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0213\u0007",
    "\u0012\u0002\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u0203\u0003",
    "\u0002\u0002\u0002\u0214\u0208\u0003\u0002\u0002\u0002\u0214\u020c\u0003",
    "\u0002\u0002\u0002\u02153\u0003\u0002\u0002\u0002\u0216\u0218\b\u001b",
    "\u0001\u0002\u0217\u0219\u00056\u001c\u0002\u0218\u0217\u0003\u0002",
    "\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002",
    "\u0002\u0002\u021a\u0220\u0005`1\u0002\u021b\u021d\u00056\u001c\u0002",
    "\u021c\u021b\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002",
    "\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u0220\u00058\u001d\u0002",
    "\u021f\u0216\u0003\u0002\u0002\u0002\u021f\u021c\u0003\u0002\u0002\u0002",
    "\u0220\u022f\u0003\u0002\u0002\u0002\u0221\u0222\f\u0004\u0002\u0002",
    "\u0222\u0224\u0007\u0016\u0002\u0002\u0223\u0225\u00056\u001c\u0002",
    "\u0224\u0223\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002",
    "\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u022e\u0005`1\u0002\u0227",
    "\u0228\f\u0003\u0002\u0002\u0228\u022a\u0007\u0016\u0002\u0002\u0229",
    "\u022b\u00056\u001c\u0002\u022a\u0229\u0003\u0002\u0002\u0002\u022a",
    "\u022b\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c",
    "\u022e\u00058\u001d\u0002\u022d\u0221\u0003\u0002\u0002\u0002\u022d",
    "\u0227\u0003\u0002\u0002\u0002\u022e\u0231\u0003\u0002\u0002\u0002\u022f",
    "\u022d\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230",
    "5\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0232",
    "\u0234\u0007\u0016\u0002\u0002\u0233\u0232\u0003\u0002\u0002\u0002\u0234",
    "\u0235\u0003\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235",
    "\u0236\u0003\u0002\u0002\u0002\u02367\u0003\u0002\u0002\u0002\u0237",
    "\u0238\u0007\u0014\u0002\u0002\u0238\u0239\u0005`1\u0002\u02399\u0003",
    "\u0002\u0002\u0002\u023a\u023f\u0007\r\u0002\u0002\u023b\u023d\u0005",
    "<\u001f\u0002\u023c\u023e\u0007\u0016\u0002\u0002\u023d\u023c\u0003",
    "\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u0240\u0003",
    "\u0002\u0002\u0002\u023f\u023b\u0003\u0002\u0002\u0002\u023f\u0240\u0003",
    "\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0242\u0007",
    "\u000e\u0002\u0002\u0242;\u0003\u0002\u0002\u0002\u0243\u0248\u0005",
    "> \u0002\u0244\u0245\u0007\u0016\u0002\u0002\u0245\u0247\u0005> \u0002",
    "\u0246\u0244\u0003\u0002\u0002\u0002\u0247\u024a\u0003\u0002\u0002\u0002",
    "\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002",
    "\u0249=\u0003\u0002\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002",
    "\u024b\u0252\u0005\u010c\u0087\u0002\u024c\u024d\u0005@!\u0002\u024d",
    "\u024e\u00071\u0002\u0002\u024e\u024f\u0005`1\u0002\u024f\u0252\u0003",
    "\u0002\u0002\u0002\u0250\u0252\u0005\u001e\u0010\u0002\u0251\u024b\u0003",
    "\u0002\u0002\u0002\u0251\u024c\u0003\u0002\u0002\u0002\u0251\u0250\u0003",
    "\u0002\u0002\u0002\u0252?\u0003\u0002\u0002\u0002\u0253\u0256\u0005",
    "B\"\u0002\u0254\u0256\u0005D#\u0002\u0255\u0253\u0003\u0002\u0002\u0002",
    "\u0255\u0254\u0003\u0002\u0002\u0002\u0256A\u0003\u0002\u0002\u0002",
    "\u0257\u025b\u0005\u0140\u00a1\u0002\u0258\u025b\u0007r\u0002\u0002",
    "\u0259\u025b\u0007\u0007\u0002\u0002\u025a\u0257\u0003\u0002\u0002\u0002",
    "\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002",
    "\u025bC\u0003\u0002\u0002\u0002\u025c\u025d\u0005`1\u0002\u025dE\u0003",
    "\u0002\u0002\u0002\u025e\u025f\b$\u0001\u0002\u025f\u0262\u00050\u0019",
    "\u0002\u0260\u0262\u0005H%\u0002\u0261\u025e\u0003\u0002\u0002\u0002",
    "\u0261\u0260\u0003\u0002\u0002\u0002\u0262\u0271\u0003\u0002\u0002\u0002",
    "\u0263\u0264\f\u0006\u0002\u0002\u0264\u0270\u0005J&\u0002\u0265\u0266",
    "\f\u0005\u0002\u0002\u0266\u0267\u0007\u0011\u0002\u0002\u0267\u0268",
    "\u0005\b\u0005\u0002\u0268\u0269\u0007\u0012\u0002\u0002\u0269\u0270",
    "\u0003\u0002\u0002\u0002\u026a\u026b\f\u0004\u0002\u0002\u026b\u026c",
    "\u0007\u0013\u0002\u0002\u026c\u0270\u0005\u0140\u00a1\u0002\u026d\u026e",
    "\f\u0003\u0002\u0002\u026e\u0270\u0005\u013a\u009e\u0002\u026f\u0263",
    "\u0003\u0002\u0002\u0002\u026f\u0265\u0003\u0002\u0002\u0002\u026f\u026a",
    "\u0003\u0002\u0002\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u0270\u0273",
    "\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0271\u0272",
    "\u0003\u0002\u0002\u0002\u0272G\u0003\u0002\u0002\u0002\u0273\u0271",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0007Z\u0002\u0002\u0275\u0276",
    "\u0005J&\u0002\u0276I\u0003\u0002\u0002\u0002\u0277\u0278\u0007\u000f",
    "\u0002\u0002\u0278\u0281\u0007\u0010\u0002\u0002\u0279\u027a\u0007\u000f",
    "\u0002\u0002\u027a\u027c\u0005L\'\u0002\u027b\u027d\u0007\u0016\u0002",
    "\u0002\u027c\u027b\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002",
    "\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u027f\u0007\u0010\u0002",
    "\u0002\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u0277\u0003\u0002\u0002",
    "\u0002\u0280\u0279\u0003\u0002\u0002\u0002\u0281K\u0003\u0002\u0002",
    "\u0002\u0282\u0284\u0007\u0014\u0002\u0002\u0283\u0282\u0003\u0002\u0002",
    "\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002",
    "\u0002\u0285\u028d\u0005`1\u0002\u0286\u0288\u0007\u0016\u0002\u0002",
    "\u0287\u0289\u0007\u0014\u0002\u0002\u0288\u0287\u0003\u0002\u0002\u0002",
    "\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002",
    "\u028a\u028c\u0005`1\u0002\u028b\u0286\u0003\u0002\u0002\u0002\u028c",
    "\u028f\u0003\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028d",
    "\u028e\u0003\u0002\u0002\u0002\u028eM\u0003\u0002\u0002\u0002\u028f",
    "\u028d\u0003\u0002\u0002\u0002\u0290\u0293\u0005F$\u0002\u0291\u0293",
    "\u0005P)\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0291\u0003",
    "\u0002\u0002\u0002\u0293O\u0003\u0002\u0002\u0002\u0294\u0298\u0005",
    "R*\u0002\u0295\u0296\u0007X\u0002\u0002\u0296\u0298\u0005P)\u0002\u0297",
    "\u0294\u0003\u0002\u0002\u0002\u0297\u0295\u0003\u0002\u0002\u0002\u0298",
    "Q\u0003\u0002\u0002\u0002\u0299\u029a\b*\u0001\u0002\u029a\u02a2\u0005",
    "(\u0015\u0002\u029b\u02a2\u0005T+\u0002\u029c\u02a2\u0005V,\u0002\u029d",
    "\u029e\u0007X\u0002\u0002\u029e\u029f\u0005R*\u0002\u029f\u02a0\u0005",
    "J&\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002\u02a1\u0299\u0003\u0002",
    "\u0002\u0002\u02a1\u029b\u0003\u0002\u0002\u0002\u02a1\u029c\u0003\u0002",
    "\u0002\u0002\u02a1\u029d\u0003\u0002\u0002\u0002\u02a2\u02af\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\f\b\u0002\u0002\u02a4\u02a5\u0007\u0011\u0002",
    "\u0002\u02a5\u02a6\u0005\b\u0005\u0002\u02a6\u02a7\u0007\u0012\u0002",
    "\u0002\u02a7\u02ae\u0003\u0002\u0002\u0002\u02a8\u02a9\f\u0007\u0002",
    "\u0002\u02a9\u02aa\u0007\u0013\u0002\u0002\u02aa\u02ae\u0005\u0140\u00a1",
    "\u0002\u02ab\u02ac\f\u0006\u0002\u0002\u02ac\u02ae\u0005\u013a\u009e",
    "\u0002\u02ad\u02a3\u0003\u0002\u0002\u0002\u02ad\u02a8\u0003\u0002\u0002",
    "\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002\u02ae\u02b1\u0003\u0002\u0002",
    "\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002",
    "\u0002\u02b0S\u0003\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002",
    "\u0002\u02b2\u02b3\u0007Z\u0002\u0002\u02b3\u02b4\u0007\u0011\u0002",
    "\u0002\u02b4\u02b5\u0005\b\u0005\u0002\u02b5\u02b6\u0007\u0012\u0002",
    "\u0002\u02b6\u02bb\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007Z\u0002",
    "\u0002\u02b8\u02b9\u0007\u0013\u0002\u0002\u02b9\u02bb\u0005\u0140\u00a1",
    "\u0002\u02ba\u02b2\u0003\u0002\u0002\u0002\u02ba\u02b7\u0003\u0002\u0002",
    "\u0002\u02bbU\u0003\u0002\u0002\u0002\u02bc\u02bd\u0005X-\u0002\u02bd",
    "W\u0003\u0002\u0002\u0002\u02be\u02bf\u0007X\u0002\u0002\u02bf\u02c0",
    "\u0007\u0013\u0002\u0002\u02c0\u02c1\u0007q\u0002\u0002\u02c1Y\u0003",
    "\u0002\u0002\u0002\u02c2\u02c3\u00072\u0002\u0002\u02c3\u02c4\u0005",
    "^0\u0002\u02c4[\u0003\u0002\u0002\u0002\u02c5\u02c6\u00072\u0002\u0002",
    "\u02c6\u02c7\u0005`1\u0002\u02c7]\u0003\u0002\u0002\u0002\u02c8\u02c9",
    "\b0\u0001\u0002\u02c9\u02f1\u0005.\u0018\u0002\u02ca\u02f1\u0005\u00e2",
    "r\u0002\u02cb\u02f1\u0005\u00e6t\u0002\u02cc\u02f1\u0005\u00f6|\u0002",
    "\u02cd\u02ce\u0005`1\u0002\u02ce\u02cf\u0007\u0011\u0002\u0002\u02cf",
    "\u02d0\u0005\u0006\u0004\u0002\u02d0\u02d1\u0007\u0012\u0002\u0002\u02d1",
    "\u02f1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0007X\u0002\u0002\u02d3",
    "\u02d5\u0005^0\u0002\u02d4\u02d6\u0005J&\u0002\u02d5\u02d4\u0003\u0002",
    "\u0002\u0002\u02d5\u02d6\u0003\u0002\u0002\u0002\u02d6\u02f1\u0003\u0002",
    "\u0002\u0002\u02d7\u02d8\u0005b2\u0002\u02d8\u02d9\u0005^0$\u02d9\u02f1",
    "\u0003\u0002\u0002\u0002\u02da\u02db\b0\u0001\u0002\u02db\u02dc\u0007",
    "d\u0002\u0002\u02dc\u02f1\u0005^0\u0013\u02dd\u02de\u0005\u0102\u0082",
    "\u0002\u02de\u02df\u0007>\u0002\u0002\u02df\u02e0\u0005\u0108\u0085",
    "\u0002\u02e0\u02f1\u0003\u0002\u0002\u0002\u02e1\u02f1\u0005\n\u0006",
    "\u0002\u02e2\u02f1\u0005H%\u0002\u02e3\u02f1\u0005T+\u0002\u02e4\u02f1",
    "\u0005V,\u0002\u02e5\u02f1\u0007\\\u0002\u0002\u02e6\u02f1\u0005\u001e",
    "\u0010\u0002\u02e7\u02f1\u0007A\u0002\u0002\u02e8\u02f1\u0007B\u0002",
    "\u0002\u02e9\u02f1\u0007\u0007\u0002\u0002\u02ea\u02f1\u0007r\u0002",
    "\u0002\u02eb\u02f1\u00052\u001a\u0002\u02ec\u02f1\u0005:\u001e\u0002",
    "\u02ed\u02f1\u0007\f\u0002\u0002\u02ee\u02f1\u0005\u013a\u009e\u0002",
    "\u02ef\u02f1\u0005,\u0017\u0002\u02f0\u02c8\u0003\u0002\u0002\u0002",
    "\u02f0\u02ca\u0003\u0002\u0002\u0002\u02f0\u02cb\u0003\u0002\u0002\u0002",
    "\u02f0\u02cc\u0003\u0002\u0002\u0002\u02f0\u02cd\u0003\u0002\u0002\u0002",
    "\u02f0\u02d2\u0003\u0002\u0002\u0002\u02f0\u02d7\u0003\u0002\u0002\u0002",
    "\u02f0\u02da\u0003\u0002\u0002\u0002\u02f0\u02dd\u0003\u0002\u0002\u0002",
    "\u02f0\u02e1\u0003\u0002\u0002\u0002\u02f0\u02e2\u0003\u0002\u0002\u0002",
    "\u02f0\u02e3\u0003\u0002\u0002\u0002\u02f0\u02e4\u0003\u0002\u0002\u0002",
    "\u02f0\u02e5\u0003\u0002\u0002\u0002\u02f0\u02e6\u0003\u0002\u0002\u0002",
    "\u02f0\u02e7\u0003\u0002\u0002\u0002\u02f0\u02e8\u0003\u0002\u0002\u0002",
    "\u02f0\u02e9\u0003\u0002\u0002\u0002\u02f0\u02ea\u0003\u0002\u0002\u0002",
    "\u02f0\u02eb\u0003\u0002\u0002\u0002\u02f0\u02ec\u0003\u0002\u0002\u0002",
    "\u02f0\u02ed\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002",
    "\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1\u0337\u0003\u0002\u0002\u0002",
    "\u02f2\u02f3\f#\u0002\u0002\u02f3\u02f4\u0007#\u0002\u0002\u02f4\u0336",
    "\u0005^0$\u02f5\u02f6\f\"\u0002\u0002\u02f6\u02f7\u0005d3\u0002\u02f7",
    "\u02f8\u0005^0#\u02f8\u0336\u0003\u0002\u0002\u0002\u02f9\u02fa\f!\u0002",
    "\u0002\u02fa\u02fb\u0005f4\u0002\u02fb\u02fc\u0005^0\"\u02fc\u0336\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\f \u0002\u0002\u02fe\u02ff\u0005h5\u0002",
    "\u02ff\u0300\u0005^0!\u0300\u0336\u0003\u0002\u0002\u0002\u0301\u0302",
    "\f\u001f\u0002\u0002\u0302\u0303\u0005j6\u0002\u0303\u0304\u0005^0 ",
    "\u0304\u0336\u0003\u0002\u0002\u0002\u0305\u0306\f\u001e\u0002\u0002",
    "\u0306\u0307\u0007V\u0002\u0002\u0307\u0336\u0005^0\u001f\u0308\u0309",
    "\f\u001d\u0002\u0002\u0309\u030a\u0007W\u0002\u0002\u030a\u0336\u0005",
    "^0\u001e\u030b\u030c\f\u001c\u0002\u0002\u030c\u030d\u0005l7\u0002\u030d",
    "\u030e\u0005^0\u001d\u030e\u0336\u0003\u0002\u0002\u0002\u030f\u0310",
    "\f\u001b\u0002\u0002\u0310\u0311\u0007)\u0002\u0002\u0311\u0336\u0005",
    "^0\u001c\u0312\u0313\f\u001a\u0002\u0002\u0313\u0314\u0007+\u0002\u0002",
    "\u0314\u0336\u0005^0\u001b\u0315\u0316\f\u0019\u0002\u0002\u0316\u0317",
    "\u0007*\u0002\u0002\u0317\u0336\u0005^0\u001a\u0318\u0319\f\u0018\u0002",
    "\u0002\u0319\u031a\u0007.\u0002\u0002\u031a\u0336\u0005^0\u0019\u031b",
    "\u031c\f\u0017\u0002\u0002\u031c\u031d\u0007/\u0002\u0002\u031d\u0336",
    "\u0005^0\u0018\u031e\u031f\f\u0016\u0002\u0002\u031f\u0320\u00070\u0002",
    "\u0002\u0320\u0321\u0005^0\u0002\u0321\u0322\u00071\u0002\u0002\u0322",
    "\u0323\u0005^0\u0017\u0323\u0336\u0003\u0002\u0002\u0002\u0324\u0325",
    "\f\u0015\u0002\u0002\u0325\u0326\u00072\u0002\u0002\u0326\u0336\u0005",
    "^0\u0016\u0327\u0328\f\u0014\u0002\u0002\u0328\u0329\u0005n8\u0002\u0329",
    "\u032a\u0005^0\u0015\u032a\u0336\u0003\u0002\u0002\u0002\u032b\u032c",
    "\f*\u0002\u0002\u032c\u0336\u0005J&\u0002\u032d\u032e\f(\u0002\u0002",
    "\u032e\u032f\u0007\u0013\u0002\u0002\u032f\u0336\u0005\u0140\u00a1\u0002",
    "\u0330\u0331\f\'\u0002\u0002\u0331\u0336\u0005\u013a\u009e\u0002\u0332",
    "\u0333\f%\u0002\u0002\u0333\u0334\u00060 \u0002\u0334\u0336\t\u0003",
    "\u0002\u0002\u0335\u02f2\u0003\u0002\u0002\u0002\u0335\u02f5\u0003\u0002",
    "\u0002\u0002\u0335\u02f9\u0003\u0002\u0002\u0002\u0335\u02fd\u0003\u0002",
    "\u0002\u0002\u0335\u0301\u0003\u0002\u0002\u0002\u0335\u0305\u0003\u0002",
    "\u0002\u0002\u0335\u0308\u0003\u0002\u0002\u0002\u0335\u030b\u0003\u0002",
    "\u0002\u0002\u0335\u030f\u0003\u0002\u0002\u0002\u0335\u0312\u0003\u0002",
    "\u0002\u0002\u0335\u0315\u0003\u0002\u0002\u0002\u0335\u0318\u0003\u0002",
    "\u0002\u0002\u0335\u031b\u0003\u0002\u0002\u0002\u0335\u031e\u0003\u0002",
    "\u0002\u0002\u0335\u0324\u0003\u0002\u0002\u0002\u0335\u0327\u0003\u0002",
    "\u0002\u0002\u0335\u032b\u0003\u0002\u0002\u0002\u0335\u032d\u0003\u0002",
    "\u0002\u0002\u0335\u0330\u0003\u0002\u0002\u0002\u0335\u0332\u0003\u0002",
    "\u0002\u0002\u0336\u0339\u0003\u0002\u0002\u0002\u0337\u0335\u0003\u0002",
    "\u0002\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338_\u0003\u0002",
    "\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u033a\u033b\b1\u0001",
    "\u0002\u033b\u035e\u0005.\u0018\u0002\u033c\u035e\u0005\u00e2r\u0002",
    "\u033d\u035e\u0005\u00e6t\u0002\u033e\u035e\u0005\u00f6|\u0002\u033f",
    "\u0340\u0007X\u0002\u0002\u0340\u0342\u0005`1\u0002\u0341\u0343\u0005",
    "J&\u0002\u0342\u0341\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002",
    "\u0002\u0002\u0343\u035e\u0003\u0002\u0002\u0002\u0344\u0345\u0005b",
    "2\u0002\u0345\u0346\u0005`1$\u0346\u035e\u0003\u0002\u0002\u0002\u0347",
    "\u0348\u0005\u0102\u0082\u0002\u0348\u0349\u0007>\u0002\u0002\u0349",
    "\u034a\u0005\u010a\u0086\u0002\u034a\u035e\u0003\u0002\u0002\u0002\u034b",
    "\u034c\b1\u0001\u0002\u034c\u034d\u0007d\u0002\u0002\u034d\u035e\u0005",
    "`1\u0012\u034e\u035e\u0005\n\u0006\u0002\u034f\u035e\u0005H%\u0002\u0350",
    "\u035e\u0005T+\u0002\u0351\u035e\u0005V,\u0002\u0352\u035e\u0007\\\u0002",
    "\u0002\u0353\u035e\u0005\u001e\u0010\u0002\u0354\u035e\u0007A\u0002",
    "\u0002\u0355\u035e\u0007B\u0002\u0002\u0356\u035e\u0007\u0007\u0002",
    "\u0002\u0357\u035e\u0007r\u0002\u0002\u0358\u035e\u00052\u001a\u0002",
    "\u0359\u035e\u0005:\u001e\u0002\u035a\u035e\u0007\f\u0002\u0002\u035b",
    "\u035e\u0005\u013a\u009e\u0002\u035c\u035e\u0005,\u0017\u0002\u035d",
    "\u033a\u0003\u0002\u0002\u0002\u035d\u033c\u0003\u0002\u0002\u0002\u035d",
    "\u033d\u0003\u0002\u0002\u0002\u035d\u033e\u0003\u0002\u0002\u0002\u035d",
    "\u033f\u0003\u0002\u0002\u0002\u035d\u0344\u0003\u0002\u0002\u0002\u035d",
    "\u0347\u0003\u0002\u0002\u0002\u035d\u034b\u0003\u0002\u0002\u0002\u035d",
    "\u034e\u0003\u0002\u0002\u0002\u035d\u034f\u0003\u0002\u0002\u0002\u035d",
    "\u0350\u0003\u0002\u0002\u0002\u035d\u0351\u0003\u0002\u0002\u0002\u035d",
    "\u0352\u0003\u0002\u0002\u0002\u035d\u0353\u0003\u0002\u0002\u0002\u035d",
    "\u0354\u0003\u0002\u0002\u0002\u035d\u0355\u0003\u0002\u0002\u0002\u035d",
    "\u0356\u0003\u0002\u0002\u0002\u035d\u0357\u0003\u0002\u0002\u0002\u035d",
    "\u0358\u0003\u0002\u0002\u0002\u035d\u0359\u0003\u0002\u0002\u0002\u035d",
    "\u035a\u0003\u0002\u0002\u0002\u035d\u035b\u0003\u0002\u0002\u0002\u035d",
    "\u035c\u0003\u0002\u0002\u0002\u035e\u03a9\u0003\u0002\u0002\u0002\u035f",
    "\u0360\f#\u0002\u0002\u0360\u0361\u0007#\u0002\u0002\u0361\u03a8\u0005",
    "`1$\u0362\u0363\f\"\u0002\u0002\u0363\u0364\u0005d3\u0002\u0364\u0365",
    "\u0005`1#\u0365\u03a8\u0003\u0002\u0002\u0002\u0366\u0367\f!\u0002\u0002",
    "\u0367\u0368\u0005f4\u0002\u0368\u0369\u0005`1\"\u0369\u03a8\u0003\u0002",
    "\u0002\u0002\u036a\u036b\f \u0002\u0002\u036b\u036c\u0005h5\u0002\u036c",
    "\u036d\u0005`1!\u036d\u03a8\u0003\u0002\u0002\u0002\u036e\u036f\f\u001f",
    "\u0002\u0002\u036f\u0370\u0005j6\u0002\u0370\u0371\u0005`1 \u0371\u03a8",
    "\u0003\u0002\u0002\u0002\u0372\u0373\f\u001e\u0002\u0002\u0373\u0374",
    "\u0007V\u0002\u0002\u0374\u03a8\u0005`1\u001f\u0375\u0376\f\u001d\u0002",
    "\u0002\u0376\u0377\u0007W\u0002\u0002\u0377\u03a8\u0005`1\u001e\u0378",
    "\u0379\f\u001c\u0002\u0002\u0379\u037a\u0005l7\u0002\u037a\u037b\u0005",
    "`1\u001d\u037b\u03a8\u0003\u0002\u0002\u0002\u037c\u037d\f\u001b\u0002",
    "\u0002\u037d\u037e\u0007)\u0002\u0002\u037e\u03a8\u0005`1\u001c\u037f",
    "\u0380\f\u001a\u0002\u0002\u0380\u0381\u0007+\u0002\u0002\u0381\u03a8",
    "\u0005`1\u001b\u0382\u0383\f\u0019\u0002\u0002\u0383\u0384\u0007*\u0002",
    "\u0002\u0384\u03a8\u0005`1\u001a\u0385\u0386\f\u0018\u0002\u0002\u0386",
    "\u0387\u0007.\u0002\u0002\u0387\u03a8\u0005`1\u0019\u0388\u0389\f\u0017",
    "\u0002\u0002\u0389\u038a\u0007/\u0002\u0002\u038a\u03a8\u0005`1\u0018",
    "\u038b\u038c\f\u0016\u0002\u0002\u038c\u038d\u00070\u0002\u0002\u038d",
    "\u038e\u0005`1\u0002\u038e\u038f\u00071\u0002\u0002\u038f\u0390\u0005",
    "`1\u0017\u0390\u03a8\u0003\u0002\u0002\u0002\u0391\u0392\f\u0014\u0002",
    "\u0002\u0392\u0393\u00072\u0002\u0002\u0393\u03a8\u0005`1\u0015\u0394",
    "\u0395\f\u0013\u0002\u0002\u0395\u0396\u0005n8\u0002\u0396\u0397\u0005",
    "`1\u0014\u0397\u03a8\u0003\u0002\u0002\u0002\u0398\u0399\f*\u0002\u0002",
    "\u0399\u03a8\u0005J&\u0002\u039a\u039b\f)\u0002\u0002\u039b\u039c\u0007",
    "\u0011\u0002\u0002\u039c\u039d\u0005\b\u0005\u0002\u039d\u039e\u0007",
    "\u0012\u0002\u0002\u039e\u03a8\u0003\u0002\u0002\u0002\u039f\u03a0\f",
    "(\u0002\u0002\u03a0\u03a1\u0007\u0013\u0002\u0002\u03a1\u03a8\u0005",
    "\u0140\u00a1\u0002\u03a2\u03a3\f\'\u0002\u0002\u03a3\u03a8\u0005\u013a",
    "\u009e\u0002\u03a4\u03a5\f%\u0002\u0002\u03a5\u03a6\u000616\u0002\u03a6",
    "\u03a8\t\u0003\u0002\u0002\u03a7\u035f\u0003\u0002\u0002\u0002\u03a7",
    "\u0362\u0003\u0002\u0002\u0002\u03a7\u0366\u0003\u0002\u0002\u0002\u03a7",
    "\u036a\u0003\u0002\u0002\u0002\u03a7\u036e\u0003\u0002\u0002\u0002\u03a7",
    "\u0372\u0003\u0002\u0002\u0002\u03a7\u0375\u0003\u0002\u0002\u0002\u03a7",
    "\u0378\u0003\u0002\u0002\u0002\u03a7\u037c\u0003\u0002\u0002\u0002\u03a7",
    "\u037f\u0003\u0002\u0002\u0002\u03a7\u0382\u0003\u0002\u0002\u0002\u03a7",
    "\u0385\u0003\u0002\u0002\u0002\u03a7\u0388\u0003\u0002\u0002\u0002\u03a7",
    "\u038b\u0003\u0002\u0002\u0002\u03a7\u0391\u0003\u0002\u0002\u0002\u03a7",
    "\u0394\u0003\u0002\u0002\u0002\u03a7\u0398\u0003\u0002\u0002\u0002\u03a7",
    "\u039a\u0003\u0002\u0002\u0002\u03a7\u039f\u0003\u0002\u0002\u0002\u03a7",
    "\u03a2\u0003\u0002\u0002\u0002\u03a7\u03a4\u0003\u0002\u0002\u0002\u03a8",
    "\u03ab\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003\u0002\u0002\u0002\u03a9",
    "\u03aa\u0003\u0002\u0002\u0002\u03aaa\u0003\u0002\u0002\u0002\u03ab",
    "\u03a9\u0003\u0002\u0002\u0002\u03ac\u03ad\t\u0004\u0002\u0002\u03ad",
    "c\u0003\u0002\u0002\u0002\u03ae\u03af\t\u0005\u0002\u0002\u03afe\u0003",
    "\u0002\u0002\u0002\u03b0\u03b1\t\u0006\u0002\u0002\u03b1g\u0003\u0002",
    "\u0002\u0002\u03b2\u03b3\t\u0007\u0002\u0002\u03b3i\u0003\u0002\u0002",
    "\u0002\u03b4\u03b5\t\b\u0002\u0002\u03b5k\u0003\u0002\u0002\u0002\u03b6",
    "\u03b7\t\t\u0002\u0002\u03b7m\u0003\u0002\u0002\u0002\u03b8\u03b9\t",
    "\n\u0002\u0002\u03b9o\u0003\u0002\u0002\u0002\u03ba\u03ca\u0005\u00d0",
    "i\u0002\u03bb\u03ca\u0005\u00d4k\u0002\u03bc\u03ca\u0005v<\u0002\u03bd",
    "\u03ca\u0005|?\u0002\u03be\u03ca\u0005\u00c8e\u0002\u03bf\u03ca\u0005",
    "\u00caf\u0002\u03c0\u03ca\u0005\u00ccg\u0002\u03c1\u03ca\u0005\u00ce",
    "h\u0002\u03c2\u03c3\u000697\u0002\u03c3\u03ca\u0005x=\u0002\u03c4\u03ca",
    "\u0005\u00b0Y\u0002\u03c5\u03ca\u0005\u00b2Z\u0002\u03c6\u03ca\u0005",
    "\u00a6T\u0002\u03c7\u03ca\u0005\u00a8U\u0002\u03c8\u03ca\u0005z>\u0002",
    "\u03c9\u03ba\u0003\u0002\u0002\u0002\u03c9\u03bb\u0003\u0002\u0002\u0002",
    "\u03c9\u03bc\u0003\u0002\u0002\u0002\u03c9\u03bd\u0003\u0002\u0002\u0002",
    "\u03c9\u03be\u0003\u0002\u0002\u0002\u03c9\u03bf\u0003\u0002\u0002\u0002",
    "\u03c9\u03c0\u0003\u0002\u0002\u0002\u03c9\u03c1\u0003\u0002\u0002\u0002",
    "\u03c9\u03c2\u0003\u0002\u0002\u0002\u03c9\u03c4\u0003\u0002\u0002\u0002",
    "\u03c9\u03c5\u0003\u0002\u0002\u0002\u03c9\u03c6\u0003\u0002\u0002\u0002",
    "\u03c9\u03c7\u0003\u0002\u0002\u0002\u03c9\u03c8\u0003\u0002\u0002\u0002",
    "\u03caq\u0003\u0002\u0002\u0002\u03cb\u03cd\u0005t;\u0002\u03cc\u03cb",
    "\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u03cc",
    "\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cfs",
    "\u0003\u0002\u0002\u0002\u03d0\u03d3\u0005\u00a0Q\u0002\u03d1\u03d3",
    "\u0005p9\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d2\u03d1\u0003",
    "\u0002\u0002\u0002\u03d3u\u0003\u0002\u0002\u0002\u03d4\u03d5\u0007",
    "\u0015\u0002\u0002\u03d5w\u0003\u0002\u0002\u0002\u03d6\u03d8\u0007",
    "Y\u0002\u0002\u03d7\u03d9\u0005\b\u0005\u0002\u03d8\u03d7\u0003\u0002",
    "\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9\u03da\u0003\u0002",
    "\u0002\u0002\u03da\u03db\u0005\u0004\u0003\u0002\u03dby\u0003\u0002",
    "\u0002\u0002\u03dc\u03dd\u0007J\u0002\u0002\u03dd\u03de\u0005\u0004",
    "\u0003\u0002\u03de{\u0003\u0002\u0002\u0002\u03df\u03e0\u0006?8\u0002",
    "\u03e0\u03e1\u0005\b\u0005\u0002\u03e1\u03e2\u0005\u0004\u0003\u0002",
    "\u03e2}\u0003\u0002\u0002\u0002\u03e3\u03e8\u0005\u0080A\u0002\u03e4",
    "\u03e5\u0007\u0016\u0002\u0002\u03e5\u03e7\u0005\u0080A\u0002\u03e6",
    "\u03e4\u0003\u0002\u0002\u0002\u03e7\u03ea\u0003\u0002\u0002\u0002\u03e8",
    "\u03e6\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9",
    "\u007f\u0003\u0002\u0002\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03eb",
    "\u03ed\u00056\u001c\u0002\u03ec\u03eb\u0003\u0002\u0002\u0002\u03ec",
    "\u03ed\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002\u03ee",
    "\u03ef\u0005\u0082B\u0002\u03ef\u0081\u0003\u0002\u0002\u0002\u03f0",
    "\u03f6\u0005\u0086D\u0002\u03f1\u03f3\u0005\u0088E\u0002\u03f2\u03f4",
    "\u0005\\/\u0002\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003",
    "\u0002\u0002\u0002\u03f4\u03f6\u0003\u0002\u0002\u0002\u03f5\u03f0\u0003",
    "\u0002\u0002\u0002\u03f5\u03f1\u0003\u0002\u0002\u0002\u03f6\u0083\u0003",
    "\u0002\u0002\u0002\u03f7\u03f8\u0007\u0014\u0002\u0002\u03f8\u03fc\u0005",
    "\"\u0012\u0002\u03f9\u03fa\u0007\u0014\u0002\u0002\u03fa\u03fc\u0005",
    "\u0088E\u0002\u03fb\u03f7\u0003\u0002\u0002\u0002\u03fb\u03f9\u0003",
    "\u0002\u0002\u0002\u03fc\u0085\u0003\u0002\u0002\u0002\u03fd\u03ff\u0005",
    "\"\u0012\u0002\u03fe\u0400\u0005\\/\u0002\u03ff\u03fe\u0003\u0002\u0002",
    "\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0087\u0003\u0002\u0002",
    "\u0002\u0401\u0404\u0005\u008aF\u0002\u0402\u0404\u0005\u008cG\u0002",
    "\u0403\u0401\u0003\u0002\u0002\u0002\u0403\u0402\u0003\u0002\u0002\u0002",
    "\u0404\u0089\u0003\u0002\u0002\u0002\u0405\u040a\u0007\r\u0002\u0002",
    "\u0406\u0408\u0005\u008eH\u0002\u0407\u0409\u0007\u0016\u0002\u0002",
    "\u0408\u0407\u0003\u0002\u0002\u0002\u0408\u0409\u0003\u0002\u0002\u0002",
    "\u0409\u040b\u0003\u0002\u0002\u0002\u040a\u0406\u0003\u0002\u0002\u0002",
    "\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002\u0002\u0002",
    "\u040c\u040d\u0007\u000e\u0002\u0002\u040d\u008b\u0003\u0002\u0002\u0002",
    "\u040e\u0410\u0007\u0011\u0002\u0002\u040f\u0411\u00056\u001c\u0002",
    "\u0410\u040f\u0003\u0002\u0002\u0002\u0410\u0411\u0003\u0002\u0002\u0002",
    "\u0411\u0413\u0003\u0002\u0002\u0002\u0412\u0414\u0005\u0084C\u0002",
    "\u0413\u0412\u0003\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002",
    "\u0414\u0415\u0003\u0002\u0002\u0002\u0415\u0426\u0007\u0012\u0002\u0002",
    "\u0416\u0417\u0007\u0011\u0002\u0002\u0417\u0418\u0005~@\u0002\u0418",
    "\u0419\u0007\u0012\u0002\u0002\u0419\u0426\u0003\u0002\u0002\u0002\u041a",
    "\u041b\u0007\u0011\u0002\u0002\u041b\u041c\u0005~@\u0002\u041c\u041e",
    "\u0007\u0016\u0002\u0002\u041d\u041f\u00056\u001c\u0002\u041e\u041d",
    "\u0003\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002\u0002\u041f\u0421",
    "\u0003\u0002\u0002\u0002\u0420\u0422\u0005\u0084C\u0002\u0421\u0420",
    "\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002\u0002\u0422\u0423",
    "\u0003\u0002\u0002\u0002\u0423\u0424\u0007\u0012\u0002\u0002\u0424\u0426",
    "\u0003\u0002\u0002\u0002\u0425\u040e\u0003\u0002\u0002\u0002\u0425\u0416",
    "\u0003\u0002\u0002\u0002\u0425\u041a\u0003\u0002\u0002\u0002\u0426\u008d",
    "\u0003\u0002\u0002\u0002\u0427\u042c\u0005\u0090I\u0002\u0428\u0429",
    "\u0007\u0016\u0002\u0002\u0429\u042b\u0005\u0090I\u0002\u042a\u0428",
    "\u0003\u0002\u0002\u0002\u042b\u042e\u0003\u0002\u0002\u0002\u042c\u042a",
    "\u0003\u0002\u0002\u0002\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u008f",
    "\u0003\u0002\u0002\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042f\u0435",
    "\u0005\u0086D\u0002\u0430\u0431\u0005@!\u0002\u0431\u0432\u00071\u0002",
    "\u0002\u0432\u0433\u0005\u0082B\u0002\u0433\u0435\u0003\u0002\u0002",
    "\u0002\u0434\u042f\u0003\u0002\u0002\u0002\u0434\u0430\u0003\u0002\u0002",
    "\u0002\u0435\u0091\u0003\u0002\u0002\u0002\u0436\u0437\u0005\u0096L",
    "\u0002\u0437\u0438\u0005\u0098M\u0002\u0438\u0439\u0005\u0004\u0003",
    "\u0002\u0439\u0093\u0003\u0002\u0002\u0002\u043a\u043b\u0005\u0096L",
    "\u0002\u043b\u043c\u0005\u009aN\u0002\u043c\u043d\u0005\u0004\u0003",
    "\u0002\u043d\u0095\u0003\u0002\u0002\u0002\u043e\u043f\t\u000b\u0002",
    "\u0002\u043f\u0097\u0003\u0002\u0002\u0002\u0440\u0445\u0005\u009cO",
    "\u0002\u0441\u0442\u0007\u0016\u0002\u0002\u0442\u0444\u0005\u009cO",
    "\u0002\u0443\u0441\u0003\u0002\u0002\u0002\u0444\u0447\u0003\u0002\u0002",
    "\u0002\u0445\u0443\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002",
    "\u0002\u0446\u0099\u0003\u0002\u0002\u0002\u0447\u0445\u0003\u0002\u0002",
    "\u0002\u0448\u044d\u0005\u009eP\u0002\u0449\u044a\u0007\u0016\u0002",
    "\u0002\u044a\u044c\u0005\u009eP\u0002\u044b\u0449\u0003\u0002\u0002",
    "\u0002\u044c\u044f\u0003\u0002\u0002\u0002\u044d\u044b\u0003\u0002\u0002",
    "\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u009b\u0003\u0002\u0002",
    "\u0002\u044f\u044d\u0003\u0002\u0002\u0002\u0450\u0452\u0005\"\u0012",
    "\u0002\u0451\u0453\u0005Z.\u0002\u0452\u0451\u0003\u0002\u0002\u0002",
    "\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u0458\u0003\u0002\u0002\u0002",
    "\u0454\u0455\u0005\u0088E\u0002\u0455\u0456\u0005Z.\u0002\u0456\u0458",
    "\u0003\u0002\u0002\u0002\u0457\u0450\u0003\u0002\u0002\u0002\u0457\u0454",
    "\u0003\u0002\u0002\u0002\u0458\u009d\u0003\u0002\u0002\u0002\u0459\u045b",
    "\u0005\"\u0012\u0002\u045a\u045c\u0005\\/\u0002\u045b\u045a\u0003\u0002",
    "\u0002\u0002\u045b\u045c\u0003\u0002\u0002\u0002\u045c\u0461\u0003\u0002",
    "\u0002\u0002\u045d\u045e\u0005\u0088E\u0002\u045e\u045f\u0005\\/\u0002",
    "\u045f\u0461\u0003\u0002\u0002\u0002\u0460\u0459\u0003\u0002\u0002\u0002",
    "\u0460\u045d\u0003\u0002\u0002\u0002\u0461\u009f\u0003\u0002\u0002\u0002",
    "\u0462\u0466\u0005\u00a2R\u0002\u0463\u0466\u0005\u00e4s\u0002\u0464",
    "\u0466\u0005\u0094K\u0002\u0465\u0462\u0003\u0002\u0002\u0002\u0465",
    "\u0463\u0003\u0002\u0002\u0002\u0465\u0464\u0003\u0002\u0002\u0002\u0466",
    "\u00a1\u0003\u0002\u0002\u0002\u0467\u046a\u0005\u00dep\u0002\u0468",
    "\u046a\u0005\u00f2z\u0002\u0469\u0467\u0003\u0002\u0002\u0002\u0469",
    "\u0468\u0003\u0002\u0002\u0002\u046a\u00a3\u0003\u0002\u0002\u0002\u046b",
    "\u046e\u0005\u00e0q\u0002\u046c\u046e\u0005\u00f4{\u0002\u046d\u046b",
    "\u0003\u0002\u0002\u0002\u046d\u046c\u0003\u0002\u0002\u0002\u046e\u00a5",
    "\u0003\u0002\u0002\u0002\u046f\u0470\u0007]\u0002\u0002\u0470\u0471",
    "\u0005\b\u0005\u0002\u0471\u0472\u0005\u0004\u0003\u0002\u0472\u00a7",
    "\u0003\u0002\u0002\u0002\u0473\u0474\u0007^\u0002\u0002\u0474\u0475",
    "\u0005\u00d2j\u0002\u0475\u0476\u0005\u00aaV\u0002\u0476\u0481\u0003",
    "\u0002\u0002\u0002\u0477\u0478\u0007^\u0002\u0002\u0478\u0479\u0005",
    "\u00d2j\u0002\u0479\u047a\u0005\u00acW\u0002\u047a\u0481\u0003\u0002",
    "\u0002\u0002\u047b\u047c\u0007^\u0002\u0002\u047c\u047d\u0005\u00d2",
    "j\u0002\u047d\u047e\u0005\u00aaV\u0002\u047e\u047f\u0005\u00acW\u0002",
    "\u047f\u0481\u0003\u0002\u0002\u0002\u0480\u0473\u0003\u0002\u0002\u0002",
    "\u0480\u0477\u0003\u0002\u0002\u0002\u0480\u047b\u0003\u0002\u0002\u0002",
    "\u0481\u00a9\u0003\u0002\u0002\u0002\u0482\u0483\u0007F\u0002\u0002",
    "\u0483\u0484\u0007\u000f\u0002\u0002\u0484\u0485\u0005\u00aeX\u0002",
    "\u0485\u0486\u0007\u0010\u0002\u0002\u0486\u0487\u0005\u00d2j\u0002",
    "\u0487\u00ab\u0003\u0002\u0002\u0002\u0488\u0489\u0007Q\u0002\u0002",
    "\u0489\u048a\u0005\u00d2j\u0002\u048a\u00ad\u0003\u0002\u0002\u0002",
    "\u048b\u048e\u0005\"\u0012\u0002\u048c\u048e\u0005\u0088E\u0002\u048d",
    "\u048b\u0003\u0002\u0002\u0002\u048d\u048c\u0003\u0002\u0002\u0002\u048e",
    "\u00af\u0003\u0002\u0002\u0002\u048f\u0490\u0007c\u0002\u0002\u0490",
    "\u0491\u0007\u000f\u0002\u0002\u0491\u0492\u0005\b\u0005\u0002\u0492",
    "\u0493\u0007\u0010\u0002\u0002\u0493\u0494\u0005p9\u0002\u0494\u00b1",
    "\u0003\u0002\u0002\u0002\u0495\u0496\u0005\u00b6\\\u0002\u0496\u0497",
    "\u00071\u0002\u0002\u0497\u0498\u0005\u00b4[\u0002\u0498\u00b3\u0003",
    "\u0002\u0002\u0002\u0499\u049c\u0005p9\u0002\u049a\u049c\u0005\u00de",
    "p\u0002\u049b\u0499\u0003\u0002\u0002\u0002\u049b\u049a\u0003\u0002",
    "\u0002\u0002\u049c\u00b5\u0003\u0002\u0002\u0002\u049d\u04a1\u0005&",
    "\u0014\u0002\u049e\u04a1\u0007d\u0002\u0002\u049f\u04a1\u0007C\u0002",
    "\u0002\u04a0\u049d\u0003\u0002\u0002\u0002\u04a0\u049e\u0003\u0002\u0002",
    "\u0002\u04a0\u049f\u0003\u0002\u0002\u0002\u04a1\u00b7\u0003\u0002\u0002",
    "\u0002\u04a2\u04a3\u0007[\u0002\u0002\u04a3\u04a4\u0007\u000f\u0002",
    "\u0002\u04a4\u04a5\u0005\b\u0005\u0002\u04a5\u04a6\u0007\u0010\u0002",
    "\u0002\u04a6\u04a7\u0005\u00ba^\u0002\u04a7\u00b9\u0003\u0002\u0002",
    "\u0002\u04a8\u04aa\u0007\r\u0002\u0002\u04a9\u04ab\u0005\u00bc_\u0002",
    "\u04aa\u04a9\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003\u0002\u0002\u0002",
    "\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04b8\u0007\u000e\u0002\u0002",
    "\u04ad\u04af\u0007\r\u0002\u0002\u04ae\u04b0\u0005\u00bc_\u0002\u04af",
    "\u04ae\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0",
    "\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b3\u0005\u00c0a\u0002\u04b2",
    "\u04b4\u0005\u00bc_\u0002\u04b3\u04b2\u0003\u0002\u0002\u0002\u04b3",
    "\u04b4\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5",
    "\u04b6\u0007\u000e\u0002\u0002\u04b6\u04b8\u0003\u0002\u0002\u0002\u04b7",
    "\u04a8\u0003\u0002\u0002\u0002\u04b7\u04ad\u0003\u0002\u0002\u0002\u04b8",
    "\u00bb\u0003\u0002\u0002\u0002\u04b9\u04bb\u0005\u00be`\u0002\u04ba",
    "\u04b9\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc",
    "\u04ba\u0003\u0002\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd",
    "\u00bd\u0003\u0002\u0002\u0002\u04be\u04bf\u0007E\u0002\u0002\u04bf",
    "\u04c0\u0005\b\u0005\u0002\u04c0\u04c2\u00071\u0002\u0002\u04c1\u04c3",
    "\u0005r:\u0002\u04c2\u04c1\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003",
    "\u0002\u0002\u0002\u04c3\u00bf\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007",
    "K\u0002\u0002\u04c5\u04c7\u00071\u0002\u0002\u04c6\u04c8\u0005r:\u0002",
    "\u04c7\u04c6\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002",
    "\u04c8\u00c1\u0003\u0002\u0002\u0002\u04c9\u04ca\u0007M\u0002\u0002",
    "\u04ca\u04cb\u0005p9\u0002\u04cb\u04cc\u0007b\u0002\u0002\u04cc\u04cd",
    "\u0007\u000f\u0002\u0002\u04cd\u04ce\u0005\b\u0005\u0002\u04ce\u04cf",
    "\u0007\u0010\u0002\u0002\u04cf\u04d0\bb\u0001\u0002\u04d0\u04d1\u0005",
    "\u0004\u0003\u0002\u04d1\u04d2\bb\u0001\u0002\u04d2\u053f\u0003\u0002",
    "\u0002\u0002\u04d3\u04d4\u0007b\u0002\u0002\u04d4\u04d5\u0007\u000f",
    "\u0002\u0002\u04d5\u04d6\u0005\b\u0005\u0002\u04d6\u04d7\u0007\u0010",
    "\u0002\u0002\u04d7\u04d8\u0005p9\u0002\u04d8\u053f\u0003\u0002\u0002",
    "\u0002\u04d9\u04da\u0007R\u0002\u0002\u04da\u04dc\u0007\u000f\u0002",
    "\u0002\u04db\u04dd\u0005\u0006\u0004\u0002\u04dc\u04db\u0003\u0002\u0002",
    "\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002",
    "\u0002\u04de\u04e0\u0007\u0015\u0002\u0002\u04df\u04e1\u0005\b\u0005",
    "\u0002\u04e0\u04df\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002",
    "\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2\u04e4\u0007\u0015\u0002",
    "\u0002\u04e3\u04e5\u0005\b\u0005\u0002\u04e4\u04e3\u0003\u0002\u0002",
    "\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002",
    "\u0002\u04e6\u04e7\u0007\u0010\u0002\u0002\u04e7\u053f\u0005p9\u0002",
    "\u04e8\u04e9\u0007R\u0002\u0002\u04e9\u04ea\u0007\u000f\u0002\u0002",
    "\u04ea\u04eb\u0007`\u0002\u0002\u04eb\u04ec\u0005\u00d6l\u0002\u04ec",
    "\u04ee\u0007\u0015\u0002\u0002\u04ed\u04ef\u0005\b\u0005\u0002\u04ee",
    "\u04ed\u0003\u0002\u0002\u0002\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef",
    "\u04f0\u0003\u0002\u0002\u0002\u04f0\u04f2\u0007\u0015\u0002\u0002\u04f1",
    "\u04f3\u0005\b\u0005\u0002\u04f2\u04f1\u0003\u0002\u0002\u0002\u04f2",
    "\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002\u0002\u0002\u04f4",
    "\u04f5\u0007\u0010\u0002\u0002\u04f5\u04f6\u0005p9\u0002\u04f6\u053f",
    "\u0003\u0002\u0002\u0002\u04f7\u04f8\u0007R\u0002\u0002\u04f8\u04f9",
    "\u0007\u000f\u0002\u0002\u04f9\u04fb\u0005\u0092J\u0002\u04fa\u04fc",
    "\u0005\b\u0005\u0002\u04fb\u04fa\u0003\u0002\u0002\u0002\u04fb\u04fc",
    "\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd\u04ff",
    "\u0007\u0015\u0002\u0002\u04fe\u0500\u0005\b\u0005\u0002\u04ff\u04fe",
    "\u0003\u0002\u0002\u0002\u04ff\u0500\u0003\u0002\u0002\u0002\u0500\u0501",
    "\u0003\u0002\u0002\u0002\u0501\u0502\u0007\u0010\u0002\u0002\u0502\u0503",
    "\u0005p9\u0002\u0503\u053f\u0003\u0002\u0002\u0002\u0504\u0505\u0007",
    "R\u0002\u0002\u0505\u0506\u0007\u000f\u0002\u0002\u0506\u0507\u0005",
    "\n\u0006\u0002\u0507\u0508\u0007V\u0002\u0002\u0508\u0509\u0005\b\u0005",
    "\u0002\u0509\u050a\u0007\u0010\u0002\u0002\u050a\u050b\u0005p9\u0002",
    "\u050b\u053f\u0003\u0002\u0002\u0002\u050c\u050d\u0007R\u0002\u0002",
    "\u050d\u050e\u0007\u000f\u0002\u0002\u050e\u050f\u0005N(\u0002\u050f",
    "\u0510\u0007V\u0002\u0002\u0510\u0511\u0005\b\u0005\u0002\u0511\u0512",
    "\u0007\u0010\u0002\u0002\u0512\u0513\u0005p9\u0002\u0513\u053f\u0003",
    "\u0002\u0002\u0002\u0514\u0515\u0007R\u0002\u0002\u0515\u0516\u0007",
    "\u000f\u0002\u0002\u0516\u0517\u0007`\u0002\u0002\u0517\u0518\u0005",
    "\u00c6d\u0002\u0518\u0519\u0007V\u0002\u0002\u0519\u051a\u0005\b\u0005",
    "\u0002\u051a\u051b\u0007\u0010\u0002\u0002\u051b\u051c\u0005p9\u0002",
    "\u051c\u053f\u0003\u0002\u0002\u0002\u051d\u051e\u0007R\u0002\u0002",
    "\u051e\u051f\u0007\u000f\u0002\u0002\u051f\u0520\u0005\u00c4c\u0002",
    "\u0520\u0521\u0007V\u0002\u0002\u0521\u0522\u0005\b\u0005\u0002\u0522",
    "\u0523\u0007\u0010\u0002\u0002\u0523\u0524\u0005p9\u0002\u0524\u053f",
    "\u0003\u0002\u0002\u0002\u0525\u0526\u0007R\u0002\u0002\u0526\u0527",
    "\u0007\u000f\u0002\u0002\u0527\u0528\u0005N(\u0002\u0528\u0529\u0007",
    "n\u0002\u0002\u0529\u052a\u0005`1\u0002\u052a\u052b\u0007\u0010\u0002",
    "\u0002\u052b\u052c\u0005p9\u0002\u052c\u053f\u0003\u0002\u0002\u0002",
    "\u052d\u052e\u0007R\u0002\u0002\u052e\u052f\u0007\u000f\u0002\u0002",
    "\u052f\u0530\u0007`\u0002\u0002\u0530\u0531\u0005\u00c6d\u0002\u0531",
    "\u0532\u0007n\u0002\u0002\u0532\u0533\u0005`1\u0002\u0533\u0534\u0007",
    "\u0010\u0002\u0002\u0534\u0535\u0005p9\u0002\u0535\u053f\u0003\u0002",
    "\u0002\u0002\u0536\u0537\u0007R\u0002\u0002\u0537\u0538\u0007\u000f",
    "\u0002\u0002\u0538\u0539\u0005\u00c4c\u0002\u0539\u053a\u0007n\u0002",
    "\u0002\u053a\u053b\u0005`1\u0002\u053b\u053c\u0007\u0010\u0002\u0002",
    "\u053c\u053d\u0005p9\u0002\u053d\u053f\u0003\u0002\u0002\u0002\u053e",
    "\u04c9\u0003\u0002\u0002\u0002\u053e\u04d3\u0003\u0002\u0002\u0002\u053e",
    "\u04d9\u0003\u0002\u0002\u0002\u053e\u04e8\u0003\u0002\u0002\u0002\u053e",
    "\u04f7\u0003\u0002\u0002\u0002\u053e\u0504\u0003\u0002\u0002\u0002\u053e",
    "\u050c\u0003\u0002\u0002\u0002\u053e\u0514\u0003\u0002\u0002\u0002\u053e",
    "\u051d\u0003\u0002\u0002\u0002\u053e\u0525\u0003\u0002\u0002\u0002\u053e",
    "\u052d\u0003\u0002\u0002\u0002\u053e\u0536\u0003\u0002\u0002\u0002\u053f",
    "\u00c3\u0003\u0002\u0002\u0002\u0540\u0541\u0005\u0096L\u0002\u0541",
    "\u0542\u0005\u00c6d\u0002\u0542\u00c5\u0003\u0002\u0002\u0002\u0543",
    "\u0546\u0005\"\u0012\u0002\u0544\u0546\u0005\u0088E\u0002\u0545\u0543",
    "\u0003\u0002\u0002\u0002\u0545\u0544\u0003\u0002\u0002\u0002\u0546\u00c7",
    "\u0003\u0002\u0002\u0002\u0547\u0548\u0007T\u0002\u0002\u0548\u0549",
    "\u0007\u000f\u0002\u0002\u0549\u054a\u0005\b\u0005\u0002\u054a\u054b",
    "\u0007\u0010\u0002\u0002\u054b\u054e\u0005p9\u0002\u054c\u054d\u0007",
    "N\u0002\u0002\u054d\u054f\u0005p9\u0002\u054e\u054c\u0003\u0002\u0002",
    "\u0002\u054e\u054f\u0003\u0002\u0002\u0002\u054f\u00c9\u0003\u0002\u0002",
    "\u0002\u0550\u0553\u0005\u00c2b\u0002\u0551\u0553\u0005\u00b8]\u0002",
    "\u0552\u0550\u0003\u0002\u0002\u0002\u0552\u0551\u0003\u0002\u0002\u0002",
    "\u0553\u00cb\u0003\u0002\u0002\u0002\u0554\u0555\u0007I\u0002\u0002",
    "\u0555\u0556\u0005\u00b6\\\u0002\u0556\u0557\u0005\u0004\u0003\u0002",
    "\u0557\u055b\u0003\u0002\u0002\u0002\u0558\u0559\u0007I\u0002\u0002",
    "\u0559\u055b\u0005\u0004\u0003\u0002\u055a\u0554\u0003\u0002\u0002\u0002",
    "\u055a\u0558\u0003\u0002\u0002\u0002\u055b\u00cd\u0003\u0002\u0002\u0002",
    "\u055c\u055d\u0007D\u0002\u0002\u055d\u055e\u0005\u00b6\\\u0002\u055e",
    "\u055f\u0005\u0004\u0003\u0002\u055f\u0563\u0003\u0002\u0002\u0002\u0560",
    "\u0561\u0007D\u0002\u0002\u0561\u0563\u0005\u0004\u0003\u0002\u0562",
    "\u055c\u0003\u0002\u0002\u0002\u0562\u0560\u0003\u0002\u0002\u0002\u0563",
    "\u00cf\u0003\u0002\u0002\u0002\u0564\u0565\u0005\u00d2j\u0002\u0565",
    "\u00d1\u0003\u0002\u0002\u0002\u0566\u0568\u0007\r\u0002\u0002\u0567",
    "\u0569\u0005r:\u0002\u0568\u0567\u0003\u0002\u0002\u0002\u0568\u0569",
    "\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a\u056b",
    "\u0007\u000e\u0002\u0002\u056b\u00d3\u0003\u0002\u0002\u0002\u056c\u056d",
    "\u0007`\u0002\u0002\u056d\u056e\u0005\u00d8m\u0002\u056e\u056f\u0005",
    "\u0004\u0003\u0002\u056f\u00d5\u0003\u0002\u0002\u0002\u0570\u0575\u0005",
    "\u00dan\u0002\u0571\u0572\u0007\u0016\u0002\u0002\u0572\u0574\u0005",
    "\u00dan\u0002\u0573\u0571\u0003\u0002\u0002\u0002\u0574\u0577\u0003",
    "\u0002\u0002\u0002\u0575\u0573\u0003\u0002\u0002\u0002\u0575\u0576\u0003",
    "\u0002\u0002\u0002\u0576\u00d7\u0003\u0002\u0002\u0002\u0577\u0575\u0003",
    "\u0002\u0002\u0002\u0578\u057d\u0005\u00dco\u0002\u0579\u057a\u0007",
    "\u0016\u0002\u0002\u057a\u057c\u0005\u00dco\u0002\u057b\u0579\u0003",
    "\u0002\u0002\u0002\u057c\u057f\u0003\u0002\u0002\u0002\u057d\u057b\u0003",
    "\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002\u057e\u00d9\u0003",
    "\u0002\u0002\u0002\u057f\u057d\u0003\u0002\u0002\u0002\u0580\u0582\u0005",
    "\"\u0012\u0002\u0581\u0583\u0005Z.\u0002\u0582\u0581\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0588\u0003\u0002\u0002",
    "\u0002\u0584\u0585\u0005\u0088E\u0002\u0585\u0586\u0005Z.\u0002\u0586",
    "\u0588\u0003\u0002\u0002\u0002\u0587\u0580\u0003\u0002\u0002\u0002\u0587",
    "\u0584\u0003\u0002\u0002\u0002\u0588\u00db\u0003\u0002\u0002\u0002\u0589",
    "\u058b\u0005\"\u0012\u0002\u058a\u058c\u0005\\/\u0002\u058b\u058a\u0003",
    "\u0002\u0002\u0002\u058b\u058c\u0003\u0002\u0002\u0002\u058c\u0591\u0003",
    "\u0002\u0002\u0002\u058d\u058e\u0005\u0088E\u0002\u058e\u058f\u0005",
    "\\/\u0002\u058f\u0591\u0003\u0002\u0002\u0002\u0590\u0589\u0003\u0002",
    "\u0002\u0002\u0590\u058d\u0003\u0002\u0002\u0002\u0591\u00dd\u0003\u0002",
    "\u0002\u0002\u0592\u0593\u0007S\u0002\u0002\u0593\u0594\u0005\"\u0012",
    "\u0002\u0594\u0595\u0007\u000f\u0002\u0002\u0595\u0596\u0005\u00fa~",
    "\u0002\u0596\u0597\u0007\u0010\u0002\u0002\u0597\u0598\u0007\r\u0002",
    "\u0002\u0598\u0599\u0005\u0104\u0083\u0002\u0599\u059a\u0007\u000e\u0002",
    "\u0002\u059a\u00df\u0003\u0002\u0002\u0002\u059b\u059d\u0007S\u0002",
    "\u0002\u059c\u059e\u0005\"\u0012\u0002\u059d\u059c\u0003\u0002\u0002",
    "\u0002\u059d\u059e\u0003\u0002\u0002\u0002\u059e\u059f\u0003\u0002\u0002",
    "\u0002\u059f\u05a0\u0007\u000f\u0002\u0002\u05a0\u05a1\u0005\u00fa~",
    "\u0002\u05a1\u05a2\u0007\u0010\u0002\u0002\u05a2\u05a3\u0007\r\u0002",
    "\u0002\u05a3\u05a4\u0005\u0104\u0083\u0002\u05a4\u05a5\u0007\u000e\u0002",
    "\u0002\u05a5\u00e1\u0003\u0002\u0002\u0002\u05a6\u05a8\u0007S\u0002",
    "\u0002\u05a7\u05a9\u0005\"\u0012\u0002\u05a8\u05a7\u0003\u0002\u0002",
    "\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002",
    "\u0002\u05aa\u05ab\u0007\u000f\u0002\u0002\u05ab\u05ac\u0005\u00fa~",
    "\u0002\u05ac\u05ad\u0007\u0010\u0002\u0002\u05ad\u05ae\u0007\r\u0002",
    "\u0002\u05ae\u05af\u0005\u0104\u0083\u0002\u05af\u05b0\u0007\u000e\u0002",
    "\u0002\u05b0\u00e3\u0003\u0002\u0002\u0002\u05b1\u05b2\u0007G\u0002",
    "\u0002\u05b2\u05b3\u0005\"\u0012\u0002\u05b3\u05b4\u0005\u00e8u\u0002",
    "\u05b4\u00e5\u0003\u0002\u0002\u0002\u05b5\u05b7\u0007G\u0002\u0002",
    "\u05b6\u05b8\u0005\"\u0012\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002",
    "\u05b7\u05b8\u0003\u0002\u0002\u0002\u05b8\u05b9\u0003\u0002\u0002\u0002",
    "\u05b9\u05ba\u0005\u00e8u\u0002\u05ba\u00e7\u0003\u0002\u0002\u0002",
    "\u05bb\u05bd\u0005\u00eav\u0002\u05bc\u05bb\u0003\u0002\u0002\u0002",
    "\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002",
    "\u05be\u05c0\u0007\r\u0002\u0002\u05bf\u05c1\u0005\u00ecw\u0002\u05c0",
    "\u05bf\u0003\u0002\u0002\u0002\u05c0\u05c1\u0003\u0002\u0002\u0002\u05c1",
    "\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c3\u0007\u000e\u0002\u0002\u05c3",
    "\u00e9\u0003\u0002\u0002\u0002\u05c4\u05c5\u0007P\u0002\u0002\u05c5",
    "\u05c6\u0005N(\u0002\u05c6\u00eb\u0003\u0002\u0002\u0002\u05c7\u05c8",
    "\u0005\u00eex\u0002\u05c8\u00ed\u0003\u0002\u0002\u0002\u05c9\u05cb",
    "\u0005\u00f0y\u0002\u05ca\u05c9\u0003\u0002\u0002\u0002\u05cb\u05cc",
    "\u0003\u0002\u0002\u0002\u05cc\u05ca\u0003\u0002\u0002\u0002\u05cc\u05cd",
    "\u0003\u0002\u0002\u0002\u05cd\u00ef\u0003\u0002\u0002\u0002\u05ce\u05cf",
    "\u0007p\u0002\u0002\u05cf\u05d3\u0005\u010c\u0087\u0002\u05d0\u05d3",
    "\u0005\u010c\u0087\u0002\u05d1\u05d3\u0007\u0015\u0002\u0002\u05d2\u05ce",
    "\u0003\u0002\u0002\u0002\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d1",
    "\u0003\u0002\u0002\u0002\u05d3\u00f1\u0003\u0002\u0002\u0002\u05d4\u05d5",
    "\u0007S\u0002\u0002\u05d5\u05d6\u0007!\u0002\u0002\u05d6\u05d7\u0005",
    "\"\u0012\u0002\u05d7\u05d8\u0007\u000f\u0002\u0002\u05d8\u05d9\u0005",
    "\u00fa~\u0002\u05d9\u05da\u0007\u0010\u0002\u0002\u05da\u05db\u0007",
    "\r\u0002\u0002\u05db\u05dc\u0005\u0106\u0084\u0002\u05dc\u05dd\u0007",
    "\u000e\u0002\u0002\u05dd\u00f3\u0003\u0002\u0002\u0002\u05de\u05df\u0007",
    "S\u0002\u0002\u05df\u05e1\u0007!\u0002\u0002\u05e0\u05e2\u0005\"\u0012",
    "\u0002\u05e1\u05e0\u0003\u0002\u0002\u0002\u05e1\u05e2\u0003\u0002\u0002",
    "\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0007\u000f\u0002",
    "\u0002\u05e4\u05e5\u0005\u00fa~\u0002\u05e5\u05e6\u0007\u0010\u0002",
    "\u0002\u05e6\u05e7\u0007\r\u0002\u0002\u05e7\u05e8\u0005\u0106\u0084",
    "\u0002\u05e8\u05e9\u0007\u000e\u0002\u0002\u05e9\u00f5\u0003\u0002\u0002",
    "\u0002\u05ea\u05eb\u0007S\u0002\u0002\u05eb\u05ed\u0007!\u0002\u0002",
    "\u05ec\u05ee\u0005\"\u0012\u0002\u05ed\u05ec\u0003\u0002\u0002\u0002",
    "\u05ed\u05ee\u0003\u0002\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002",
    "\u05ef\u05f0\u0007\u000f\u0002\u0002\u05f0\u05f1\u0005\u00fa~\u0002",
    "\u05f1\u05f2\u0007\u0010\u0002\u0002\u05f2\u05f3\u0007\r\u0002\u0002",
    "\u05f3\u05f4\u0005\u0106\u0084\u0002\u05f4\u05f5\u0007\u000e\u0002\u0002",
    "\u05f5\u00f7\u0003\u0002\u0002\u0002\u05f6\u05f7\u0005\u00fa~\u0002",
    "\u05f7\u00f9\u0003\u0002\u0002\u0002\u05f8\u0603\u0003\u0002\u0002\u0002",
    "\u05f9\u0603\u0005\u00fe\u0080\u0002\u05fa\u05fc\u0005\u00fc\u007f\u0002",
    "\u05fb\u05fd\u0007\u0016\u0002\u0002\u05fc\u05fb\u0003\u0002\u0002\u0002",
    "\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u0603\u0003\u0002\u0002\u0002",
    "\u05fe\u05ff\u0005\u00fc\u007f\u0002\u05ff\u0600\u0007\u0016\u0002\u0002",
    "\u0600\u0601\u0005\u00fe\u0080\u0002\u0601\u0603\u0003\u0002\u0002\u0002",
    "\u0602\u05f8\u0003\u0002\u0002\u0002\u0602\u05f9\u0003\u0002\u0002\u0002",
    "\u0602\u05fa\u0003\u0002\u0002\u0002\u0602\u05fe\u0003\u0002\u0002\u0002",
    "\u0603\u00fb\u0003\u0002\u0002\u0002\u0604\u0609\u0005\u0100\u0081\u0002",
    "\u0605\u0606\u0007\u0016\u0002\u0002\u0606\u0608\u0005\u0100\u0081\u0002",
    "\u0607\u0605\u0003\u0002\u0002\u0002\u0608\u060b\u0003\u0002\u0002\u0002",
    "\u0609\u0607\u0003\u0002\u0002\u0002\u0609\u060a\u0003\u0002\u0002\u0002",
    "\u060a\u00fd\u0003\u0002\u0002\u0002\u060b\u0609\u0003\u0002\u0002\u0002",
    "\u060c\u060d\u0005\u0084C\u0002\u060d\u00ff\u0003\u0002\u0002\u0002",
    "\u060e\u060f\u0005\u0082B\u0002\u060f\u0101\u0003\u0002\u0002\u0002",
    "\u0610\u0613\u0005\"\u0012\u0002\u0611\u0613\u0005,\u0017\u0002\u0612",
    "\u0610\u0003\u0002\u0002\u0002\u0612\u0611\u0003\u0002\u0002\u0002\u0613",
    "\u0103\u0003\u0002\u0002\u0002\u0614\u0616\b\u0083\u0001\u0002\u0615",
    "\u0617\u0005r:\u0002\u0616\u0615\u0003\u0002\u0002\u0002\u0616\u0617",
    "\u0003\u0002\u0002\u0002\u0617\u0618\u0003\u0002\u0002\u0002\u0618\u0619",
    "\b\u0083\u0001\u0002\u0619\u0105\u0003\u0002\u0002\u0002\u061a\u061b",
    "\b\u0084\u0001\u0002\u061b\u061c\u0005\u0104\u0083\u0002\u061c\u061d",
    "\b\u0084\u0001\u0002\u061d\u0107\u0003\u0002\u0002\u0002\u061e\u061f",
    "\u0007\r\u0002\u0002\u061f\u0620\u0005\u0104\u0083\u0002\u0620\u0621",
    "\u0007\u000e\u0002\u0002\u0621\u0624\u0003\u0002\u0002\u0002\u0622\u0624",
    "\u0005^0\u0002\u0623\u061e\u0003\u0002\u0002\u0002\u0623\u0622\u0003",
    "\u0002\u0002\u0002\u0624\u0109\u0003\u0002\u0002\u0002\u0625\u0626\u0007",
    "\r\u0002\u0002\u0626\u0627\u0005\u0104\u0083\u0002\u0627\u0628\u0007",
    "\u000e\u0002\u0002\u0628\u062b\u0003\u0002\u0002\u0002\u0629\u062b\u0005",
    "`1\u0002\u062a\u0625\u0003\u0002\u0002\u0002\u062a\u0629\u0003\u0002",
    "\u0002\u0002\u062b\u010b\u0003\u0002\u0002\u0002\u062c\u062d\u0007l",
    "\u0002\u0002\u062d\u062e\u0005@!\u0002\u062e\u062f\u0007\u000f\u0002",
    "\u0002\u062f\u0630\u0007\u0010\u0002\u0002\u0630\u0631\u0007\r\u0002",
    "\u0002\u0631\u0632\u0005\u0104\u0083\u0002\u0632\u0633\u0007\u000e\u0002",
    "\u0002\u0633\u0647\u0003\u0002\u0002\u0002\u0634\u0635\u0007o\u0002",
    "\u0002\u0635\u0636\u0005@!\u0002\u0636\u0637\u0007\u000f\u0002\u0002",
    "\u0637\u0638\u0005\u010e\u0088\u0002\u0638\u0639\u0007\u0010\u0002\u0002",
    "\u0639\u063a\u0007\r\u0002\u0002\u063a\u063b\u0005\u0104\u0083\u0002",
    "\u063b\u063c\u0007\u000e\u0002\u0002\u063c\u0647\u0003\u0002\u0002\u0002",
    "\u063d\u063e\u0005@!\u0002\u063e\u063f\u0007\u000f\u0002\u0002\u063f",
    "\u0640\u0005\u00f8}\u0002\u0640\u0641\u0007\u0010\u0002\u0002\u0641",
    "\u0642\u0007\r\u0002\u0002\u0642\u0643\u0005\u0104\u0083\u0002\u0643",
    "\u0644\u0007\u000e\u0002\u0002\u0644\u0647\u0003\u0002\u0002\u0002\u0645",
    "\u0647\u0005\u0110\u0089\u0002\u0646\u062c\u0003\u0002\u0002\u0002\u0646",
    "\u0634\u0003\u0002\u0002\u0002\u0646\u063d\u0003\u0002\u0002\u0002\u0646",
    "\u0645\u0003\u0002\u0002\u0002\u0647\u010d\u0003\u0002\u0002\u0002\u0648",
    "\u0649\u0005\u0100\u0081\u0002\u0649\u010f\u0003\u0002\u0002\u0002\u064a",
    "\u064b\u0007!\u0002\u0002\u064b\u064c\u0005@!\u0002\u064c\u064d\u0007",
    "\u000f\u0002\u0002\u064d\u064e\u0005\u00f8}\u0002\u064e\u064f\u0007",
    "\u0010\u0002\u0002\u064f\u0650\u0007\r\u0002\u0002\u0650\u0651\u0005",
    "\u0106\u0084\u0002\u0651\u0652\u0007\u000e\u0002\u0002\u0652\u0111\u0003",
    "\u0002\u0002\u0002\u0653\u0655\u0005\u0114\u008b\u0002\u0654\u0653\u0003",
    "\u0002\u0002\u0002\u0654\u0655\u0003\u0002\u0002\u0002\u0655\u0656\u0003",
    "\u0002\u0002\u0002\u0656\u0657\u0007\u0002\u0002\u0003\u0657\u0113\u0003",
    "\u0002\u0002\u0002\u0658\u0659\u0005r:\u0002\u0659\u0115\u0003\u0002",
    "\u0002\u0002\u065a\u065c\u0005\u0118\u008d\u0002\u065b\u065a\u0003\u0002",
    "\u0002\u0002\u065b\u065c\u0003\u0002\u0002\u0002\u065c\u065d\u0003\u0002",
    "\u0002\u0002\u065d\u065e\u0007\u0002\u0002\u0003\u065e\u0117\u0003\u0002",
    "\u0002\u0002\u065f\u0660\u0005\u011a\u008e\u0002\u0660\u0119\u0003\u0002",
    "\u0002\u0002\u0661\u0663\u0005\u011c\u008f\u0002\u0662\u0661\u0003\u0002",
    "\u0002\u0002\u0663\u0664\u0003\u0002\u0002\u0002\u0664\u0662\u0003\u0002",
    "\u0002\u0002\u0664\u0665\u0003\u0002\u0002\u0002\u0665\u011b\u0003\u0002",
    "\u0002\u0002\u0666\u066a\u0005\u011e\u0090\u0002\u0667\u066a\u0005\u0132",
    "\u009a\u0002\u0668\u066a\u0005t;\u0002\u0669\u0666\u0003\u0002\u0002",
    "\u0002\u0669\u0667\u0003\u0002\u0002\u0002\u0669\u0668\u0003\u0002\u0002",
    "\u0002\u066a\u011d\u0003\u0002\u0002\u0002\u066b\u066c\u0007U\u0002",
    "\u0002\u066c\u066d\u0005\u0120\u0091\u0002\u066d\u066e\u0005\u0128\u0095",
    "\u0002\u066e\u066f\u0005\u0004\u0003\u0002\u066f\u0675\u0003\u0002\u0002",
    "\u0002\u0670\u0671\u0007U\u0002\u0002\u0671\u0672\u0005\u012e\u0098",
    "\u0002\u0672\u0673\u0005\u0004\u0003\u0002\u0673\u0675\u0003\u0002\u0002",
    "\u0002\u0674\u066b\u0003\u0002\u0002\u0002\u0674\u0670\u0003\u0002\u0002",
    "\u0002\u0675\u011f\u0003\u0002\u0002\u0002\u0676\u0682\u0005\u0122\u0092",
    "\u0002\u0677\u0682\u0005\u0124\u0093\u0002\u0678\u0682\u0005\u0126\u0094",
    "\u0002\u0679\u067a\u0005\u0122\u0092\u0002\u067a\u067b\u0007\u0016\u0002",
    "\u0002\u067b\u067c\u0005\u0124\u0093\u0002\u067c\u0682\u0003\u0002\u0002",
    "\u0002\u067d\u067e\u0005\u0122\u0092\u0002\u067e\u067f\u0007\u0016\u0002",
    "\u0002\u067f\u0680\u0005\u0126\u0094\u0002\u0680\u0682\u0003\u0002\u0002",
    "\u0002\u0681\u0676\u0003\u0002\u0002\u0002\u0681\u0677\u0003\u0002\u0002",
    "\u0002\u0681\u0678\u0003\u0002\u0002\u0002\u0681\u0679\u0003\u0002\u0002",
    "\u0002\u0681\u067d\u0003\u0002\u0002\u0002\u0682\u0121\u0003\u0002\u0002",
    "\u0002\u0683\u0684\u0005\u0130\u0099\u0002\u0684\u0123\u0003\u0002\u0002",
    "\u0002\u0685\u0686\u0007!\u0002\u0002\u0686\u0687\u0007i\u0002\u0002",
    "\u0687\u0688\u0005\u0130\u0099\u0002\u0688\u0125\u0003\u0002\u0002\u0002",
    "\u0689\u068a\u0007\r\u0002\u0002\u068a\u0693\u0007\u000e\u0002\u0002",
    "\u068b\u068c\u0007\r\u0002\u0002\u068c\u068e\u0005\u012a\u0096\u0002",
    "\u068d\u068f\u0007\u0016\u0002\u0002\u068e\u068d\u0003\u0002\u0002\u0002",
    "\u068e\u068f\u0003\u0002\u0002\u0002\u068f\u0690\u0003\u0002\u0002\u0002",
    "\u0690\u0691\u0007\u000e\u0002\u0002\u0691\u0693\u0003\u0002\u0002\u0002",
    "\u0692\u0689\u0003\u0002\u0002\u0002\u0692\u068b\u0003\u0002\u0002\u0002",
    "\u0693\u0127\u0003\u0002\u0002\u0002\u0694\u0695\u0007k\u0002\u0002",
    "\u0695\u0696\u0005\u012e\u0098\u0002\u0696\u0129\u0003\u0002\u0002\u0002",
    "\u0697\u069c\u0005\u012c\u0097\u0002\u0698\u0699\u0007\u0016\u0002\u0002",
    "\u0699\u069b\u0005\u012c\u0097\u0002\u069a\u0698\u0003\u0002\u0002\u0002",
    "\u069b\u069e\u0003\u0002\u0002\u0002\u069c\u069a\u0003\u0002\u0002\u0002",
    "\u069c\u069d\u0003\u0002\u0002\u0002\u069d\u012b\u0003\u0002\u0002\u0002",
    "\u069e\u069c\u0003\u0002\u0002\u0002\u069f\u06a5\u0005\u0130\u0099\u0002",
    "\u06a0\u06a1\u0005\u0140\u00a1\u0002\u06a1\u06a2\u0007i\u0002\u0002",
    "\u06a2\u06a3\u0005\u0130\u0099\u0002\u06a3\u06a5\u0003\u0002\u0002\u0002",
    "\u06a4\u069f\u0003\u0002\u0002\u0002\u06a4\u06a0\u0003\u0002\u0002\u0002",
    "\u06a5\u012d\u0003\u0002\u0002\u0002\u06a6\u06a7\u0007r\u0002\u0002",
    "\u06a7\u012f\u0003\u0002\u0002\u0002\u06a8\u06a9\u0005\"\u0012\u0002",
    "\u06a9\u0131\u0003\u0002\u0002\u0002\u06aa\u06ab\u0007O\u0002\u0002",
    "\u06ab\u06ac\u0007!\u0002\u0002\u06ac\u06ad\u0005\u0128\u0095\u0002",
    "\u06ad\u06ae\u0005\u0004\u0003\u0002\u06ae\u06c8\u0003\u0002\u0002\u0002",
    "\u06af\u06b0\u0007O\u0002\u0002\u06b0\u06b1\u0005\u0134\u009b\u0002",
    "\u06b1\u06b2\u0005\u0128\u0095\u0002\u06b2\u06b3\u0005\u0004\u0003\u0002",
    "\u06b3\u06c8\u0003\u0002\u0002\u0002\u06b4\u06b5\u0007O\u0002\u0002",
    "\u06b5\u06b6\u0005\u0134\u009b\u0002\u06b6\u06b7\u0005\u0004\u0003\u0002",
    "\u06b7\u06c8\u0003\u0002\u0002\u0002\u06b8\u06b9\u0007O\u0002\u0002",
    "\u06b9\u06c8\u0005\u00d4k\u0002\u06ba\u06bb\u0007O\u0002\u0002\u06bb",
    "\u06c8\u0005\u00a0Q\u0002\u06bc\u06bd\u0007O\u0002\u0002\u06bd\u06be",
    "\u0007K\u0002\u0002\u06be\u06c8\u0005\u00a4S\u0002\u06bf\u06c0\u0007",
    "O\u0002\u0002\u06c0\u06c1\u0007K\u0002\u0002\u06c1\u06c8\u0005\u00e4",
    "s\u0002\u06c2\u06c3\u0007O\u0002\u0002\u06c3\u06c4\u0007K\u0002\u0002",
    "\u06c4\u06c5\u0005`1\u0002\u06c5\u06c6\u0005\u0004\u0003\u0002\u06c6",
    "\u06c8\u0003\u0002\u0002\u0002\u06c7\u06aa\u0003\u0002\u0002\u0002\u06c7",
    "\u06af\u0003\u0002\u0002\u0002\u06c7\u06b4\u0003\u0002\u0002\u0002\u06c7",
    "\u06b8\u0003\u0002\u0002\u0002\u06c7\u06ba\u0003\u0002\u0002\u0002\u06c7",
    "\u06bc\u0003\u0002\u0002\u0002\u06c7\u06bf\u0003\u0002\u0002\u0002\u06c7",
    "\u06c2\u0003\u0002\u0002\u0002\u06c8\u0133\u0003\u0002\u0002\u0002\u06c9",
    "\u06ca\u0007\r\u0002\u0002\u06ca\u06d3\u0007\u000e\u0002\u0002\u06cb",
    "\u06cc\u0007\r\u0002\u0002\u06cc\u06ce\u0005\u0136\u009c\u0002\u06cd",
    "\u06cf\u0007\u0016\u0002\u0002\u06ce\u06cd\u0003\u0002\u0002\u0002\u06ce",
    "\u06cf\u0003\u0002\u0002\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0",
    "\u06d1\u0007\u000e\u0002\u0002\u06d1\u06d3\u0003\u0002\u0002\u0002\u06d2",
    "\u06c9\u0003\u0002\u0002\u0002\u06d2\u06cb\u0003\u0002\u0002\u0002\u06d3",
    "\u0135\u0003\u0002\u0002\u0002\u06d4\u06d9\u0005\u0138\u009d\u0002\u06d5",
    "\u06d6\u0007\u0016\u0002\u0002\u06d6\u06d8\u0005\u0138\u009d\u0002\u06d7",
    "\u06d5\u0003\u0002\u0002\u0002\u06d8\u06db\u0003\u0002\u0002\u0002\u06d9",
    "\u06d7\u0003\u0002\u0002\u0002\u06d9\u06da\u0003\u0002\u0002\u0002\u06da",
    "\u0137\u0003\u0002\u0002\u0002\u06db\u06d9\u0003\u0002\u0002\u0002\u06dc",
    "\u06e2\u0005\u0140\u00a1\u0002\u06dd\u06de\u0005\u0140\u00a1\u0002\u06de",
    "\u06df\u0007i\u0002\u0002\u06df\u06e0\u0005\u0140\u00a1\u0002\u06e0",
    "\u06e2\u0003\u0002\u0002\u0002\u06e1\u06dc\u0003\u0002\u0002\u0002\u06e1",
    "\u06dd\u0003\u0002\u0002\u0002\u06e2\u0139\u0003\u0002\u0002\u0002\u06e3",
    "\u06e4\u0007\b\u0002\u0002\u06e4\u06e5\u0005\u0006\u0004\u0002\u06e5",
    "\u06e6\u0005\u013c\u009f\u0002\u06e6\u06e9\u0003\u0002\u0002\u0002\u06e7",
    "\u06e9\u0007\u000b\u0002\u0002\u06e8\u06e3\u0003\u0002\u0002\u0002\u06e8",
    "\u06e7\u0003\u0002\u0002\u0002\u06e9\u013b\u0003\u0002\u0002\u0002\u06ea",
    "\u06ec\u0005\u013e\u00a0\u0002\u06eb\u06ea\u0003\u0002\u0002\u0002\u06eb",
    "\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed",
    "\u06ee\u0007\n\u0002\u0002\u06ee\u013d\u0003\u0002\u0002\u0002\u06ef",
    "\u06f1\u0007\t\u0002\u0002\u06f0\u06f2\u0005\u0006\u0004\u0002\u06f1",
    "\u06f0\u0003\u0002\u0002\u0002\u06f2\u06f3\u0003\u0002\u0002\u0002\u06f3",
    "\u06f1\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002\u06f4",
    "\u013f\u0003\u0002\u0002\u0002\u06f5\u06f9\u0007s\u0002\u0002\u06f6",
    "\u06f9\u0005\u0142\u00a2\u0002\u06f7\u06f9\u0005\u0148\u00a5\u0002\u06f8",
    "\u06f5\u0003\u0002\u0002\u0002\u06f8\u06f6\u0003\u0002\u0002\u0002\u06f8",
    "\u06f7\u0003\u0002\u0002\u0002\u06f9\u0141\u0003\u0002\u0002\u0002\u06fa",
    "\u06ff\u0005\u0144\u00a3\u0002\u06fb\u06ff\u0005\u0146\u00a4\u0002\u06fc",
    "\u06ff\u0007A\u0002\u0002\u06fd\u06ff\u0007B\u0002\u0002\u06fe\u06fa",
    "\u0003\u0002\u0002\u0002\u06fe\u06fb\u0003\u0002\u0002\u0002\u06fe\u06fc",
    "\u0003\u0002\u0002\u0002\u06fe\u06fd\u0003\u0002\u0002\u0002\u06ff\u0143",
    "\u0003\u0002\u0002\u0002\u0700\u0701\t\f\u0002\u0002\u0701\u0145\u0003",
    "\u0002\u0002\u0002\u0702\u0703\u0007e\u0002\u0002\u0703\u0147\u0003",
    "\u0002\u0002\u0002\u0704\u0705\t\r\u0002\u0002\u0705\u0149\u0003\u0002",
    "\u0002\u0002\u00a4\u014c\u0150\u0157\u015f\u0164\u016b\u016f\u0173\u0176",
    "\u0181\u0184\u0188\u018f\u0197\u019b\u01a1\u01a7\u01ab\u01b6\u01bb\u01c0",
    "\u01c4\u01c8\u01d5\u01dc\u01fa\u0205\u0210\u0214\u0218\u021c\u021f\u0224",
    "\u022a\u022d\u022f\u0235\u023d\u023f\u0248\u0251\u0255\u025a\u0261\u026f",
    "\u0271\u027c\u0280\u0283\u0288\u028d\u0292\u0297\u02a1\u02ad\u02af\u02ba",
    "\u02d5\u02f0\u0335\u0337\u0342\u035d\u03a7\u03a9\u03c9\u03ce\u03d2\u03d8",
    "\u03e8\u03ec\u03f3\u03f5\u03fb\u03ff\u0403\u0408\u040a\u0410\u0413\u041e",
    "\u0421\u0425\u042c\u0434\u0445\u044d\u0452\u0457\u045b\u0460\u0465\u0469",
    "\u046d\u0480\u048d\u049b\u04a0\u04aa\u04af\u04b3\u04b7\u04bc\u04c2\u04c7",
    "\u04dc\u04e0\u04e4\u04ee\u04f2\u04fb\u04ff\u053e\u0545\u054e\u0552\u055a",
    "\u0562\u0568\u0575\u057d\u0582\u0587\u058b\u0590\u059d\u05a8\u05b7\u05bc",
    "\u05c0\u05cc\u05d2\u05e1\u05ed\u05fc\u0602\u0609\u0612\u0616\u0623\u062a",
    "\u0646\u0654\u065b\u0664\u0669\u0674\u0681\u068e\u0692\u069c\u06a4\u06c7",
    "\u06ce\u06d2\u06d9\u06e1\u06e8\u06eb\u06f3\u06f8\u06fe"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'.'", "'...'", "';'", "','", "'<'", "'>'", "'<='", 
                     "'>='", "'=='", "'!='", "'==='", "'!=='", "'+'", "'-'", 
                     "'*'", "'%'", "'**'", "'++'", "'--'", "'<<'", "'>>'", 
                     "'>>>'", "'&'", "'|'", "'^'", "'!'", "'~'", "'&&'", 
                     "'||'", "'?'", "':'", "'='", "'+='", "'-='", "'*='", 
                     "'%='", "'**='", "'<<='", "'>>='", "'>>>='", "'&='", 
                     "'|='", "'^='", "'=>'", null, null, null, null, "'await'", 
                     "'break'", "'case'", "'catch'", "'class'", "'const'", 
                     "'continue'", "'debugger'", "'default'", "'delete'", 
                     "'do'", "'else'", "'export'", "'extends'", "'finally'", 
                     "'for'", "'function'", "'if'", "'import'", "'in'", 
                     "'instanceof'", "'new'", "'return'", "'super'", "'switch'", 
                     "'this'", "'throw'", "'try'", "'typeof'", "'var'", 
                     "'void'", "'while'", "'with'", "'yield'", "'enum'", 
                     "'null'", "'true'", "'false'", "'as'", "'async'", "'from'", 
                     "'get'", "'let'", "'of'", "'set'", "'static'", "'target'" ];

var symbolicNames = [ null, "SingleLineDelimitedComment", "MultiLineComment", 
                      "SingleLineHTMLOpenComment", "SingleLineHTMLCloseComment", 
                      "NumericLiteral", "TemplateHead", "TemplateMiddle", 
                      "TemplateTail", "NoSubstitutionTemplate", "RegularExpressionLiteral", 
                      "OpenBrace", "CloseBrace", "OpenParen", "CloseParen", 
                      "OpenBracket", "CloseBracket", "Dot", "Spread", "SemiColon", 
                      "Comma", "LessThan", "GreaterThan", "LessThanEquals", 
                      "GreaterThanEquals", "Equals", "NotEquals", "IdentityEquals", 
                      "IdentityNotEquals", "Plus", "Minus", "Multiply", 
                      "Modulo", "Power", "PlusPlus", "MinusMinus", "LeftShiftArithmetic", 
                      "RightShiftArithmetic", "RightShiftLogical", "BitAnd", 
                      "BitOr", "BitXor", "Not", "BitNot", "And", "Or", "QuestionMark", 
                      "Colon", "Assign", "PlusAssign", "MinusAssign", "MultiplyAssign", 
                      "ModuloAssign", "PowerAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitOrAssign", "BitXorAssign", "FatArrow", 
                      "Divide", "DivideAssign", "NullLiteral", "BooleanLiteral", 
                      "Await", "Break", "Case", "Catch", "Class", "Const", 
                      "Continue", "Debugger", "Default", "Delete", "Do", 
                      "Else", "Export", "Extends", "Finally", "For", "Function", 
                      "If", "Import", "In", "Instanceof", "New", "Return", 
                      "Super", "Switch", "This", "Throw", "Try", "Typeof", 
                      "Var", "Void", "While", "With", "Yield", "Enum", "Null", 
                      "True", "False", "As", "Async", "From", "Get", "Let", 
                      "Of", "Set", "Static", "Target", "StringLiteral", 
                      "IdentifierName", "Comment", "SingleLineComment", 
                      "WhiteSpace", "LineTerminator" ];

var ruleNames =  [ "file", "eos", "expression", "expression_In", "assignmentPattern", 
                   "objectAssignmentPattern", "arrayAssignmentPattern", 
                   "assignmentPropertyList", "assignmentElementList", "assignmentElisionElement", 
                   "assignmentProperty", "assignmentElement", "assignmentRestElement", 
                   "destructuringAssignmentTarget", "identifierReference", 
                   "identifierReference_Yield", "bindingIdentifier", "bindingIdentifier_Yield", 
                   "identifier", "primaryExpression", "literal", "coverParenthesizedExpressionAndArrowParameterList", 
                   "parenthesizedExpression", "coverCallExpressionAndAsyncArrowHead", 
                   "arrayLiteral", "elementList", "elision", "spreadElement", 
                   "objectLiteral", "propertyDefinitionList", "propertyDefinition", 
                   "propertyName", "literalPropertyName", "computedPropertyName", 
                   "callExpression", "superCall", "arguments", "argumentList", 
                   "leftHandSideExpression", "newExpression", "memberExpression", 
                   "superProperty", "metaProperty", "newTarget", "initializer", 
                   "initializer_In", "assignmentExpression", "assignmentExpression_In", 
                   "unaryOperator", "multiplicativeOperator", "additiveOperator", 
                   "shiftOperator", "relationalOperator", "equalityOperator", 
                   "assignmentOperator", "statement", "statementList", "statementListItem", 
                   "emptyStatement", "returnStatement", "debuggerStatement", 
                   "expressionStatement", "bindingElementList", "bindingElisionElement", 
                   "bindingElement", "bindingRestElement", "singleNameBinding", 
                   "bindingPattern", "objectBindingPattern", "arrayBindingPattern", 
                   "bindingPropertyList", "bindingProperty", "lexicalDeclaration", 
                   "lexicalDeclaration_In", "letOrConst", "bindingList", 
                   "bindingList_In", "lexicalBinding", "lexicalBinding_In", 
                   "declaration", "hoistableDeclaration", "hoistableDeclaration_Default", 
                   "throwStatement", "tryStatement", "catchPart", "finallyPart", 
                   "catchParameter", "withStatement", "labelledStatement", 
                   "labelledItem", "labelIdentifier", "switchStatement", 
                   "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                   "iterationStatement", "forDeclaration", "forBinding", 
                   "ifStatement", "breakableStatement", "continueStatement", 
                   "breakStatement", "blockStatement", "block", "variableStatement", 
                   "variableDeclarationList", "variableDeclarationList_In", 
                   "variableDeclaration", "variableDeclaration_In", "functionDeclaration", 
                   "functionDeclaration_Default", "functionExpression", 
                   "classDeclaration", "classExpression", "classTail", "classHeritage", 
                   "classBody", "classElementList", "classElement", "generatorDeclaration", 
                   "generatorDeclaration_Default", "generatorExpression", 
                   "uniqueFormalParameters", "formalParameters", "formalParameterList", 
                   "functionRestParameter", "formalParameter", "arrowParameters", 
                   "functionBody", "generatorBody", "conciseBody", "conciseBody_In", 
                   "methodDefinition", "propertySetParameterList", "generatorMethod", 
                   "script", "scriptBody", "module", "moduleBody", "moduleItemList", 
                   "moduleItem", "importDeclaration", "importClause", "importedDefaultBinding", 
                   "nameSpaceImport", "namedImports", "fromClause", "importsList", 
                   "importSpecifier", "moduleSpecifier", "importedBinding", 
                   "exportDeclaration", "exportClause", "exportsList", "exportSpecifier", 
                   "templateLiteral", "templateSpans", "templateMiddleList", 
                   "identifierName", "reservedWord", "keyword", "futureReservedWord", 
                   "miscIdentifier" ];

function ECMAScriptParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	var path = require('path');
	require(path.join(process.cwd(), 'build/src/static/antlr4/BaseParser'))
	  .addOwnMethodsTo(ECMAScriptParser.prototype);

    return this;
}

ECMAScriptParser.prototype = Object.create(antlr4.Parser.prototype);
ECMAScriptParser.prototype.constructor = ECMAScriptParser;

Object.defineProperty(ECMAScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ECMAScriptParser.EOF = antlr4.Token.EOF;
ECMAScriptParser.SingleLineDelimitedComment = 1;
ECMAScriptParser.MultiLineComment = 2;
ECMAScriptParser.SingleLineHTMLOpenComment = 3;
ECMAScriptParser.SingleLineHTMLCloseComment = 4;
ECMAScriptParser.NumericLiteral = 5;
ECMAScriptParser.TemplateHead = 6;
ECMAScriptParser.TemplateMiddle = 7;
ECMAScriptParser.TemplateTail = 8;
ECMAScriptParser.NoSubstitutionTemplate = 9;
ECMAScriptParser.RegularExpressionLiteral = 10;
ECMAScriptParser.OpenBrace = 11;
ECMAScriptParser.CloseBrace = 12;
ECMAScriptParser.OpenParen = 13;
ECMAScriptParser.CloseParen = 14;
ECMAScriptParser.OpenBracket = 15;
ECMAScriptParser.CloseBracket = 16;
ECMAScriptParser.Dot = 17;
ECMAScriptParser.Spread = 18;
ECMAScriptParser.SemiColon = 19;
ECMAScriptParser.Comma = 20;
ECMAScriptParser.LessThan = 21;
ECMAScriptParser.GreaterThan = 22;
ECMAScriptParser.LessThanEquals = 23;
ECMAScriptParser.GreaterThanEquals = 24;
ECMAScriptParser.Equals = 25;
ECMAScriptParser.NotEquals = 26;
ECMAScriptParser.IdentityEquals = 27;
ECMAScriptParser.IdentityNotEquals = 28;
ECMAScriptParser.Plus = 29;
ECMAScriptParser.Minus = 30;
ECMAScriptParser.Multiply = 31;
ECMAScriptParser.Modulo = 32;
ECMAScriptParser.Power = 33;
ECMAScriptParser.PlusPlus = 34;
ECMAScriptParser.MinusMinus = 35;
ECMAScriptParser.LeftShiftArithmetic = 36;
ECMAScriptParser.RightShiftArithmetic = 37;
ECMAScriptParser.RightShiftLogical = 38;
ECMAScriptParser.BitAnd = 39;
ECMAScriptParser.BitOr = 40;
ECMAScriptParser.BitXor = 41;
ECMAScriptParser.Not = 42;
ECMAScriptParser.BitNot = 43;
ECMAScriptParser.And = 44;
ECMAScriptParser.Or = 45;
ECMAScriptParser.QuestionMark = 46;
ECMAScriptParser.Colon = 47;
ECMAScriptParser.Assign = 48;
ECMAScriptParser.PlusAssign = 49;
ECMAScriptParser.MinusAssign = 50;
ECMAScriptParser.MultiplyAssign = 51;
ECMAScriptParser.ModuloAssign = 52;
ECMAScriptParser.PowerAssign = 53;
ECMAScriptParser.LeftShiftArithmeticAssign = 54;
ECMAScriptParser.RightShiftArithmeticAssign = 55;
ECMAScriptParser.RightShiftLogicalAssign = 56;
ECMAScriptParser.BitAndAssign = 57;
ECMAScriptParser.BitOrAssign = 58;
ECMAScriptParser.BitXorAssign = 59;
ECMAScriptParser.FatArrow = 60;
ECMAScriptParser.Divide = 61;
ECMAScriptParser.DivideAssign = 62;
ECMAScriptParser.NullLiteral = 63;
ECMAScriptParser.BooleanLiteral = 64;
ECMAScriptParser.Await = 65;
ECMAScriptParser.Break = 66;
ECMAScriptParser.Case = 67;
ECMAScriptParser.Catch = 68;
ECMAScriptParser.Class = 69;
ECMAScriptParser.Const = 70;
ECMAScriptParser.Continue = 71;
ECMAScriptParser.Debugger = 72;
ECMAScriptParser.Default = 73;
ECMAScriptParser.Delete = 74;
ECMAScriptParser.Do = 75;
ECMAScriptParser.Else = 76;
ECMAScriptParser.Export = 77;
ECMAScriptParser.Extends = 78;
ECMAScriptParser.Finally = 79;
ECMAScriptParser.For = 80;
ECMAScriptParser.Function = 81;
ECMAScriptParser.If = 82;
ECMAScriptParser.Import = 83;
ECMAScriptParser.In = 84;
ECMAScriptParser.Instanceof = 85;
ECMAScriptParser.New = 86;
ECMAScriptParser.Return = 87;
ECMAScriptParser.Super = 88;
ECMAScriptParser.Switch = 89;
ECMAScriptParser.This = 90;
ECMAScriptParser.Throw = 91;
ECMAScriptParser.Try = 92;
ECMAScriptParser.Typeof = 93;
ECMAScriptParser.Var = 94;
ECMAScriptParser.Void = 95;
ECMAScriptParser.While = 96;
ECMAScriptParser.With = 97;
ECMAScriptParser.Yield = 98;
ECMAScriptParser.Enum = 99;
ECMAScriptParser.Null = 100;
ECMAScriptParser.True = 101;
ECMAScriptParser.False = 102;
ECMAScriptParser.As = 103;
ECMAScriptParser.Async = 104;
ECMAScriptParser.From = 105;
ECMAScriptParser.Get = 106;
ECMAScriptParser.Let = 107;
ECMAScriptParser.Of = 108;
ECMAScriptParser.Set = 109;
ECMAScriptParser.Static = 110;
ECMAScriptParser.Target = 111;
ECMAScriptParser.StringLiteral = 112;
ECMAScriptParser.IdentifierName = 113;
ECMAScriptParser.Comment = 114;
ECMAScriptParser.SingleLineComment = 115;
ECMAScriptParser.WhiteSpace = 116;
ECMAScriptParser.LineTerminator = 117;

ECMAScriptParser.RULE_file = 0;
ECMAScriptParser.RULE_eos = 1;
ECMAScriptParser.RULE_expression = 2;
ECMAScriptParser.RULE_expression_In = 3;
ECMAScriptParser.RULE_assignmentPattern = 4;
ECMAScriptParser.RULE_objectAssignmentPattern = 5;
ECMAScriptParser.RULE_arrayAssignmentPattern = 6;
ECMAScriptParser.RULE_assignmentPropertyList = 7;
ECMAScriptParser.RULE_assignmentElementList = 8;
ECMAScriptParser.RULE_assignmentElisionElement = 9;
ECMAScriptParser.RULE_assignmentProperty = 10;
ECMAScriptParser.RULE_assignmentElement = 11;
ECMAScriptParser.RULE_assignmentRestElement = 12;
ECMAScriptParser.RULE_destructuringAssignmentTarget = 13;
ECMAScriptParser.RULE_identifierReference = 14;
ECMAScriptParser.RULE_identifierReference_Yield = 15;
ECMAScriptParser.RULE_bindingIdentifier = 16;
ECMAScriptParser.RULE_bindingIdentifier_Yield = 17;
ECMAScriptParser.RULE_identifier = 18;
ECMAScriptParser.RULE_primaryExpression = 19;
ECMAScriptParser.RULE_literal = 20;
ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList = 21;
ECMAScriptParser.RULE_parenthesizedExpression = 22;
ECMAScriptParser.RULE_coverCallExpressionAndAsyncArrowHead = 23;
ECMAScriptParser.RULE_arrayLiteral = 24;
ECMAScriptParser.RULE_elementList = 25;
ECMAScriptParser.RULE_elision = 26;
ECMAScriptParser.RULE_spreadElement = 27;
ECMAScriptParser.RULE_objectLiteral = 28;
ECMAScriptParser.RULE_propertyDefinitionList = 29;
ECMAScriptParser.RULE_propertyDefinition = 30;
ECMAScriptParser.RULE_propertyName = 31;
ECMAScriptParser.RULE_literalPropertyName = 32;
ECMAScriptParser.RULE_computedPropertyName = 33;
ECMAScriptParser.RULE_callExpression = 34;
ECMAScriptParser.RULE_superCall = 35;
ECMAScriptParser.RULE_arguments = 36;
ECMAScriptParser.RULE_argumentList = 37;
ECMAScriptParser.RULE_leftHandSideExpression = 38;
ECMAScriptParser.RULE_newExpression = 39;
ECMAScriptParser.RULE_memberExpression = 40;
ECMAScriptParser.RULE_superProperty = 41;
ECMAScriptParser.RULE_metaProperty = 42;
ECMAScriptParser.RULE_newTarget = 43;
ECMAScriptParser.RULE_initializer = 44;
ECMAScriptParser.RULE_initializer_In = 45;
ECMAScriptParser.RULE_assignmentExpression = 46;
ECMAScriptParser.RULE_assignmentExpression_In = 47;
ECMAScriptParser.RULE_unaryOperator = 48;
ECMAScriptParser.RULE_multiplicativeOperator = 49;
ECMAScriptParser.RULE_additiveOperator = 50;
ECMAScriptParser.RULE_shiftOperator = 51;
ECMAScriptParser.RULE_relationalOperator = 52;
ECMAScriptParser.RULE_equalityOperator = 53;
ECMAScriptParser.RULE_assignmentOperator = 54;
ECMAScriptParser.RULE_statement = 55;
ECMAScriptParser.RULE_statementList = 56;
ECMAScriptParser.RULE_statementListItem = 57;
ECMAScriptParser.RULE_emptyStatement = 58;
ECMAScriptParser.RULE_returnStatement = 59;
ECMAScriptParser.RULE_debuggerStatement = 60;
ECMAScriptParser.RULE_expressionStatement = 61;
ECMAScriptParser.RULE_bindingElementList = 62;
ECMAScriptParser.RULE_bindingElisionElement = 63;
ECMAScriptParser.RULE_bindingElement = 64;
ECMAScriptParser.RULE_bindingRestElement = 65;
ECMAScriptParser.RULE_singleNameBinding = 66;
ECMAScriptParser.RULE_bindingPattern = 67;
ECMAScriptParser.RULE_objectBindingPattern = 68;
ECMAScriptParser.RULE_arrayBindingPattern = 69;
ECMAScriptParser.RULE_bindingPropertyList = 70;
ECMAScriptParser.RULE_bindingProperty = 71;
ECMAScriptParser.RULE_lexicalDeclaration = 72;
ECMAScriptParser.RULE_lexicalDeclaration_In = 73;
ECMAScriptParser.RULE_letOrConst = 74;
ECMAScriptParser.RULE_bindingList = 75;
ECMAScriptParser.RULE_bindingList_In = 76;
ECMAScriptParser.RULE_lexicalBinding = 77;
ECMAScriptParser.RULE_lexicalBinding_In = 78;
ECMAScriptParser.RULE_declaration = 79;
ECMAScriptParser.RULE_hoistableDeclaration = 80;
ECMAScriptParser.RULE_hoistableDeclaration_Default = 81;
ECMAScriptParser.RULE_throwStatement = 82;
ECMAScriptParser.RULE_tryStatement = 83;
ECMAScriptParser.RULE_catchPart = 84;
ECMAScriptParser.RULE_finallyPart = 85;
ECMAScriptParser.RULE_catchParameter = 86;
ECMAScriptParser.RULE_withStatement = 87;
ECMAScriptParser.RULE_labelledStatement = 88;
ECMAScriptParser.RULE_labelledItem = 89;
ECMAScriptParser.RULE_labelIdentifier = 90;
ECMAScriptParser.RULE_switchStatement = 91;
ECMAScriptParser.RULE_caseBlock = 92;
ECMAScriptParser.RULE_caseClauses = 93;
ECMAScriptParser.RULE_caseClause = 94;
ECMAScriptParser.RULE_defaultClause = 95;
ECMAScriptParser.RULE_iterationStatement = 96;
ECMAScriptParser.RULE_forDeclaration = 97;
ECMAScriptParser.RULE_forBinding = 98;
ECMAScriptParser.RULE_ifStatement = 99;
ECMAScriptParser.RULE_breakableStatement = 100;
ECMAScriptParser.RULE_continueStatement = 101;
ECMAScriptParser.RULE_breakStatement = 102;
ECMAScriptParser.RULE_blockStatement = 103;
ECMAScriptParser.RULE_block = 104;
ECMAScriptParser.RULE_variableStatement = 105;
ECMAScriptParser.RULE_variableDeclarationList = 106;
ECMAScriptParser.RULE_variableDeclarationList_In = 107;
ECMAScriptParser.RULE_variableDeclaration = 108;
ECMAScriptParser.RULE_variableDeclaration_In = 109;
ECMAScriptParser.RULE_functionDeclaration = 110;
ECMAScriptParser.RULE_functionDeclaration_Default = 111;
ECMAScriptParser.RULE_functionExpression = 112;
ECMAScriptParser.RULE_classDeclaration = 113;
ECMAScriptParser.RULE_classExpression = 114;
ECMAScriptParser.RULE_classTail = 115;
ECMAScriptParser.RULE_classHeritage = 116;
ECMAScriptParser.RULE_classBody = 117;
ECMAScriptParser.RULE_classElementList = 118;
ECMAScriptParser.RULE_classElement = 119;
ECMAScriptParser.RULE_generatorDeclaration = 120;
ECMAScriptParser.RULE_generatorDeclaration_Default = 121;
ECMAScriptParser.RULE_generatorExpression = 122;
ECMAScriptParser.RULE_uniqueFormalParameters = 123;
ECMAScriptParser.RULE_formalParameters = 124;
ECMAScriptParser.RULE_formalParameterList = 125;
ECMAScriptParser.RULE_functionRestParameter = 126;
ECMAScriptParser.RULE_formalParameter = 127;
ECMAScriptParser.RULE_arrowParameters = 128;
ECMAScriptParser.RULE_functionBody = 129;
ECMAScriptParser.RULE_generatorBody = 130;
ECMAScriptParser.RULE_conciseBody = 131;
ECMAScriptParser.RULE_conciseBody_In = 132;
ECMAScriptParser.RULE_methodDefinition = 133;
ECMAScriptParser.RULE_propertySetParameterList = 134;
ECMAScriptParser.RULE_generatorMethod = 135;
ECMAScriptParser.RULE_script = 136;
ECMAScriptParser.RULE_scriptBody = 137;
ECMAScriptParser.RULE_module = 138;
ECMAScriptParser.RULE_moduleBody = 139;
ECMAScriptParser.RULE_moduleItemList = 140;
ECMAScriptParser.RULE_moduleItem = 141;
ECMAScriptParser.RULE_importDeclaration = 142;
ECMAScriptParser.RULE_importClause = 143;
ECMAScriptParser.RULE_importedDefaultBinding = 144;
ECMAScriptParser.RULE_nameSpaceImport = 145;
ECMAScriptParser.RULE_namedImports = 146;
ECMAScriptParser.RULE_fromClause = 147;
ECMAScriptParser.RULE_importsList = 148;
ECMAScriptParser.RULE_importSpecifier = 149;
ECMAScriptParser.RULE_moduleSpecifier = 150;
ECMAScriptParser.RULE_importedBinding = 151;
ECMAScriptParser.RULE_exportDeclaration = 152;
ECMAScriptParser.RULE_exportClause = 153;
ECMAScriptParser.RULE_exportsList = 154;
ECMAScriptParser.RULE_exportSpecifier = 155;
ECMAScriptParser.RULE_templateLiteral = 156;
ECMAScriptParser.RULE_templateSpans = 157;
ECMAScriptParser.RULE_templateMiddleList = 158;
ECMAScriptParser.RULE_identifierName = 159;
ECMAScriptParser.RULE_reservedWord = 160;
ECMAScriptParser.RULE_keyword = 161;
ECMAScriptParser.RULE_futureReservedWord = 162;
ECMAScriptParser.RULE_miscIdentifier = 163;

function FileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_file;
    return this;
}

FileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileContext.prototype.constructor = FileContext;

FileContext.prototype.script = function() {
    return this.getTypedRuleContext(ScriptContext,0);
};

FileContext.prototype.module = function() {
    return this.getTypedRuleContext(ModuleContext,0);
};

FileContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFile(this);
	}
};

FileContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFile(this);
	}
};




ECMAScriptParser.FileContext = FileContext;

ECMAScriptParser.prototype.file = function() {

    var localctx = new FileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECMAScriptParser.RULE_file);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.state = 328;
            this.script();
            break;

        case 2:
            this.state = 329;
            this.module();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEos(this);
	}
};




ECMAScriptParser.EosContext = EosContext;

ECMAScriptParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ECMAScriptParser.RULE_eos);
    try {
        this.state = 334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 332;
            this.match(ECMAScriptParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 333;
            if (!( this.mayInsertSemiColon())) {
                throw new antlr4.error.FailedPredicateException(this, "this.mayInsertSemiColon()");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpression(this);
	}
};




ECMAScriptParser.ExpressionContext = ExpressionContext;

ECMAScriptParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ECMAScriptParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.assignmentExpression(0);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptParser.Comma) {
            this.state = 337;
            this.match(ECMAScriptParser.Comma);
            this.state = 338;
            this.assignmentExpression(0);
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expression_In;
    return this;
}

Expression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_InContext.prototype.constructor = Expression_InContext;

Expression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

Expression_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


Expression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpression_In(this);
	}
};

Expression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpression_In(this);
	}
};




ECMAScriptParser.Expression_InContext = Expression_InContext;

ECMAScriptParser.prototype.expression_In = function() {

    var localctx = new Expression_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ECMAScriptParser.RULE_expression_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.assignmentExpression_In(0);
        this.state = 349;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 345;
                this.match(ECMAScriptParser.Comma);
                this.state = 346;
                this.assignmentExpression_In(0); 
            }
            this.state = 351;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentPattern;
    return this;
}

AssignmentPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentPatternContext.prototype.constructor = AssignmentPatternContext;

AssignmentPatternContext.prototype.objectAssignmentPattern = function() {
    return this.getTypedRuleContext(ObjectAssignmentPatternContext,0);
};

AssignmentPatternContext.prototype.arrayAssignmentPattern = function() {
    return this.getTypedRuleContext(ArrayAssignmentPatternContext,0);
};

AssignmentPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentPattern(this);
	}
};

AssignmentPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentPattern(this);
	}
};




ECMAScriptParser.AssignmentPatternContext = AssignmentPatternContext;

ECMAScriptParser.prototype.assignmentPattern = function() {

    var localctx = new AssignmentPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ECMAScriptParser.RULE_assignmentPattern);
    try {
        this.state = 354;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 1);
            this.state = 352;
            this.objectAssignmentPattern();
            break;
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 353;
            this.arrayAssignmentPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectAssignmentPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_objectAssignmentPattern;
    return this;
}

ObjectAssignmentPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectAssignmentPatternContext.prototype.constructor = ObjectAssignmentPatternContext;

ObjectAssignmentPatternContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ObjectAssignmentPatternContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ObjectAssignmentPatternContext.prototype.assignmentPropertyList = function() {
    return this.getTypedRuleContext(AssignmentPropertyListContext,0);
};

ObjectAssignmentPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ObjectAssignmentPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectAssignmentPattern(this);
	}
};

ObjectAssignmentPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectAssignmentPattern(this);
	}
};




ECMAScriptParser.ObjectAssignmentPatternContext = ObjectAssignmentPatternContext;

ECMAScriptParser.prototype.objectAssignmentPattern = function() {

    var localctx = new ObjectAssignmentPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ECMAScriptParser.RULE_objectAssignmentPattern);
    var _la = 0; // Token type
    try {
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 356;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 357;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 358;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 359;
            this.assignmentPropertyList();
            this.state = 361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 360;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 363;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayAssignmentPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayAssignmentPattern;
    return this;
}

ArrayAssignmentPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAssignmentPatternContext.prototype.constructor = ArrayAssignmentPatternContext;

ArrayAssignmentPatternContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayAssignmentPatternContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayAssignmentPatternContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayAssignmentPatternContext.prototype.assignmentRestElement = function() {
    return this.getTypedRuleContext(AssignmentRestElementContext,0);
};

ArrayAssignmentPatternContext.prototype.assignmentElementList = function() {
    return this.getTypedRuleContext(AssignmentElementListContext,0);
};

ArrayAssignmentPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArrayAssignmentPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayAssignmentPattern(this);
	}
};

ArrayAssignmentPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayAssignmentPattern(this);
	}
};




ECMAScriptParser.ArrayAssignmentPatternContext = ArrayAssignmentPatternContext;

ECMAScriptParser.prototype.arrayAssignmentPattern = function() {

    var localctx = new ArrayAssignmentPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ECMAScriptParser.RULE_arrayAssignmentPattern);
    var _la = 0; // Token type
    try {
        this.state = 390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 367;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 368;
                this.elision();
            }

            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 371;
                this.assignmentRestElement();
            }

            this.state = 374;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 375;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 376;
            this.assignmentElementList();
            this.state = 377;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 379;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 380;
            this.assignmentElementList();
            this.state = 381;
            this.match(ECMAScriptParser.Comma);
            this.state = 383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 382;
                this.elision();
            }

            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 385;
                this.assignmentRestElement();
            }

            this.state = 388;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentPropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentPropertyList;
    return this;
}

AssignmentPropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentPropertyListContext.prototype.constructor = AssignmentPropertyListContext;

AssignmentPropertyListContext.prototype.assignmentProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentPropertyContext);
    } else {
        return this.getTypedRuleContext(AssignmentPropertyContext,i);
    }
};

AssignmentPropertyListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


AssignmentPropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentPropertyList(this);
	}
};

AssignmentPropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentPropertyList(this);
	}
};




ECMAScriptParser.AssignmentPropertyListContext = AssignmentPropertyListContext;

ECMAScriptParser.prototype.assignmentPropertyList = function() {

    var localctx = new AssignmentPropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ECMAScriptParser.RULE_assignmentPropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.assignmentProperty();
        this.state = 397;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 393;
                this.match(ECMAScriptParser.Comma);
                this.state = 394;
                this.assignmentProperty(); 
            }
            this.state = 399;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentElementList;
    return this;
}

AssignmentElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentElementListContext.prototype.constructor = AssignmentElementListContext;

AssignmentElementListContext.prototype.assignmentElisionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentElisionElementContext);
    } else {
        return this.getTypedRuleContext(AssignmentElisionElementContext,i);
    }
};

AssignmentElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


AssignmentElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentElementList(this);
	}
};

AssignmentElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentElementList(this);
	}
};




ECMAScriptParser.AssignmentElementListContext = AssignmentElementListContext;

ECMAScriptParser.prototype.assignmentElementList = function() {

    var localctx = new AssignmentElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ECMAScriptParser.RULE_assignmentElementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.assignmentElisionElement();
        this.state = 405;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 401;
                this.match(ECMAScriptParser.Comma);
                this.state = 402;
                this.assignmentElisionElement(); 
            }
            this.state = 407;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentElisionElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentElisionElement;
    return this;
}

AssignmentElisionElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentElisionElementContext.prototype.constructor = AssignmentElisionElementContext;

AssignmentElisionElementContext.prototype.assignmentElement = function() {
    return this.getTypedRuleContext(AssignmentElementContext,0);
};

AssignmentElisionElementContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

AssignmentElisionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentElisionElement(this);
	}
};

AssignmentElisionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentElisionElement(this);
	}
};




ECMAScriptParser.AssignmentElisionElementContext = AssignmentElisionElementContext;

ECMAScriptParser.prototype.assignmentElisionElement = function() {

    var localctx = new AssignmentElisionElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECMAScriptParser.RULE_assignmentElisionElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Comma) {
            this.state = 408;
            this.elision();
        }

        this.state = 411;
        this.assignmentElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentProperty;
    return this;
}

AssignmentPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentPropertyContext.prototype.constructor = AssignmentPropertyContext;

AssignmentPropertyContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

AssignmentPropertyContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

AssignmentPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

AssignmentPropertyContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

AssignmentPropertyContext.prototype.assignmentElement = function() {
    return this.getTypedRuleContext(AssignmentElementContext,0);
};

AssignmentPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentProperty(this);
	}
};

AssignmentPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentProperty(this);
	}
};




ECMAScriptParser.AssignmentPropertyContext = AssignmentPropertyContext;

ECMAScriptParser.prototype.assignmentProperty = function() {

    var localctx = new AssignmentPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECMAScriptParser.RULE_assignmentProperty);
    var _la = 0; // Token type
    try {
        this.state = 421;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this.identifierReference();
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Assign) {
                this.state = 414;
                this.initializer_In();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 417;
            this.propertyName();
            this.state = 418;
            this.match(ECMAScriptParser.Colon);
            this.state = 419;
            this.assignmentElement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentElement;
    return this;
}

AssignmentElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentElementContext.prototype.constructor = AssignmentElementContext;

AssignmentElementContext.prototype.destructuringAssignmentTarget = function() {
    return this.getTypedRuleContext(DestructuringAssignmentTargetContext,0);
};

AssignmentElementContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

AssignmentElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentElement(this);
	}
};

AssignmentElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentElement(this);
	}
};




ECMAScriptParser.AssignmentElementContext = AssignmentElementContext;

ECMAScriptParser.prototype.assignmentElement = function() {

    var localctx = new AssignmentElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECMAScriptParser.RULE_assignmentElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.destructuringAssignmentTarget();
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Assign) {
            this.state = 424;
            this.initializer_In();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentRestElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentRestElement;
    return this;
}

AssignmentRestElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentRestElementContext.prototype.constructor = AssignmentRestElementContext;

AssignmentRestElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

AssignmentRestElementContext.prototype.destructuringAssignmentTarget = function() {
    return this.getTypedRuleContext(DestructuringAssignmentTargetContext,0);
};

AssignmentRestElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentRestElement(this);
	}
};

AssignmentRestElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentRestElement(this);
	}
};




ECMAScriptParser.AssignmentRestElementContext = AssignmentRestElementContext;

ECMAScriptParser.prototype.assignmentRestElement = function() {

    var localctx = new AssignmentRestElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ECMAScriptParser.RULE_assignmentRestElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(ECMAScriptParser.Spread);
        this.state = 428;
        this.destructuringAssignmentTarget();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DestructuringAssignmentTargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_destructuringAssignmentTarget;
    return this;
}

DestructuringAssignmentTargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DestructuringAssignmentTargetContext.prototype.constructor = DestructuringAssignmentTargetContext;

DestructuringAssignmentTargetContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

DestructuringAssignmentTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDestructuringAssignmentTarget(this);
	}
};

DestructuringAssignmentTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDestructuringAssignmentTarget(this);
	}
};




ECMAScriptParser.DestructuringAssignmentTargetContext = DestructuringAssignmentTargetContext;

ECMAScriptParser.prototype.destructuringAssignmentTarget = function() {

    var localctx = new DestructuringAssignmentTargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECMAScriptParser.RULE_destructuringAssignmentTarget);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.leftHandSideExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierReference;
    return this;
}

IdentifierReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReferenceContext.prototype.constructor = IdentifierReferenceContext;

IdentifierReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReferenceContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

IdentifierReferenceContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

IdentifierReferenceContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

IdentifierReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifierReference(this);
	}
};

IdentifierReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifierReference(this);
	}
};




ECMAScriptParser.IdentifierReferenceContext = IdentifierReferenceContext;

ECMAScriptParser.prototype.identifierReference = function() {

    var localctx = new IdentifierReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECMAScriptParser.RULE_identifierReference);
    try {
        this.state = 436;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 432;
            this.identifier();
            break;
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 433;
            this.match(ECMAScriptParser.Yield);
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 434;
            this.match(ECMAScriptParser.Await);
            this.state = 435;
            this.match(ECMAScriptParser.Multiply);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReference_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierReference_Yield;
    return this;
}

IdentifierReference_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReference_YieldContext.prototype.constructor = IdentifierReference_YieldContext;

IdentifierReference_YieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReference_YieldContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

IdentifierReference_YieldContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

IdentifierReference_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifierReference_Yield(this);
	}
};

IdentifierReference_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifierReference_Yield(this);
	}
};




ECMAScriptParser.IdentifierReference_YieldContext = IdentifierReference_YieldContext;

ECMAScriptParser.prototype.identifierReference_Yield = function() {

    var localctx = new IdentifierReference_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECMAScriptParser.RULE_identifierReference_Yield);
    try {
        this.state = 441;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 438;
            this.identifier();
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 2);
            this.state = 439;
            this.match(ECMAScriptParser.Await);
            this.state = 440;
            this.match(ECMAScriptParser.Multiply);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingIdentifier;
    return this;
}

BindingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifierContext.prototype.constructor = BindingIdentifierContext;

BindingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

BindingIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

BindingIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingIdentifier(this);
	}
};

BindingIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingIdentifier(this);
	}
};




ECMAScriptParser.BindingIdentifierContext = BindingIdentifierContext;

ECMAScriptParser.prototype.bindingIdentifier = function() {

    var localctx = new BindingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECMAScriptParser.RULE_bindingIdentifier);
    try {
        this.state = 446;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 443;
            this.identifier();
            break;
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 444;
            this.match(ECMAScriptParser.Yield);
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 445;
            this.match(ECMAScriptParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifier_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingIdentifier_Yield;
    return this;
}

BindingIdentifier_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifier_YieldContext.prototype.constructor = BindingIdentifier_YieldContext;

BindingIdentifier_YieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifier_YieldContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

BindingIdentifier_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingIdentifier_Yield(this);
	}
};

BindingIdentifier_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingIdentifier_Yield(this);
	}
};




ECMAScriptParser.BindingIdentifier_YieldContext = BindingIdentifier_YieldContext;

ECMAScriptParser.prototype.bindingIdentifier_Yield = function() {

    var localctx = new BindingIdentifier_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ECMAScriptParser.RULE_bindingIdentifier_Yield);
    try {
        this.state = 450;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.identifier();
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 2);
            this.state = 449;
            this.match(ECMAScriptParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptParser.IdentifierName, 0);
};

IdentifierContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifier(this);
	}
};




ECMAScriptParser.IdentifierContext = IdentifierContext;

ECMAScriptParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECMAScriptParser.RULE_identifier);
    try {
        this.state = 454;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this.match(ECMAScriptParser.IdentifierName);
            break;
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
            this.enterOuterAlt(localctx, 2);
            this.state = 453;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};

PrimaryExpressionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

PrimaryExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

PrimaryExpressionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

PrimaryExpressionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

PrimaryExpressionContext.prototype.generatorExpression = function() {
    return this.getTypedRuleContext(GeneratorExpressionContext,0);
};

PrimaryExpressionContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
};

PrimaryExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};

PrimaryExpressionContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPrimaryExpression(this);
	}
};




ECMAScriptParser.PrimaryExpressionContext = PrimaryExpressionContext;

ECMAScriptParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ECMAScriptParser.RULE_primaryExpression);
    try {
        this.state = 467;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 456;
            this.match(ECMAScriptParser.This);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 457;
            this.identifierReference();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 458;
            this.literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 459;
            this.arrayLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 460;
            this.objectLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 461;
            this.functionExpression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 462;
            this.classExpression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 463;
            this.generatorExpression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 464;
            this.match(ECMAScriptParser.RegularExpressionLiteral);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 465;
            this.templateLiteral();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 466;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLiteral(this);
	}
};




ECMAScriptParser.LiteralContext = LiteralContext;

ECMAScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ECMAScriptParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptParser.NumericLiteral || _la===ECMAScriptParser.NullLiteral || _la===ECMAScriptParser.BooleanLiteral || _la===ECMAScriptParser.StringLiteral)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverParenthesizedExpressionAndArrowParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList;
    return this;
}

CoverParenthesizedExpressionAndArrowParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverParenthesizedExpressionAndArrowParameterListContext.prototype.constructor = CoverParenthesizedExpressionAndArrowParameterListContext;

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};




ECMAScriptParser.CoverParenthesizedExpressionAndArrowParameterListContext = CoverParenthesizedExpressionAndArrowParameterListContext;

ECMAScriptParser.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {

    var localctx = new CoverParenthesizedExpressionAndArrowParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList);
    var _la = 0; // Token type
    try {
        this.state = 504;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 471;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 472;
            this.expression_In();
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 473;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 476;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 478;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 479;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 480;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 481;
            this.match(ECMAScriptParser.Spread);
            this.state = 482;
            this.bindingIdentifier();
            this.state = 483;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 485;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 486;
            this.match(ECMAScriptParser.Spread);
            this.state = 487;
            this.bindingPattern();
            this.state = 488;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 490;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 491;
            this.expression_In();
            this.state = 492;
            this.match(ECMAScriptParser.Comma);
            this.state = 493;
            this.match(ECMAScriptParser.Spread);
            this.state = 494;
            this.bindingIdentifier();
            this.state = 495;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 497;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 498;
            this.expression_In();
            this.state = 499;
            this.match(ECMAScriptParser.Comma);
            this.state = 500;
            this.match(ECMAScriptParser.Spread);
            this.state = 501;
            this.bindingPattern();
            this.state = 502;
            this.match(ECMAScriptParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParenthesizedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_parenthesizedExpression;
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ParenthesizedExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitParenthesizedExpression(this);
	}
};




ECMAScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ECMAScriptParser.prototype.parenthesizedExpression = function() {

    var localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECMAScriptParser.RULE_parenthesizedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 506;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 507;
        this.primaryExpression();
        this.state = 508;
        this.match(ECMAScriptParser.CloseParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverCallExpressionAndAsyncArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_coverCallExpressionAndAsyncArrowHead;
    return this;
}

CoverCallExpressionAndAsyncArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverCallExpressionAndAsyncArrowHeadContext.prototype.constructor = CoverCallExpressionAndAsyncArrowHeadContext;

CoverCallExpressionAndAsyncArrowHeadContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverCallExpressionAndAsyncArrowHead(this);
	}
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverCallExpressionAndAsyncArrowHead(this);
	}
};




ECMAScriptParser.CoverCallExpressionAndAsyncArrowHeadContext = CoverCallExpressionAndAsyncArrowHeadContext;

ECMAScriptParser.prototype.coverCallExpressionAndAsyncArrowHead = function() {

    var localctx = new CoverCallExpressionAndAsyncArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECMAScriptParser.RULE_coverCallExpressionAndAsyncArrowHead);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        this.memberExpression(0);
        this.state = 511;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayLiteral(this);
	}
};




ECMAScriptParser.ArrayLiteralContext = ArrayLiteralContext;

ECMAScriptParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECMAScriptParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.state = 530;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 513;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 514;
                this.elision();
            }

            this.state = 517;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 518;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 519;
            this.elementList(0);
            this.state = 520;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 522;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 523;
            this.elementList(0);
            this.state = 524;
            this.match(ECMAScriptParser.Comma);
            this.state = 526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 525;
                this.elision();
            }

            this.state = 528;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ElementListContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ElementListContext.prototype.spreadElement = function() {
    return this.getTypedRuleContext(SpreadElementContext,0);
};

ElementListContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ElementListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitElementList(this);
	}
};



ECMAScriptParser.prototype.elementList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ElementListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 50;
    this.enterRecursionRule(localctx, 50, ECMAScriptParser.RULE_elementList, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.state = 534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 533;
                this.elision();
            }

            this.state = 536;
            this.assignmentExpression_In(0);
            break;

        case 2:
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 537;
                this.elision();
            }

            this.state = 540;
            this.spreadElement();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 557;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 555;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_elementList);
                    this.state = 543;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 544;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 546;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptParser.Comma) {
                        this.state = 545;
                        this.elision();
                    }

                    this.state = 548;
                    this.assignmentExpression_In(0);
                    break;

                case 2:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_elementList);
                    this.state = 549;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 550;
                    this.match(ECMAScriptParser.Comma);
                    this.state = 552;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptParser.Comma) {
                        this.state = 551;
                        this.elision();
                    }

                    this.state = 554;
                    this.spreadElement();
                    break;

                } 
            }
            this.state = 559;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ElisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_elision;
    return this;
}

ElisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElisionContext.prototype.constructor = ElisionContext;

ElisionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ElisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterElision(this);
	}
};

ElisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitElision(this);
	}
};




ECMAScriptParser.ElisionContext = ElisionContext;

ECMAScriptParser.prototype.elision = function() {

    var localctx = new ElisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECMAScriptParser.RULE_elision);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 560;
            this.match(ECMAScriptParser.Comma);
            this.state = 563; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptParser.Comma);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpreadElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_spreadElement;
    return this;
}

SpreadElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadElementContext.prototype.constructor = SpreadElementContext;

SpreadElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

SpreadElementContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

SpreadElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSpreadElement(this);
	}
};

SpreadElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSpreadElement(this);
	}
};




ECMAScriptParser.SpreadElementContext = SpreadElementContext;

ECMAScriptParser.prototype.spreadElement = function() {

    var localctx = new SpreadElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECMAScriptParser.RULE_spreadElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.match(ECMAScriptParser.Spread);
        this.state = 566;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyDefinitionList = function() {
    return this.getTypedRuleContext(PropertyDefinitionListContext,0);
};

ObjectLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ObjectLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectLiteral(this);
	}
};




ECMAScriptParser.ObjectLiteralContext = ObjectLiteralContext;

ECMAScriptParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ECMAScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.Multiply))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ECMAScriptParser.Break - 66)) | (1 << (ECMAScriptParser.Case - 66)) | (1 << (ECMAScriptParser.Catch - 66)) | (1 << (ECMAScriptParser.Class - 66)) | (1 << (ECMAScriptParser.Const - 66)) | (1 << (ECMAScriptParser.Continue - 66)) | (1 << (ECMAScriptParser.Debugger - 66)) | (1 << (ECMAScriptParser.Default - 66)) | (1 << (ECMAScriptParser.Delete - 66)) | (1 << (ECMAScriptParser.Do - 66)) | (1 << (ECMAScriptParser.Else - 66)) | (1 << (ECMAScriptParser.Export - 66)) | (1 << (ECMAScriptParser.Extends - 66)) | (1 << (ECMAScriptParser.Finally - 66)) | (1 << (ECMAScriptParser.For - 66)) | (1 << (ECMAScriptParser.Function - 66)) | (1 << (ECMAScriptParser.If - 66)) | (1 << (ECMAScriptParser.Import - 66)) | (1 << (ECMAScriptParser.In - 66)) | (1 << (ECMAScriptParser.Instanceof - 66)) | (1 << (ECMAScriptParser.New - 66)) | (1 << (ECMAScriptParser.Return - 66)) | (1 << (ECMAScriptParser.Super - 66)) | (1 << (ECMAScriptParser.Switch - 66)) | (1 << (ECMAScriptParser.This - 66)) | (1 << (ECMAScriptParser.Throw - 66)) | (1 << (ECMAScriptParser.Try - 66)) | (1 << (ECMAScriptParser.Typeof - 66)) | (1 << (ECMAScriptParser.Var - 66)) | (1 << (ECMAScriptParser.Void - 66)) | (1 << (ECMAScriptParser.While - 66)) | (1 << (ECMAScriptParser.With - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.Enum - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.StringLiteral - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 569;
            this.propertyDefinitionList();
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 570;
                this.match(ECMAScriptParser.Comma);
            }

        }

        this.state = 575;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyDefinitionList;
    return this;
}

PropertyDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionListContext.prototype.constructor = PropertyDefinitionListContext;

PropertyDefinitionListContext.prototype.propertyDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefinitionContext);
    } else {
        return this.getTypedRuleContext(PropertyDefinitionContext,i);
    }
};

PropertyDefinitionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


PropertyDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyDefinitionList(this);
	}
};

PropertyDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyDefinitionList(this);
	}
};




ECMAScriptParser.PropertyDefinitionListContext = PropertyDefinitionListContext;

ECMAScriptParser.prototype.propertyDefinitionList = function() {

    var localctx = new PropertyDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ECMAScriptParser.RULE_propertyDefinitionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this.propertyDefinition();
        this.state = 582;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 578;
                this.match(ECMAScriptParser.Comma);
                this.state = 579;
                this.propertyDefinition(); 
            }
            this.state = 584;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyDefinition;
    return this;
}

PropertyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionContext.prototype.constructor = PropertyDefinitionContext;

PropertyDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

PropertyDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyDefinitionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

PropertyDefinitionContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

PropertyDefinitionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PropertyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyDefinition(this);
	}
};

PropertyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyDefinition(this);
	}
};




ECMAScriptParser.PropertyDefinitionContext = PropertyDefinitionContext;

ECMAScriptParser.prototype.propertyDefinition = function() {

    var localctx = new PropertyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECMAScriptParser.RULE_propertyDefinition);
    try {
        this.state = 591;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 585;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 586;
            this.propertyName();
            this.state = 587;
            this.match(ECMAScriptParser.Colon);
            this.state = 588;
            this.assignmentExpression_In(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 590;
            this.identifierReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.literalPropertyName = function() {
    return this.getTypedRuleContext(LiteralPropertyNameContext,0);
};

PropertyNameContext.prototype.computedPropertyName = function() {
    return this.getTypedRuleContext(ComputedPropertyNameContext,0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyName(this);
	}
};




ECMAScriptParser.PropertyNameContext = PropertyNameContext;

ECMAScriptParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECMAScriptParser.RULE_propertyName);
    try {
        this.state = 595;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 593;
            this.literalPropertyName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 594;
            this.computedPropertyName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_literalPropertyName;
    return this;
}

LiteralPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralPropertyNameContext.prototype.constructor = LiteralPropertyNameContext;

LiteralPropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

LiteralPropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

LiteralPropertyNameContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};

LiteralPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLiteralPropertyName(this);
	}
};

LiteralPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLiteralPropertyName(this);
	}
};




ECMAScriptParser.LiteralPropertyNameContext = LiteralPropertyNameContext;

ECMAScriptParser.prototype.literalPropertyName = function() {

    var localctx = new LiteralPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECMAScriptParser.RULE_literalPropertyName);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 597;
            this.identifierName();
            break;
        case ECMAScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 598;
            this.match(ECMAScriptParser.StringLiteral);
            break;
        case ECMAScriptParser.NumericLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 599;
            this.match(ECMAScriptParser.NumericLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComputedPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_computedPropertyName;
    return this;
}

ComputedPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedPropertyNameContext.prototype.constructor = ComputedPropertyNameContext;

ComputedPropertyNameContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ComputedPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterComputedPropertyName(this);
	}
};

ComputedPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitComputedPropertyName(this);
	}
};




ECMAScriptParser.ComputedPropertyNameContext = ComputedPropertyNameContext;

ECMAScriptParser.prototype.computedPropertyName = function() {

    var localctx = new ComputedPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECMAScriptParser.RULE_computedPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_callExpression;
    return this;
}

CallExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallExpressionContext.prototype.constructor = CallExpressionContext;

CallExpressionContext.prototype.coverCallExpressionAndAsyncArrowHead = function() {
    return this.getTypedRuleContext(CoverCallExpressionAndAsyncArrowHeadContext,0);
};

CallExpressionContext.prototype.superCall = function() {
    return this.getTypedRuleContext(SuperCallContext,0);
};

CallExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

CallExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

CallExpressionContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CallExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

CallExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

CallExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

CallExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};

CallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCallExpression(this);
	}
};

CallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCallExpression(this);
	}
};



ECMAScriptParser.prototype.callExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, ECMAScriptParser.RULE_callExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.state = 605;
            this.coverCallExpressionAndAsyncArrowHead();
            break;

        case 2:
            this.state = 606;
            this.superCall();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 623;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 621;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_callExpression);
                    this.state = 609;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 610;
                    this.arguments();
                    break;

                case 2:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_callExpression);
                    this.state = 611;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 612;
                    this.match(ECMAScriptParser.OpenBracket);
                    this.state = 613;
                    this.expression_In();
                    this.state = 614;
                    this.match(ECMAScriptParser.CloseBracket);
                    break;

                case 3:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_callExpression);
                    this.state = 616;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 617;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 618;
                    this.identifierName();
                    break;

                case 4:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_callExpression);
                    this.state = 619;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 620;
                    this.templateLiteral();
                    break;

                } 
            }
            this.state = 625;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function SuperCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_superCall;
    return this;
}

SuperCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperCallContext.prototype.constructor = SuperCallContext;

SuperCallContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};

SuperCallContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperCall(this);
	}
};

SuperCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperCall(this);
	}
};




ECMAScriptParser.SuperCallContext = SuperCallContext;

ECMAScriptParser.prototype.superCall = function() {

    var localctx = new SuperCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ECMAScriptParser.RULE_superCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this.match(ECMAScriptParser.Super);
        this.state = 627;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ArgumentsContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ArgumentsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArguments(this);
	}
};




ECMAScriptParser.ArgumentsContext = ArgumentsContext;

ECMAScriptParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ECMAScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 629;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 630;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 631;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 632;
            this.argumentList();
            this.state = 634;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 633;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 636;
            this.match(ECMAScriptParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ArgumentListContext.prototype.Spread = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Spread);
    } else {
        return this.getToken(ECMAScriptParser.Spread, i);
    }
};


ArgumentListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArgumentList(this);
	}
};




ECMAScriptParser.ArgumentListContext = ArgumentListContext;

ECMAScriptParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECMAScriptParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Spread) {
            this.state = 640;
            this.match(ECMAScriptParser.Spread);
        }

        this.state = 643;
        this.assignmentExpression_In(0);
        this.state = 651;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 644;
                this.match(ECMAScriptParser.Comma);
                this.state = 646;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptParser.Spread) {
                    this.state = 645;
                    this.match(ECMAScriptParser.Spread);
                }

                this.state = 648;
                this.assignmentExpression_In(0); 
            }
            this.state = 653;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftHandSideExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_leftHandSideExpression;
    return this;
}

LeftHandSideExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftHandSideExpressionContext.prototype.constructor = LeftHandSideExpressionContext;

LeftHandSideExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLeftHandSideExpression(this);
	}
};

LeftHandSideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLeftHandSideExpression(this);
	}
};




ECMAScriptParser.LeftHandSideExpressionContext = LeftHandSideExpressionContext;

ECMAScriptParser.prototype.leftHandSideExpression = function() {

    var localctx = new LeftHandSideExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ECMAScriptParser.RULE_leftHandSideExpression);
    try {
        this.state = 656;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 654;
            this.callExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 655;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_newExpression;
    return this;
}

NewExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

NewExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

NewExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

NewExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNewExpression(this);
	}
};




ECMAScriptParser.NewExpressionContext = NewExpressionContext;

ECMAScriptParser.prototype.newExpression = function() {

    var localctx = new NewExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ECMAScriptParser.RULE_newExpression);
    try {
        this.state = 661;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 658;
            this.memberExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 659;
            this.match(ECMAScriptParser.New);
            this.state = 660;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_memberExpression;
    return this;
}

MemberExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberExpressionContext.prototype.constructor = MemberExpressionContext;

MemberExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

MemberExpressionContext.prototype.superProperty = function() {
    return this.getTypedRuleContext(SuperPropertyContext,0);
};

MemberExpressionContext.prototype.metaProperty = function() {
    return this.getTypedRuleContext(MetaPropertyContext,0);
};

MemberExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

MemberExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

MemberExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MemberExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

MemberExpressionContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

MemberExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

MemberExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

MemberExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};

MemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMemberExpression(this);
	}
};

MemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMemberExpression(this);
	}
};



ECMAScriptParser.prototype.memberExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, ECMAScriptParser.RULE_memberExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.state = 664;
            this.primaryExpression();
            break;

        case 2:
            this.state = 665;
            this.superProperty();
            break;

        case 3:
            this.state = 666;
            this.metaProperty();
            break;

        case 4:
            this.state = 667;
            this.match(ECMAScriptParser.New);
            this.state = 668;
            this.memberExpression(0);
            this.state = 669;
            this.arguments();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 685;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 683;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_memberExpression);
                    this.state = 673;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 674;
                    this.match(ECMAScriptParser.OpenBracket);
                    this.state = 675;
                    this.expression_In();
                    this.state = 676;
                    this.match(ECMAScriptParser.CloseBracket);
                    break;

                case 2:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_memberExpression);
                    this.state = 678;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 679;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 680;
                    this.identifierName();
                    break;

                case 3:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_memberExpression);
                    this.state = 681;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 682;
                    this.templateLiteral();
                    break;

                } 
            }
            this.state = 687;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function SuperPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_superProperty;
    return this;
}

SuperPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperPropertyContext.prototype.constructor = SuperPropertyContext;

SuperPropertyContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};

SuperPropertyContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

SuperPropertyContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

SuperPropertyContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

SuperPropertyContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

SuperPropertyContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

SuperPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperProperty(this);
	}
};

SuperPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperProperty(this);
	}
};




ECMAScriptParser.SuperPropertyContext = SuperPropertyContext;

ECMAScriptParser.prototype.superProperty = function() {

    var localctx = new SuperPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECMAScriptParser.RULE_superProperty);
    try {
        this.state = 696;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 688;
            this.match(ECMAScriptParser.Super);
            this.state = 689;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 690;
            this.expression_In();
            this.state = 691;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 693;
            this.match(ECMAScriptParser.Super);
            this.state = 694;
            this.match(ECMAScriptParser.Dot);
            this.state = 695;
            this.identifierName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MetaPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_metaProperty;
    return this;
}

MetaPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetaPropertyContext.prototype.constructor = MetaPropertyContext;

MetaPropertyContext.prototype.newTarget = function() {
    return this.getTypedRuleContext(NewTargetContext,0);
};

MetaPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMetaProperty(this);
	}
};

MetaPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMetaProperty(this);
	}
};




ECMAScriptParser.MetaPropertyContext = MetaPropertyContext;

ECMAScriptParser.prototype.metaProperty = function() {

    var localctx = new MetaPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECMAScriptParser.RULE_metaProperty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.newTarget();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewTargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_newTarget;
    return this;
}

NewTargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewTargetContext.prototype.constructor = NewTargetContext;

NewTargetContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

NewTargetContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

NewTargetContext.prototype.Target = function() {
    return this.getToken(ECMAScriptParser.Target, 0);
};

NewTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNewTarget(this);
	}
};

NewTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNewTarget(this);
	}
};




ECMAScriptParser.NewTargetContext = NewTargetContext;

ECMAScriptParser.prototype.newTarget = function() {

    var localctx = new NewTargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECMAScriptParser.RULE_newTarget);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.match(ECMAScriptParser.New);
        this.state = 701;
        this.match(ECMAScriptParser.Dot);
        this.state = 702;
        this.match(ECMAScriptParser.Target);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInitializer(this);
	}
};




ECMAScriptParser.InitializerContext = InitializerContext;

ECMAScriptParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECMAScriptParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(ECMAScriptParser.Assign);
        this.state = 705;
        this.assignmentExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_initializer_In;
    return this;
}

Initializer_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_InContext.prototype.constructor = Initializer_InContext;

Initializer_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

Initializer_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

Initializer_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInitializer_In(this);
	}
};

Initializer_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInitializer_In(this);
	}
};




ECMAScriptParser.Initializer_InContext = Initializer_InContext;

ECMAScriptParser.prototype.initializer_In = function() {

    var localctx = new Initializer_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ECMAScriptParser.RULE_initializer_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.match(ECMAScriptParser.Assign);
        this.state = 708;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;


 
AssignmentExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemplateExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
TemplateExpressionContext.prototype.constructor = TemplateExpressionContext;

ECMAScriptParser.TemplateExpressionContext = TemplateExpressionContext;

TemplateExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};
TemplateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTemplateExpression(this);
	}
};

TemplateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTemplateExpression(this);
	}
};


function BitwiseORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseORExpressionContext.prototype.constructor = BitwiseORExpressionContext;

ECMAScriptParser.BitwiseORExpressionContext = BitwiseORExpressionContext;

BitwiseORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseORExpressionContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptParser.BitOr, 0);
};
BitwiseORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseORExpression(this);
	}
};

BitwiseORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseORExpression(this);
	}
};


function ArgumentsExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentsExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

ECMAScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ArgumentsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArgumentsExpression(this);
	}
};

ArgumentsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArgumentsExpression(this);
	}
};


function TaggedTemplateExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TaggedTemplateExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
TaggedTemplateExpressionContext.prototype.constructor = TaggedTemplateExpressionContext;

ECMAScriptParser.TaggedTemplateExpressionContext = TaggedTemplateExpressionContext;

TaggedTemplateExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

TaggedTemplateExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};
TaggedTemplateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTaggedTemplateExpression(this);
	}
};

TaggedTemplateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTaggedTemplateExpression(this);
	}
};


function ClsExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClsExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ClsExpressionContext.prototype.constructor = ClsExpressionContext;

ECMAScriptParser.ClsExpressionContext = ClsExpressionContext;

ClsExpressionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};
ClsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClsExpression(this);
	}
};

ClsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClsExpression(this);
	}
};


function AdditiveExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

ECMAScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAdditiveExpression(this);
	}
};


function RelationalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

ECMAScriptParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRelationalExpression(this);
	}
};


function ParenExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ParenExpressionContext.prototype.constructor = ParenExpressionContext;

ECMAScriptParser.ParenExpressionContext = ParenExpressionContext;

ParenExpressionContext.prototype.parenthesizedExpression = function() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
};
ParenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterParenExpression(this);
	}
};

ParenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitParenExpression(this);
	}
};


function CoverExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
CoverExpressionContext.prototype.constructor = CoverExpressionContext;

ECMAScriptParser.CoverExpressionContext = CoverExpressionContext;

CoverExpressionContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};
CoverExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverExpression(this);
	}
};

CoverExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverExpression(this);
	}
};


function SuperExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

ECMAScriptParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.superProperty = function() {
    return this.getTypedRuleContext(SuperPropertyContext,0);
};
SuperExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperExpression(this);
	}
};

SuperExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperExpression(this);
	}
};


function IndexedMemberExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexedMemberExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
IndexedMemberExpressionContext.prototype.constructor = IndexedMemberExpressionContext;

ECMAScriptParser.IndexedMemberExpressionContext = IndexedMemberExpressionContext;

IndexedMemberExpressionContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

IndexedMemberExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

IndexedMemberExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IndexedMemberExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};
IndexedMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIndexedMemberExpression(this);
	}
};

IndexedMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIndexedMemberExpression(this);
	}
};


function IdExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
IdExpressionContext.prototype.constructor = IdExpressionContext;

ECMAScriptParser.IdExpressionContext = IdExpressionContext;

IdExpressionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};
IdExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdExpression(this);
	}
};

IdExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdExpression(this);
	}
};


function StringExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
StringExpressionContext.prototype.constructor = StringExpressionContext;

ECMAScriptParser.StringExpressionContext = StringExpressionContext;

StringExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};
StringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStringExpression(this);
	}
};

StringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStringExpression(this);
	}
};


function NumExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
NumExpressionContext.prototype.constructor = NumExpressionContext;

ECMAScriptParser.NumExpressionContext = NumExpressionContext;

NumExpressionContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};
NumExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNumExpression(this);
	}
};

NumExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNumExpression(this);
	}
};


function RegexpExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegexpExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
RegexpExpressionContext.prototype.constructor = RegexpExpressionContext;

ECMAScriptParser.RegexpExpressionContext = RegexpExpressionContext;

RegexpExpressionContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
};
RegexpExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRegexpExpression(this);
	}
};

RegexpExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRegexpExpression(this);
	}
};


function BitwiseXORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseXORExpressionContext.prototype.constructor = BitwiseXORExpressionContext;

ECMAScriptParser.BitwiseXORExpressionContext = BitwiseXORExpressionContext;

BitwiseXORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseXORExpressionContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptParser.BitXor, 0);
};
BitwiseXORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseXORExpression(this);
	}
};

BitwiseXORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseXORExpression(this);
	}
};


function LogicalANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalANDExpressionContext.prototype.constructor = LogicalANDExpressionContext;

ECMAScriptParser.LogicalANDExpressionContext = LogicalANDExpressionContext;

LogicalANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalANDExpressionContext.prototype.And = function() {
    return this.getToken(ECMAScriptParser.And, 0);
};
LogicalANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLogicalANDExpression(this);
	}
};

LogicalANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLogicalANDExpression(this);
	}
};


function NullExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
NullExpressionContext.prototype.constructor = NullExpressionContext;

ECMAScriptParser.NullExpressionContext = NullExpressionContext;

NullExpressionContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};
NullExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNullExpression(this);
	}
};

NullExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNullExpression(this);
	}
};


function UnaryExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

ECMAScriptParser.UnaryExpressionContext = UnaryExpressionContext;

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUnaryExpression(this);
	}
};


function InstanceOfExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
InstanceOfExpressionContext.prototype.constructor = InstanceOfExpressionContext;

ECMAScriptParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

InstanceOfExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

InstanceOfExpressionContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};
InstanceOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInstanceOfExpression(this);
	}
};

InstanceOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInstanceOfExpression(this);
	}
};


function BitwiseANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseANDExpressionContext.prototype.constructor = BitwiseANDExpressionContext;

ECMAScriptParser.BitwiseANDExpressionContext = BitwiseANDExpressionContext;

BitwiseANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseANDExpressionContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptParser.BitAnd, 0);
};
BitwiseANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseANDExpression(this);
	}
};

BitwiseANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseANDExpression(this);
	}
};


function FatArrowExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FatArrowExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
FatArrowExpressionContext.prototype.constructor = FatArrowExpressionContext;

ECMAScriptParser.FatArrowExpressionContext = FatArrowExpressionContext;

FatArrowExpressionContext.prototype.arrowParameters = function() {
    return this.getTypedRuleContext(ArrowParametersContext,0);
};

FatArrowExpressionContext.prototype.FatArrow = function() {
    return this.getToken(ECMAScriptParser.FatArrow, 0);
};

FatArrowExpressionContext.prototype.conciseBody = function() {
    return this.getTypedRuleContext(ConciseBodyContext,0);
};
FatArrowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFatArrowExpression(this);
	}
};

FatArrowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFatArrowExpression(this);
	}
};


function BoolExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoolExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BoolExpressionContext.prototype.constructor = BoolExpressionContext;

ECMAScriptParser.BoolExpressionContext = BoolExpressionContext;

BoolExpressionContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};
BoolExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBoolExpression(this);
	}
};

BoolExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBoolExpression(this);
	}
};


function ShiftExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ECMAScriptParser.ShiftExpressionContext = ShiftExpressionContext;

ShiftExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ShiftExpressionContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitShiftExpression(this);
	}
};


function ConditionalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ECMAScriptParser.ConditionalExpressionContext = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ConditionalExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptParser.QuestionMark, 0);
};

ConditionalExpressionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};
ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitConditionalExpression(this);
	}
};


function AssignExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignExpressionContext.prototype.constructor = AssignExpressionContext;

ECMAScriptParser.AssignExpressionContext = AssignExpressionContext;

AssignExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AssignExpressionContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};
AssignExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignExpression(this);
	}
};

AssignExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignExpression(this);
	}
};


function GenExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
GenExpressionContext.prototype.constructor = GenExpressionContext;

ECMAScriptParser.GenExpressionContext = GenExpressionContext;

GenExpressionContext.prototype.generatorExpression = function() {
    return this.getTypedRuleContext(GeneratorExpressionContext,0);
};
GenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGenExpression(this);
	}
};

GenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGenExpression(this);
	}
};


function ObjectLiteralExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

ECMAScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};
ObjectLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectLiteralExpression(this);
	}
};

ObjectLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectLiteralExpression(this);
	}
};


function MetaExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetaExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
MetaExpressionContext.prototype.constructor = MetaExpressionContext;

ECMAScriptParser.MetaExpressionContext = MetaExpressionContext;

MetaExpressionContext.prototype.metaProperty = function() {
    return this.getTypedRuleContext(MetaPropertyContext,0);
};
MetaExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMetaExpression(this);
	}
};

MetaExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMetaExpression(this);
	}
};


function MultiplicativeExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

ECMAScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};


function SuperExpressionExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
SuperExpressionExpressionContext.prototype.constructor = SuperExpressionExpressionContext;

ECMAScriptParser.SuperExpressionExpressionContext = SuperExpressionExpressionContext;

SuperExpressionExpressionContext.prototype.superCall = function() {
    return this.getTypedRuleContext(SuperCallContext,0);
};
SuperExpressionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperExpressionExpression(this);
	}
};

SuperExpressionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperExpressionExpression(this);
	}
};


function FuncExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
FuncExpressionContext.prototype.constructor = FuncExpressionContext;

ECMAScriptParser.FuncExpressionContext = FuncExpressionContext;

FuncExpressionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFuncExpression(this);
	}
};

FuncExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFuncExpression(this);
	}
};


function NewMemberExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewMemberExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
NewMemberExpressionContext.prototype.constructor = NewMemberExpressionContext;

ECMAScriptParser.NewMemberExpressionContext = NewMemberExpressionContext;

NewMemberExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

NewMemberExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

NewMemberExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
NewMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNewMemberExpression(this);
	}
};

NewMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNewMemberExpression(this);
	}
};


function DotMemberExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DotMemberExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
DotMemberExpressionContext.prototype.constructor = DotMemberExpressionContext;

ECMAScriptParser.DotMemberExpressionContext = DotMemberExpressionContext;

DotMemberExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

DotMemberExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

DotMemberExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};
DotMemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDotMemberExpression(this);
	}
};

DotMemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDotMemberExpression(this);
	}
};


function InExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

ECMAScriptParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

InExpressionContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};
InExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInExpression(this);
	}
};

InExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInExpression(this);
	}
};


function ArrayLiteralExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

ECMAScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};
ArrayLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayLiteralExpression(this);
	}
};

ArrayLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayLiteralExpression(this);
	}
};


function DestructuringExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DestructuringExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
DestructuringExpressionContext.prototype.constructor = DestructuringExpressionContext;

ECMAScriptParser.DestructuringExpressionContext = DestructuringExpressionContext;

DestructuringExpressionContext.prototype.assignmentPattern = function() {
    return this.getTypedRuleContext(AssignmentPatternContext,0);
};
DestructuringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDestructuringExpression(this);
	}
};

DestructuringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDestructuringExpression(this);
	}
};


function YieldExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

ECMAScriptParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

YieldExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
YieldExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterYieldExpression(this);
	}
};

YieldExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitYieldExpression(this);
	}
};


function ThisExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

ECMAScriptParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};
ThisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterThisExpression(this);
	}
};

ThisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitThisExpression(this);
	}
};


function EqualityExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ECMAScriptParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEqualityExpression(this);
	}
};


function UpdateExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UpdateExpressionContext.prototype.constructor = UpdateExpressionContext;

ECMAScriptParser.UpdateExpressionContext = UpdateExpressionContext;

UpdateExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

UpdateExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

UpdateExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};
UpdateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUpdateExpression(this);
	}
};

UpdateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUpdateExpression(this);
	}
};


function ExponentiationExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ExponentiationExpressionContext.prototype.constructor = ExponentiationExpressionContext;

ECMAScriptParser.ExponentiationExpressionContext = ExponentiationExpressionContext;

ExponentiationExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExponentiationExpressionContext.prototype.Power = function() {
    return this.getToken(ECMAScriptParser.Power, 0);
};
ExponentiationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExponentiationExpression(this);
	}
};

ExponentiationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExponentiationExpression(this);
	}
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

ECMAScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentOperatorExpression(this);
	}
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentOperatorExpression(this);
	}
};


function LogicalORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalORExpressionContext.prototype.constructor = LogicalORExpressionContext;

ECMAScriptParser.LogicalORExpressionContext = LogicalORExpressionContext;

LogicalORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalORExpressionContext.prototype.Or = function() {
    return this.getToken(ECMAScriptParser.Or, 0);
};
LogicalORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLogicalORExpression(this);
	}
};

LogicalORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLogicalORExpression(this);
	}
};



ECMAScriptParser.prototype.assignmentExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 92;
    this.enterRecursionRule(localctx, 92, ECMAScriptParser.RULE_assignmentExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 711;
            this.parenthesizedExpression();
            break;

        case 2:
            localctx = new FuncExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 712;
            this.functionExpression();
            break;

        case 3:
            localctx = new ClsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 713;
            this.classExpression();
            break;

        case 4:
            localctx = new GenExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 714;
            this.generatorExpression();
            break;

        case 5:
            localctx = new IndexedMemberExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 715;
            this.assignmentExpression_In(0);
            this.state = 716;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 717;
            this.expression();
            this.state = 718;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 6:
            localctx = new NewMemberExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 720;
            this.match(ECMAScriptParser.New);
            this.state = 721;
            this.assignmentExpression(0);
            this.state = 723;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 722;
                this.arguments();

            }
            break;

        case 7:
            localctx = new UnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 725;
            this.unaryOperator();
            this.state = 726;
            this.assignmentExpression(34);
            break;

        case 8:
            localctx = new YieldExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.canYield()
            this.state = 729;
            this.match(ECMAScriptParser.Yield);
            this.state = 730;
            this.assignmentExpression(17);
            break;

        case 9:
            localctx = new FatArrowExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 731;
            this.arrowParameters();
            this.state = 732;
            this.match(ECMAScriptParser.FatArrow);
            this.state = 733;
            this.conciseBody();
            break;

        case 10:
            localctx = new DestructuringExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 735;
            this.assignmentPattern();
            break;

        case 11:
            localctx = new SuperExpressionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 736;
            this.superCall();
            break;

        case 12:
            localctx = new SuperExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 737;
            this.superProperty();
            break;

        case 13:
            localctx = new MetaExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 738;
            this.metaProperty();
            break;

        case 14:
            localctx = new ThisExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 739;
            this.match(ECMAScriptParser.This);
            break;

        case 15:
            localctx = new IdExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 740;
            this.identifierReference();
            break;

        case 16:
            localctx = new NullExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 741;
            this.match(ECMAScriptParser.NullLiteral);
            break;

        case 17:
            localctx = new BoolExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 742;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;

        case 18:
            localctx = new NumExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 743;
            this.match(ECMAScriptParser.NumericLiteral);
            break;

        case 19:
            localctx = new StringExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 744;
            this.match(ECMAScriptParser.StringLiteral);
            break;

        case 20:
            localctx = new ArrayLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 745;
            this.arrayLiteral();
            break;

        case 21:
            localctx = new ObjectLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 746;
            this.objectLiteral();
            break;

        case 22:
            localctx = new RegexpExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 747;
            this.match(ECMAScriptParser.RegularExpressionLiteral);
            break;

        case 23:
            localctx = new TemplateExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 748;
            this.templateLiteral();
            break;

        case 24:
            localctx = new CoverExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 749;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 821;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 819;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 752;
                    if (!( this.precpred(this._ctx, 33))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                    }
                    this.state = 753;
                    this.match(ECMAScriptParser.Power);
                    this.state = 754;
                    this.assignmentExpression(34);
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 755;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 756;
                    this.multiplicativeOperator();
                    this.state = 757;
                    this.assignmentExpression(33);
                    break;

                case 3:
                    localctx = new AdditiveExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 759;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 760;
                    this.additiveOperator();
                    this.state = 761;
                    this.assignmentExpression(32);
                    break;

                case 4:
                    localctx = new ShiftExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 763;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 764;
                    this.shiftOperator();
                    this.state = 765;
                    this.assignmentExpression(31);
                    break;

                case 5:
                    localctx = new RelationalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 767;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 768;
                    this.relationalOperator();
                    this.state = 769;
                    this.assignmentExpression(30);
                    break;

                case 6:
                    localctx = new InExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 771;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 772;
                    this.match(ECMAScriptParser.In);
                    this.state = 773;
                    this.assignmentExpression(29);
                    break;

                case 7:
                    localctx = new InstanceOfExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 774;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 775;
                    this.match(ECMAScriptParser.Instanceof);
                    this.state = 776;
                    this.assignmentExpression(28);
                    break;

                case 8:
                    localctx = new EqualityExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 777;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 778;
                    this.equalityOperator();
                    this.state = 779;
                    this.assignmentExpression(27);
                    break;

                case 9:
                    localctx = new BitwiseANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 781;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 782;
                    this.match(ECMAScriptParser.BitAnd);
                    this.state = 783;
                    this.assignmentExpression(26);
                    break;

                case 10:
                    localctx = new BitwiseXORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 784;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 785;
                    this.match(ECMAScriptParser.BitXor);
                    this.state = 786;
                    this.assignmentExpression(25);
                    break;

                case 11:
                    localctx = new BitwiseORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 787;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 788;
                    this.match(ECMAScriptParser.BitOr);
                    this.state = 789;
                    this.assignmentExpression(24);
                    break;

                case 12:
                    localctx = new LogicalANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 790;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 791;
                    this.match(ECMAScriptParser.And);
                    this.state = 792;
                    this.assignmentExpression(23);
                    break;

                case 13:
                    localctx = new LogicalORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 793;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 794;
                    this.match(ECMAScriptParser.Or);
                    this.state = 795;
                    this.assignmentExpression(22);
                    break;

                case 14:
                    localctx = new ConditionalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 796;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 797;
                    this.match(ECMAScriptParser.QuestionMark);
                    this.state = 798;
                    this.assignmentExpression(0);
                    this.state = 799;
                    this.match(ECMAScriptParser.Colon);
                    this.state = 800;
                    this.assignmentExpression(21);
                    break;

                case 15:
                    localctx = new AssignExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 802;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 803;
                    this.match(ECMAScriptParser.Assign);
                    this.state = 804;
                    this.assignmentExpression(20);
                    break;

                case 16:
                    localctx = new AssignmentOperatorExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 805;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 806;
                    this.assignmentOperator();
                    this.state = 807;
                    this.assignmentExpression(19);
                    break;

                case 17:
                    localctx = new ArgumentsExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 809;
                    if (!( this.precpred(this._ctx, 40))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 40)");
                    }
                    this.state = 810;
                    this.arguments();
                    break;

                case 18:
                    localctx = new DotMemberExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 811;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 812;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 813;
                    this.identifierName();
                    break;

                case 19:
                    localctx = new TaggedTemplateExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 814;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 815;
                    this.templateLiteral();
                    break;

                case 20:
                    localctx = new UpdateExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression);
                    this.state = 816;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 817;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 818;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptParser.PlusPlus || _la===ECMAScriptParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 823;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AssignmentExpression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentExpression_In;
    return this;
}

AssignmentExpression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpression_InContext.prototype.constructor = AssignmentExpression_InContext;


 
AssignmentExpression_InContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalANDExpression_InContext.prototype.constructor = LogicalANDExpression_InContext;

ECMAScriptParser.LogicalANDExpression_InContext = LogicalANDExpression_InContext;

LogicalANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalANDExpression_InContext.prototype.And = function() {
    return this.getToken(ECMAScriptParser.And, 0);
};
LogicalANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLogicalANDExpression_In(this);
	}
};

LogicalANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLogicalANDExpression_In(this);
	}
};


function BitwiseANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseANDExpression_InContext.prototype.constructor = BitwiseANDExpression_InContext;

ECMAScriptParser.BitwiseANDExpression_InContext = BitwiseANDExpression_InContext;

BitwiseANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseANDExpression_InContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptParser.BitAnd, 0);
};
BitwiseANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseANDExpression_In(this);
	}
};

BitwiseANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseANDExpression_In(this);
	}
};


function ArrowFunction_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFunction_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ArrowFunction_InContext.prototype.constructor = ArrowFunction_InContext;

ECMAScriptParser.ArrowFunction_InContext = ArrowFunction_InContext;

ArrowFunction_InContext.prototype.arrowParameters = function() {
    return this.getTypedRuleContext(ArrowParametersContext,0);
};

ArrowFunction_InContext.prototype.FatArrow = function() {
    return this.getToken(ECMAScriptParser.FatArrow, 0);
};

ArrowFunction_InContext.prototype.conciseBody_In = function() {
    return this.getTypedRuleContext(ConciseBody_InContext,0);
};
ArrowFunction_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrowFunction_In(this);
	}
};

ArrowFunction_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrowFunction_In(this);
	}
};


function ClsExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClsExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ClsExpression_InContext.prototype.constructor = ClsExpression_InContext;

ECMAScriptParser.ClsExpression_InContext = ClsExpression_InContext;

ClsExpression_InContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};
ClsExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClsExpression_In(this);
	}
};

ClsExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClsExpression_In(this);
	}
};


function BitwiseORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseORExpression_InContext.prototype.constructor = BitwiseORExpression_InContext;

ECMAScriptParser.BitwiseORExpression_InContext = BitwiseORExpression_InContext;

BitwiseORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseORExpression_InContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptParser.BitOr, 0);
};
BitwiseORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseORExpression_In(this);
	}
};

BitwiseORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseORExpression_In(this);
	}
};


function ConditionalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ConditionalExpression_InContext.prototype.constructor = ConditionalExpression_InContext;

ECMAScriptParser.ConditionalExpression_InContext = ConditionalExpression_InContext;

ConditionalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ConditionalExpression_InContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptParser.QuestionMark, 0);
};

ConditionalExpression_InContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};
ConditionalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterConditionalExpression_In(this);
	}
};

ConditionalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitConditionalExpression_In(this);
	}
};


function ParenExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ParenExpression_InContext.prototype.constructor = ParenExpression_InContext;

ECMAScriptParser.ParenExpression_InContext = ParenExpression_InContext;

ParenExpression_InContext.prototype.parenthesizedExpression = function() {
    return this.getTypedRuleContext(ParenthesizedExpressionContext,0);
};
ParenExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterParenExpression_In(this);
	}
};

ParenExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitParenExpression_In(this);
	}
};


function AdditiveExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AdditiveExpression_InContext.prototype.constructor = AdditiveExpression_InContext;

ECMAScriptParser.AdditiveExpression_InContext = AdditiveExpression_InContext;

AdditiveExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AdditiveExpression_InContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAdditiveExpression_In(this);
	}
};

AdditiveExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAdditiveExpression_In(this);
	}
};


function RelationalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
RelationalExpression_InContext.prototype.constructor = RelationalExpression_InContext;

ECMAScriptParser.RelationalExpression_InContext = RelationalExpression_InContext;

RelationalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

RelationalExpression_InContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRelationalExpression_In(this);
	}
};

RelationalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRelationalExpression_In(this);
	}
};


function AssignmentOperatorExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignmentOperatorExpression_InContext.prototype.constructor = AssignmentOperatorExpression_InContext;

ECMAScriptParser.AssignmentOperatorExpression_InContext = AssignmentOperatorExpression_InContext;

AssignmentOperatorExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AssignmentOperatorExpression_InContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentOperatorExpression_In(this);
	}
};

AssignmentOperatorExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentOperatorExpression_In(this);
	}
};


function DestructuringExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DestructuringExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
DestructuringExpression_InContext.prototype.constructor = DestructuringExpression_InContext;

ECMAScriptParser.DestructuringExpression_InContext = DestructuringExpression_InContext;

DestructuringExpression_InContext.prototype.assignmentPattern = function() {
    return this.getTypedRuleContext(AssignmentPatternContext,0);
};
DestructuringExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDestructuringExpression_In(this);
	}
};

DestructuringExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDestructuringExpression_In(this);
	}
};


function ThisExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ThisExpression_InContext.prototype.constructor = ThisExpression_InContext;

ECMAScriptParser.ThisExpression_InContext = ThisExpression_InContext;

ThisExpression_InContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};
ThisExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterThisExpression_In(this);
	}
};

ThisExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitThisExpression_In(this);
	}
};


function InExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InExpression_InContext.prototype.constructor = InExpression_InContext;

ECMAScriptParser.InExpression_InContext = InExpression_InContext;

InExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InExpression_InContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};
InExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInExpression_In(this);
	}
};

InExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInExpression_In(this);
	}
};


function DotMemberExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DotMemberExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
DotMemberExpression_InContext.prototype.constructor = DotMemberExpression_InContext;

ECMAScriptParser.DotMemberExpression_InContext = DotMemberExpression_InContext;

DotMemberExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

DotMemberExpression_InContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

DotMemberExpression_InContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};
DotMemberExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDotMemberExpression_In(this);
	}
};

DotMemberExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDotMemberExpression_In(this);
	}
};


function SuperExpressionExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
SuperExpressionExpression_InContext.prototype.constructor = SuperExpressionExpression_InContext;

ECMAScriptParser.SuperExpressionExpression_InContext = SuperExpressionExpression_InContext;

SuperExpressionExpression_InContext.prototype.superCall = function() {
    return this.getTypedRuleContext(SuperCallContext,0);
};
SuperExpressionExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperExpressionExpression_In(this);
	}
};

SuperExpressionExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperExpressionExpression_In(this);
	}
};


function ShiftExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ShiftExpression_InContext.prototype.constructor = ShiftExpression_InContext;

ECMAScriptParser.ShiftExpression_InContext = ShiftExpression_InContext;

ShiftExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ShiftExpression_InContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterShiftExpression_In(this);
	}
};

ShiftExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitShiftExpression_In(this);
	}
};


function ArgumentsExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentsExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ArgumentsExpression_InContext.prototype.constructor = ArgumentsExpression_InContext;

ECMAScriptParser.ArgumentsExpression_InContext = ArgumentsExpression_InContext;

ArgumentsExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ArgumentsExpression_InContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ArgumentsExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArgumentsExpression_In(this);
	}
};

ArgumentsExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArgumentsExpression_In(this);
	}
};


function RegexpExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegexpExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
RegexpExpression_InContext.prototype.constructor = RegexpExpression_InContext;

ECMAScriptParser.RegexpExpression_InContext = RegexpExpression_InContext;

RegexpExpression_InContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
};
RegexpExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRegexpExpression_In(this);
	}
};

RegexpExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRegexpExpression_In(this);
	}
};


function CoverExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
CoverExpression_InContext.prototype.constructor = CoverExpression_InContext;

ECMAScriptParser.CoverExpression_InContext = CoverExpression_InContext;

CoverExpression_InContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};
CoverExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverExpression_In(this);
	}
};

CoverExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverExpression_In(this);
	}
};


function BitwiseXORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseXORExpression_InContext.prototype.constructor = BitwiseXORExpression_InContext;

ECMAScriptParser.BitwiseXORExpression_InContext = BitwiseXORExpression_InContext;

BitwiseXORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseXORExpression_InContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptParser.BitXor, 0);
};
BitwiseXORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBitwiseXORExpression_In(this);
	}
};

BitwiseXORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBitwiseXORExpression_In(this);
	}
};


function BoolExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoolExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BoolExpression_InContext.prototype.constructor = BoolExpression_InContext;

ECMAScriptParser.BoolExpression_InContext = BoolExpression_InContext;

BoolExpression_InContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};
BoolExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBoolExpression_In(this);
	}
};

BoolExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBoolExpression_In(this);
	}
};


function UpdateExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UpdateExpression_InContext.prototype.constructor = UpdateExpression_InContext;

ECMAScriptParser.UpdateExpression_InContext = UpdateExpression_InContext;

UpdateExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

UpdateExpression_InContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

UpdateExpression_InContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};
UpdateExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUpdateExpression_In(this);
	}
};

UpdateExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUpdateExpression_In(this);
	}
};


function FuncExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
FuncExpression_InContext.prototype.constructor = FuncExpression_InContext;

ECMAScriptParser.FuncExpression_InContext = FuncExpression_InContext;

FuncExpression_InContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFuncExpression_In(this);
	}
};

FuncExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFuncExpression_In(this);
	}
};


function EqualityExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
EqualityExpression_InContext.prototype.constructor = EqualityExpression_InContext;

ECMAScriptParser.EqualityExpression_InContext = EqualityExpression_InContext;

EqualityExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

EqualityExpression_InContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEqualityExpression_In(this);
	}
};

EqualityExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEqualityExpression_In(this);
	}
};


function IndexedMemberExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexedMemberExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
IndexedMemberExpression_InContext.prototype.constructor = IndexedMemberExpression_InContext;

ECMAScriptParser.IndexedMemberExpression_InContext = IndexedMemberExpression_InContext;

IndexedMemberExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

IndexedMemberExpression_InContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

IndexedMemberExpression_InContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

IndexedMemberExpression_InContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};
IndexedMemberExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIndexedMemberExpression_In(this);
	}
};

IndexedMemberExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIndexedMemberExpression_In(this);
	}
};


function MultiplicativeExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
MultiplicativeExpression_InContext.prototype.constructor = MultiplicativeExpression_InContext;

ECMAScriptParser.MultiplicativeExpression_InContext = MultiplicativeExpression_InContext;

MultiplicativeExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

MultiplicativeExpression_InContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMultiplicativeExpression_In(this);
	}
};

MultiplicativeExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMultiplicativeExpression_In(this);
	}
};


function SuperExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
SuperExpression_InContext.prototype.constructor = SuperExpression_InContext;

ECMAScriptParser.SuperExpression_InContext = SuperExpression_InContext;

SuperExpression_InContext.prototype.superProperty = function() {
    return this.getTypedRuleContext(SuperPropertyContext,0);
};
SuperExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSuperExpression_In(this);
	}
};

SuperExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSuperExpression_In(this);
	}
};


function ObjectLiteralExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectLiteralExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ObjectLiteralExpression_InContext.prototype.constructor = ObjectLiteralExpression_InContext;

ECMAScriptParser.ObjectLiteralExpression_InContext = ObjectLiteralExpression_InContext;

ObjectLiteralExpression_InContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};
ObjectLiteralExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectLiteralExpression_In(this);
	}
};

ObjectLiteralExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectLiteralExpression_In(this);
	}
};


function ExponentiationExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ExponentiationExpression_InContext.prototype.constructor = ExponentiationExpression_InContext;

ECMAScriptParser.ExponentiationExpression_InContext = ExponentiationExpression_InContext;

ExponentiationExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ExponentiationExpression_InContext.prototype.Power = function() {
    return this.getToken(ECMAScriptParser.Power, 0);
};
ExponentiationExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExponentiationExpression_In(this);
	}
};

ExponentiationExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExponentiationExpression_In(this);
	}
};


function GenExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
GenExpression_InContext.prototype.constructor = GenExpression_InContext;

ECMAScriptParser.GenExpression_InContext = GenExpression_InContext;

GenExpression_InContext.prototype.generatorExpression = function() {
    return this.getTypedRuleContext(GeneratorExpressionContext,0);
};
GenExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGenExpression_In(this);
	}
};

GenExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGenExpression_In(this);
	}
};


function NumExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
NumExpression_InContext.prototype.constructor = NumExpression_InContext;

ECMAScriptParser.NumExpression_InContext = NumExpression_InContext;

NumExpression_InContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};
NumExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNumExpression_In(this);
	}
};

NumExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNumExpression_In(this);
	}
};


function AssignExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignExpression_InContext.prototype.constructor = AssignExpression_InContext;

ECMAScriptParser.AssignExpression_InContext = AssignExpression_InContext;

AssignExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AssignExpression_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};
AssignExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignExpression_In(this);
	}
};

AssignExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignExpression_In(this);
	}
};


function NewMemberExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewMemberExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
NewMemberExpression_InContext.prototype.constructor = NewMemberExpression_InContext;

ECMAScriptParser.NewMemberExpression_InContext = NewMemberExpression_InContext;

NewMemberExpression_InContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

NewMemberExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

NewMemberExpression_InContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
NewMemberExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNewMemberExpression_In(this);
	}
};

NewMemberExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNewMemberExpression_In(this);
	}
};


function StringExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
StringExpression_InContext.prototype.constructor = StringExpression_InContext;

ECMAScriptParser.StringExpression_InContext = StringExpression_InContext;

StringExpression_InContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};
StringExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStringExpression_In(this);
	}
};

StringExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStringExpression_In(this);
	}
};


function InstanceOfExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InstanceOfExpression_InContext.prototype.constructor = InstanceOfExpression_InContext;

ECMAScriptParser.InstanceOfExpression_InContext = InstanceOfExpression_InContext;

InstanceOfExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InstanceOfExpression_InContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};
InstanceOfExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInstanceOfExpression_In(this);
	}
};

InstanceOfExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInstanceOfExpression_In(this);
	}
};


function LogicalORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalORExpression_InContext.prototype.constructor = LogicalORExpression_InContext;

ECMAScriptParser.LogicalORExpression_InContext = LogicalORExpression_InContext;

LogicalORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalORExpression_InContext.prototype.Or = function() {
    return this.getToken(ECMAScriptParser.Or, 0);
};
LogicalORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLogicalORExpression_In(this);
	}
};

LogicalORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLogicalORExpression_In(this);
	}
};


function YieldExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
YieldExpression_InContext.prototype.constructor = YieldExpression_InContext;

ECMAScriptParser.YieldExpression_InContext = YieldExpression_InContext;

YieldExpression_InContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

YieldExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
YieldExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterYieldExpression_In(this);
	}
};

YieldExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitYieldExpression_In(this);
	}
};


function NullExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
NullExpression_InContext.prototype.constructor = NullExpression_InContext;

ECMAScriptParser.NullExpression_InContext = NullExpression_InContext;

NullExpression_InContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};
NullExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNullExpression_In(this);
	}
};

NullExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNullExpression_In(this);
	}
};


function TaggedTemplateExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TaggedTemplateExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
TaggedTemplateExpression_InContext.prototype.constructor = TaggedTemplateExpression_InContext;

ECMAScriptParser.TaggedTemplateExpression_InContext = TaggedTemplateExpression_InContext;

TaggedTemplateExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

TaggedTemplateExpression_InContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};
TaggedTemplateExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTaggedTemplateExpression_In(this);
	}
};

TaggedTemplateExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTaggedTemplateExpression_In(this);
	}
};


function MetaExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetaExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
MetaExpression_InContext.prototype.constructor = MetaExpression_InContext;

ECMAScriptParser.MetaExpression_InContext = MetaExpression_InContext;

MetaExpression_InContext.prototype.metaProperty = function() {
    return this.getTypedRuleContext(MetaPropertyContext,0);
};
MetaExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMetaExpression_In(this);
	}
};

MetaExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMetaExpression_In(this);
	}
};


function TemplateExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemplateExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
TemplateExpression_InContext.prototype.constructor = TemplateExpression_InContext;

ECMAScriptParser.TemplateExpression_InContext = TemplateExpression_InContext;

TemplateExpression_InContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};
TemplateExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTemplateExpression_In(this);
	}
};

TemplateExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTemplateExpression_In(this);
	}
};


function IdExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
IdExpression_InContext.prototype.constructor = IdExpression_InContext;

ECMAScriptParser.IdExpression_InContext = IdExpression_InContext;

IdExpression_InContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};
IdExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdExpression_In(this);
	}
};

IdExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdExpression_In(this);
	}
};


function UnaryExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UnaryExpression_InContext.prototype.constructor = UnaryExpression_InContext;

ECMAScriptParser.UnaryExpression_InContext = UnaryExpression_InContext;

UnaryExpression_InContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
UnaryExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUnaryExpression_In(this);
	}
};

UnaryExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUnaryExpression_In(this);
	}
};


function ArrayLiteralExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayLiteralExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ArrayLiteralExpression_InContext.prototype.constructor = ArrayLiteralExpression_InContext;

ECMAScriptParser.ArrayLiteralExpression_InContext = ArrayLiteralExpression_InContext;

ArrayLiteralExpression_InContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};
ArrayLiteralExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayLiteralExpression_In(this);
	}
};

ArrayLiteralExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayLiteralExpression_In(this);
	}
};



ECMAScriptParser.prototype.assignmentExpression_In = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpression_InContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 94;
    this.enterRecursionRule(localctx, 94, ECMAScriptParser.RULE_assignmentExpression_In, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ParenExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 825;
            this.parenthesizedExpression();
            break;

        case 2:
            localctx = new FuncExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 826;
            this.functionExpression();
            break;

        case 3:
            localctx = new ClsExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 827;
            this.classExpression();
            break;

        case 4:
            localctx = new GenExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 828;
            this.generatorExpression();
            break;

        case 5:
            localctx = new NewMemberExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 829;
            this.match(ECMAScriptParser.New);
            this.state = 830;
            this.assignmentExpression_In(0);
            this.state = 832;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
            if(la_===1) {
                this.state = 831;
                this.arguments();

            }
            break;

        case 6:
            localctx = new UnaryExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 834;
            this.unaryOperator();
            this.state = 835;
            this.assignmentExpression_In(34);
            break;

        case 7:
            localctx = new ArrowFunction_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 837;
            this.arrowParameters();
            this.state = 838;
            this.match(ECMAScriptParser.FatArrow);
            this.state = 839;
            this.conciseBody_In();
            break;

        case 8:
            localctx = new YieldExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.canYield()
            this.state = 842;
            this.match(ECMAScriptParser.Yield);
            this.state = 843;
            this.assignmentExpression_In(16);
            break;

        case 9:
            localctx = new DestructuringExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 844;
            this.assignmentPattern();
            break;

        case 10:
            localctx = new SuperExpressionExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 845;
            this.superCall();
            break;

        case 11:
            localctx = new SuperExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 846;
            this.superProperty();
            break;

        case 12:
            localctx = new MetaExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 847;
            this.metaProperty();
            break;

        case 13:
            localctx = new ThisExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 848;
            this.match(ECMAScriptParser.This);
            break;

        case 14:
            localctx = new IdExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 849;
            this.identifierReference();
            break;

        case 15:
            localctx = new NullExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 850;
            this.match(ECMAScriptParser.NullLiteral);
            break;

        case 16:
            localctx = new BoolExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 851;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;

        case 17:
            localctx = new NumExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 852;
            this.match(ECMAScriptParser.NumericLiteral);
            break;

        case 18:
            localctx = new StringExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 853;
            this.match(ECMAScriptParser.StringLiteral);
            break;

        case 19:
            localctx = new ArrayLiteralExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 854;
            this.arrayLiteral();
            break;

        case 20:
            localctx = new ObjectLiteralExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 855;
            this.objectLiteral();
            break;

        case 21:
            localctx = new RegexpExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 856;
            this.match(ECMAScriptParser.RegularExpressionLiteral);
            break;

        case 22:
            localctx = new TemplateExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 857;
            this.templateLiteral();
            break;

        case 23:
            localctx = new CoverExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 858;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 935;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 933;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 861;
                    if (!( this.precpred(this._ctx, 33))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                    }
                    this.state = 862;
                    this.match(ECMAScriptParser.Power);
                    this.state = 863;
                    this.assignmentExpression_In(34);
                    break;

                case 2:
                    localctx = new MultiplicativeExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 864;
                    if (!( this.precpred(this._ctx, 32))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                    }
                    this.state = 865;
                    this.multiplicativeOperator();
                    this.state = 866;
                    this.assignmentExpression_In(33);
                    break;

                case 3:
                    localctx = new AdditiveExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 868;
                    if (!( this.precpred(this._ctx, 31))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                    }
                    this.state = 869;
                    this.additiveOperator();
                    this.state = 870;
                    this.assignmentExpression_In(32);
                    break;

                case 4:
                    localctx = new ShiftExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 872;
                    if (!( this.precpred(this._ctx, 30))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                    }
                    this.state = 873;
                    this.shiftOperator();
                    this.state = 874;
                    this.assignmentExpression_In(31);
                    break;

                case 5:
                    localctx = new RelationalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 876;
                    if (!( this.precpred(this._ctx, 29))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                    }
                    this.state = 877;
                    this.relationalOperator();
                    this.state = 878;
                    this.assignmentExpression_In(30);
                    break;

                case 6:
                    localctx = new InExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 880;
                    if (!( this.precpred(this._ctx, 28))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                    }
                    this.state = 881;
                    this.match(ECMAScriptParser.In);
                    this.state = 882;
                    this.assignmentExpression_In(29);
                    break;

                case 7:
                    localctx = new InstanceOfExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 883;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 884;
                    this.match(ECMAScriptParser.Instanceof);
                    this.state = 885;
                    this.assignmentExpression_In(28);
                    break;

                case 8:
                    localctx = new EqualityExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 886;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 887;
                    this.equalityOperator();
                    this.state = 888;
                    this.assignmentExpression_In(27);
                    break;

                case 9:
                    localctx = new BitwiseANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 890;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 891;
                    this.match(ECMAScriptParser.BitAnd);
                    this.state = 892;
                    this.assignmentExpression_In(26);
                    break;

                case 10:
                    localctx = new BitwiseXORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 893;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 894;
                    this.match(ECMAScriptParser.BitXor);
                    this.state = 895;
                    this.assignmentExpression_In(25);
                    break;

                case 11:
                    localctx = new BitwiseORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 896;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 897;
                    this.match(ECMAScriptParser.BitOr);
                    this.state = 898;
                    this.assignmentExpression_In(24);
                    break;

                case 12:
                    localctx = new LogicalANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 899;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 900;
                    this.match(ECMAScriptParser.And);
                    this.state = 901;
                    this.assignmentExpression_In(23);
                    break;

                case 13:
                    localctx = new LogicalORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 902;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 903;
                    this.match(ECMAScriptParser.Or);
                    this.state = 904;
                    this.assignmentExpression_In(22);
                    break;

                case 14:
                    localctx = new ConditionalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 905;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 906;
                    this.match(ECMAScriptParser.QuestionMark);
                    this.state = 907;
                    this.assignmentExpression_In(0);
                    this.state = 908;
                    this.match(ECMAScriptParser.Colon);
                    this.state = 909;
                    this.assignmentExpression_In(21);
                    break;

                case 15:
                    localctx = new AssignExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 911;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 912;
                    this.match(ECMAScriptParser.Assign);
                    this.state = 913;
                    this.assignmentExpression_In(19);
                    break;

                case 16:
                    localctx = new AssignmentOperatorExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 914;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 915;
                    this.assignmentOperator();
                    this.state = 916;
                    this.assignmentExpression_In(18);
                    break;

                case 17:
                    localctx = new ArgumentsExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 918;
                    if (!( this.precpred(this._ctx, 40))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 40)");
                    }
                    this.state = 919;
                    this.arguments();
                    break;

                case 18:
                    localctx = new IndexedMemberExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 920;
                    if (!( this.precpred(this._ctx, 39))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
                    }
                    this.state = 921;
                    this.match(ECMAScriptParser.OpenBracket);
                    this.state = 922;
                    this.expression_In();
                    this.state = 923;
                    this.match(ECMAScriptParser.CloseBracket);
                    break;

                case 19:
                    localctx = new DotMemberExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 925;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 926;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 927;
                    this.identifierName();
                    break;

                case 20:
                    localctx = new TaggedTemplateExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 928;
                    if (!( this.precpred(this._ctx, 37))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                    }
                    this.state = 929;
                    this.templateLiteral();
                    break;

                case 21:
                    localctx = new UpdateExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_assignmentExpression_In);
                    this.state = 930;
                    if (!( this.precpred(this._ctx, 35))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                    }
                    this.state = 931;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 932;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptParser.PlusPlus || _la===ECMAScriptParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 937;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

UnaryOperatorContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

UnaryOperatorContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

UnaryOperatorContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

UnaryOperatorContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};

UnaryOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

UnaryOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};

UnaryOperatorContext.prototype.BitNot = function() {
    return this.getToken(ECMAScriptParser.BitNot, 0);
};

UnaryOperatorContext.prototype.Not = function() {
    return this.getToken(ECMAScriptParser.Not, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUnaryOperator(this);
	}
};




ECMAScriptParser.UnaryOperatorContext = UnaryOperatorContext;

ECMAScriptParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECMAScriptParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        _la = this._input.LA(1);
        if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (ECMAScriptParser.Plus - 29)) | (1 << (ECMAScriptParser.Minus - 29)) | (1 << (ECMAScriptParser.PlusPlus - 29)) | (1 << (ECMAScriptParser.MinusMinus - 29)) | (1 << (ECMAScriptParser.Not - 29)) | (1 << (ECMAScriptParser.BitNot - 29)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (ECMAScriptParser.Delete - 74)) | (1 << (ECMAScriptParser.Typeof - 74)) | (1 << (ECMAScriptParser.Void - 74)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_multiplicativeOperator;
    return this;
}

MultiplicativeOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeOperatorContext.prototype.constructor = MultiplicativeOperatorContext;

MultiplicativeOperatorContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

MultiplicativeOperatorContext.prototype.Divide = function() {
    return this.getToken(ECMAScriptParser.Divide, 0);
};

MultiplicativeOperatorContext.prototype.Modulo = function() {
    return this.getToken(ECMAScriptParser.Modulo, 0);
};

MultiplicativeOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMultiplicativeOperator(this);
	}
};

MultiplicativeOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMultiplicativeOperator(this);
	}
};




ECMAScriptParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext;

ECMAScriptParser.prototype.multiplicativeOperator = function() {

    var localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECMAScriptParser.RULE_multiplicativeOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 940;
        _la = this._input.LA(1);
        if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (ECMAScriptParser.Multiply - 31)) | (1 << (ECMAScriptParser.Modulo - 31)) | (1 << (ECMAScriptParser.Divide - 31)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_additiveOperator;
    return this;
}

AdditiveOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveOperatorContext.prototype.constructor = AdditiveOperatorContext;

AdditiveOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

AdditiveOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};

AdditiveOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAdditiveOperator(this);
	}
};

AdditiveOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAdditiveOperator(this);
	}
};




ECMAScriptParser.AdditiveOperatorContext = AdditiveOperatorContext;

ECMAScriptParser.prototype.additiveOperator = function() {

    var localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ECMAScriptParser.RULE_additiveOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptParser.Plus || _la===ECMAScriptParser.Minus)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShiftOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_shiftOperator;
    return this;
}

ShiftOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftOperatorContext.prototype.constructor = ShiftOperatorContext;

ShiftOperatorContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftLogical = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogical, 0);
};

ShiftOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterShiftOperator(this);
	}
};

ShiftOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitShiftOperator(this);
	}
};




ECMAScriptParser.ShiftOperatorContext = ShiftOperatorContext;

ECMAScriptParser.prototype.shiftOperator = function() {

    var localctx = new ShiftOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ECMAScriptParser.RULE_shiftOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 944;
        _la = this._input.LA(1);
        if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (ECMAScriptParser.LeftShiftArithmetic - 36)) | (1 << (ECMAScriptParser.RightShiftArithmetic - 36)) | (1 << (ECMAScriptParser.RightShiftLogical - 36)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_relationalOperator;
    return this;
}

RelationalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalOperatorContext.prototype.constructor = RelationalOperatorContext;

RelationalOperatorContext.prototype.LessThan = function() {
    return this.getToken(ECMAScriptParser.LessThan, 0);
};

RelationalOperatorContext.prototype.GreaterThan = function() {
    return this.getToken(ECMAScriptParser.GreaterThan, 0);
};

RelationalOperatorContext.prototype.LessThanEquals = function() {
    return this.getToken(ECMAScriptParser.LessThanEquals, 0);
};

RelationalOperatorContext.prototype.GreaterThanEquals = function() {
    return this.getToken(ECMAScriptParser.GreaterThanEquals, 0);
};

RelationalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRelationalOperator(this);
	}
};

RelationalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRelationalOperator(this);
	}
};




ECMAScriptParser.RelationalOperatorContext = RelationalOperatorContext;

ECMAScriptParser.prototype.relationalOperator = function() {

    var localctx = new RelationalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ECMAScriptParser.RULE_relationalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.LessThan) | (1 << ECMAScriptParser.GreaterThan) | (1 << ECMAScriptParser.LessThanEquals) | (1 << ECMAScriptParser.GreaterThanEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_equalityOperator;
    return this;
}

EqualityOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityOperatorContext.prototype.constructor = EqualityOperatorContext;

EqualityOperatorContext.prototype.Equals = function() {
    return this.getToken(ECMAScriptParser.Equals, 0);
};

EqualityOperatorContext.prototype.NotEquals = function() {
    return this.getToken(ECMAScriptParser.NotEquals, 0);
};

EqualityOperatorContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityEquals, 0);
};

EqualityOperatorContext.prototype.IdentityNotEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityNotEquals, 0);
};

EqualityOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEqualityOperator(this);
	}
};

EqualityOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEqualityOperator(this);
	}
};




ECMAScriptParser.EqualityOperatorContext = EqualityOperatorContext;

ECMAScriptParser.prototype.equalityOperator = function() {

    var localctx = new EqualityOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ECMAScriptParser.RULE_equalityOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.Equals) | (1 << ECMAScriptParser.NotEquals) | (1 << ECMAScriptParser.IdentityEquals) | (1 << ECMAScriptParser.IdentityNotEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(ECMAScriptParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(ECMAScriptParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(ECMAScriptParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(ECMAScriptParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModuloAssign = function() {
    return this.getToken(ECMAScriptParser.ModuloAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(ECMAScriptParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(ECMAScriptParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(ECMAScriptParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(ECMAScriptParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ECMAScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;

ECMAScriptParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ECMAScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        _la = this._input.LA(1);
        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (ECMAScriptParser.PlusAssign - 49)) | (1 << (ECMAScriptParser.MinusAssign - 49)) | (1 << (ECMAScriptParser.MultiplyAssign - 49)) | (1 << (ECMAScriptParser.ModuloAssign - 49)) | (1 << (ECMAScriptParser.PowerAssign - 49)) | (1 << (ECMAScriptParser.LeftShiftArithmeticAssign - 49)) | (1 << (ECMAScriptParser.RightShiftArithmeticAssign - 49)) | (1 << (ECMAScriptParser.RightShiftLogicalAssign - 49)) | (1 << (ECMAScriptParser.BitAndAssign - 49)) | (1 << (ECMAScriptParser.BitOrAssign - 49)) | (1 << (ECMAScriptParser.BitXorAssign - 49)) | (1 << (ECMAScriptParser.DivideAssign - 49)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.breakableStatement = function() {
    return this.getTypedRuleContext(BreakableStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatement(this);
	}
};




ECMAScriptParser.StatementContext = StatementContext;

ECMAScriptParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ECMAScriptParser.RULE_statement);
    try {
        this.state = 967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 952;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 953;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 954;
            this.emptyStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 955;
            this.expressionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 956;
            this.ifStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 957;
            this.breakableStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 958;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 959;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 960;
            if (!( this.canReturn())) {
                throw new antlr4.error.FailedPredicateException(this, "this.canReturn()");
            }
            this.state = 961;
            this.returnStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 962;
            this.withStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 963;
            this.labelledStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 964;
            this.throwStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 965;
            this.tryStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 966;
            this.debuggerStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statementListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItemContext);
    } else {
        return this.getTypedRuleContext(StatementListItemContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatementList(this);
	}
};




ECMAScriptParser.StatementListContext = StatementListContext;

ECMAScriptParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECMAScriptParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 970; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 969;
        		this.statementListItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 972; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,66, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statementListItem;
    return this;
}

StatementListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatementListItem(this);
	}
};




ECMAScriptParser.StatementListItemContext = StatementListItemContext;

ECMAScriptParser.prototype.statementListItem = function() {

    var localctx = new StatementListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ECMAScriptParser.RULE_statementListItem);
    try {
        this.state = 976;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 974;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 975;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEmptyStatement(this);
	}
};




ECMAScriptParser.EmptyStatementContext = EmptyStatementContext;

ECMAScriptParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECMAScriptParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 978;
        this.match(ECMAScriptParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitReturnStatement(this);
	}
};




ECMAScriptParser.ReturnStatementContext = ReturnStatementContext;

ECMAScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECMAScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 980;
        this.match(ECMAScriptParser.Return);
        this.state = 982;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 981;
            this.expression_In();

        }
        this.state = 984;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDebuggerStatement(this);
	}
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDebuggerStatement(this);
	}
};




ECMAScriptParser.DebuggerStatementContext = DebuggerStatementContext;

ECMAScriptParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECMAScriptParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.match(ECMAScriptParser.Debugger);
        this.state = 987;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpressionStatement(this);
	}
};




ECMAScriptParser.ExpressionStatementContext = ExpressionStatementContext;

ECMAScriptParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECMAScriptParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 989;
        if (!( this.isValidExpressionStatement())) {
            throw new antlr4.error.FailedPredicateException(this, "this.isValidExpressionStatement()");
        }
        this.state = 990;
        this.expression_In();
        this.state = 991;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElementList;
    return this;
}

BindingElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementListContext.prototype.constructor = BindingElementListContext;

BindingElementListContext.prototype.bindingElisionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingElisionElementContext);
    } else {
        return this.getTypedRuleContext(BindingElisionElementContext,i);
    }
};

BindingElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElementList(this);
	}
};

BindingElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElementList(this);
	}
};




ECMAScriptParser.BindingElementListContext = BindingElementListContext;

ECMAScriptParser.prototype.bindingElementList = function() {

    var localctx = new BindingElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECMAScriptParser.RULE_bindingElementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.bindingElisionElement();
        this.state = 998;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 994;
                this.match(ECMAScriptParser.Comma);
                this.state = 995;
                this.bindingElisionElement(); 
            }
            this.state = 1000;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElisionElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElisionElement;
    return this;
}

BindingElisionElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElisionElementContext.prototype.constructor = BindingElisionElementContext;

BindingElisionElementContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

BindingElisionElementContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

BindingElisionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElisionElement(this);
	}
};

BindingElisionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElisionElement(this);
	}
};




ECMAScriptParser.BindingElisionElementContext = BindingElisionElementContext;

ECMAScriptParser.prototype.bindingElisionElement = function() {

    var localctx = new BindingElisionElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECMAScriptParser.RULE_bindingElisionElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Comma) {
            this.state = 1001;
            this.elision();
        }

        this.state = 1004;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElement;
    return this;
}

BindingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementContext.prototype.constructor = BindingElementContext;

BindingElementContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingElementContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

BindingElementContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

BindingElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElement(this);
	}
};

BindingElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElement(this);
	}
};




ECMAScriptParser.BindingElementContext = BindingElementContext;

ECMAScriptParser.prototype.bindingElement = function() {

    var localctx = new BindingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECMAScriptParser.RULE_bindingElement);
    var _la = 0; // Token type
    try {
        this.state = 1011;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1006;
            this.singleNameBinding();
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1007;
            this.bindingPattern();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Assign) {
                this.state = 1008;
                this.initializer_In();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingRestElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingRestElement;
    return this;
}

BindingRestElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingRestElementContext.prototype.constructor = BindingRestElementContext;

BindingRestElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

BindingRestElementContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

BindingRestElementContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

BindingRestElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingRestElement(this);
	}
};

BindingRestElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingRestElement(this);
	}
};




ECMAScriptParser.BindingRestElementContext = BindingRestElementContext;

ECMAScriptParser.prototype.bindingRestElement = function() {

    var localctx = new BindingRestElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECMAScriptParser.RULE_bindingRestElement);
    try {
        this.state = 1017;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.match(ECMAScriptParser.Spread);
            this.state = 1014;
            this.bindingIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1015;
            this.match(ECMAScriptParser.Spread);
            this.state = 1016;
            this.bindingPattern();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleNameBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_singleNameBinding;
    return this;
}

SingleNameBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleNameBindingContext.prototype.constructor = SingleNameBindingContext;

SingleNameBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

SingleNameBindingContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

SingleNameBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSingleNameBinding(this);
	}
};

SingleNameBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSingleNameBinding(this);
	}
};




ECMAScriptParser.SingleNameBindingContext = SingleNameBindingContext;

ECMAScriptParser.prototype.singleNameBinding = function() {

    var localctx = new SingleNameBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECMAScriptParser.RULE_singleNameBinding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        this.bindingIdentifier();
        this.state = 1021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Assign) {
            this.state = 1020;
            this.initializer_In();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingPattern;
    return this;
}

BindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPatternContext.prototype.constructor = BindingPatternContext;

BindingPatternContext.prototype.objectBindingPattern = function() {
    return this.getTypedRuleContext(ObjectBindingPatternContext,0);
};

BindingPatternContext.prototype.arrayBindingPattern = function() {
    return this.getTypedRuleContext(ArrayBindingPatternContext,0);
};

BindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingPattern(this);
	}
};

BindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingPattern(this);
	}
};




ECMAScriptParser.BindingPatternContext = BindingPatternContext;

ECMAScriptParser.prototype.bindingPattern = function() {

    var localctx = new BindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECMAScriptParser.RULE_bindingPattern);
    try {
        this.state = 1025;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 1);
            this.state = 1023;
            this.objectBindingPattern();
            break;
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1024;
            this.arrayBindingPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_objectBindingPattern;
    return this;
}

ObjectBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectBindingPatternContext.prototype.constructor = ObjectBindingPatternContext;

ObjectBindingPatternContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ObjectBindingPatternContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ObjectBindingPatternContext.prototype.bindingPropertyList = function() {
    return this.getTypedRuleContext(BindingPropertyListContext,0);
};

ObjectBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ObjectBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectBindingPattern(this);
	}
};

ObjectBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectBindingPattern(this);
	}
};




ECMAScriptParser.ObjectBindingPatternContext = ObjectBindingPatternContext;

ECMAScriptParser.prototype.objectBindingPattern = function() {

    var localctx = new ObjectBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECMAScriptParser.RULE_objectBindingPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ECMAScriptParser.Break - 66)) | (1 << (ECMAScriptParser.Case - 66)) | (1 << (ECMAScriptParser.Catch - 66)) | (1 << (ECMAScriptParser.Class - 66)) | (1 << (ECMAScriptParser.Const - 66)) | (1 << (ECMAScriptParser.Continue - 66)) | (1 << (ECMAScriptParser.Debugger - 66)) | (1 << (ECMAScriptParser.Default - 66)) | (1 << (ECMAScriptParser.Delete - 66)) | (1 << (ECMAScriptParser.Do - 66)) | (1 << (ECMAScriptParser.Else - 66)) | (1 << (ECMAScriptParser.Export - 66)) | (1 << (ECMAScriptParser.Extends - 66)) | (1 << (ECMAScriptParser.Finally - 66)) | (1 << (ECMAScriptParser.For - 66)) | (1 << (ECMAScriptParser.Function - 66)) | (1 << (ECMAScriptParser.If - 66)) | (1 << (ECMAScriptParser.Import - 66)) | (1 << (ECMAScriptParser.In - 66)) | (1 << (ECMAScriptParser.Instanceof - 66)) | (1 << (ECMAScriptParser.New - 66)) | (1 << (ECMAScriptParser.Return - 66)) | (1 << (ECMAScriptParser.Super - 66)) | (1 << (ECMAScriptParser.Switch - 66)) | (1 << (ECMAScriptParser.This - 66)) | (1 << (ECMAScriptParser.Throw - 66)) | (1 << (ECMAScriptParser.Try - 66)) | (1 << (ECMAScriptParser.Typeof - 66)) | (1 << (ECMAScriptParser.Var - 66)) | (1 << (ECMAScriptParser.Void - 66)) | (1 << (ECMAScriptParser.While - 66)) | (1 << (ECMAScriptParser.With - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.Enum - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.StringLiteral - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1028;
            this.bindingPropertyList();
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1029;
                this.match(ECMAScriptParser.Comma);
            }

        }

        this.state = 1034;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayBindingPattern;
    return this;
}

ArrayBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayBindingPatternContext.prototype.constructor = ArrayBindingPatternContext;

ArrayBindingPatternContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayBindingPatternContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayBindingPatternContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayBindingPatternContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

ArrayBindingPatternContext.prototype.bindingElementList = function() {
    return this.getTypedRuleContext(BindingElementListContext,0);
};

ArrayBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArrayBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayBindingPattern(this);
	}
};

ArrayBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayBindingPattern(this);
	}
};




ECMAScriptParser.ArrayBindingPatternContext = ArrayBindingPatternContext;

ECMAScriptParser.prototype.arrayBindingPattern = function() {

    var localctx = new ArrayBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECMAScriptParser.RULE_arrayBindingPattern);
    var _la = 0; // Token type
    try {
        this.state = 1059;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 1038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1037;
                this.elision();
            }

            this.state = 1041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 1040;
                this.bindingRestElement();
            }

            this.state = 1043;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1044;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 1045;
            this.bindingElementList();
            this.state = 1046;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1048;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 1049;
            this.bindingElementList();
            this.state = 1050;
            this.match(ECMAScriptParser.Comma);
            this.state = 1052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1051;
                this.elision();
            }

            this.state = 1055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 1054;
                this.bindingRestElement();
            }

            this.state = 1057;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingPropertyList;
    return this;
}

BindingPropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyListContext.prototype.constructor = BindingPropertyListContext;

BindingPropertyListContext.prototype.bindingProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingPropertyContext);
    } else {
        return this.getTypedRuleContext(BindingPropertyContext,i);
    }
};

BindingPropertyListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingPropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingPropertyList(this);
	}
};

BindingPropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingPropertyList(this);
	}
};




ECMAScriptParser.BindingPropertyListContext = BindingPropertyListContext;

ECMAScriptParser.prototype.bindingPropertyList = function() {

    var localctx = new BindingPropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECMAScriptParser.RULE_bindingPropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1061;
        this.bindingProperty();
        this.state = 1066;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1062;
                this.match(ECMAScriptParser.Comma);
                this.state = 1063;
                this.bindingProperty(); 
            }
            this.state = 1068;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingProperty;
    return this;
}

BindingPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyContext.prototype.constructor = BindingPropertyContext;

BindingPropertyContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

BindingPropertyContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

BindingPropertyContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

BindingPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingProperty(this);
	}
};

BindingPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingProperty(this);
	}
};




ECMAScriptParser.BindingPropertyContext = BindingPropertyContext;

ECMAScriptParser.prototype.bindingProperty = function() {

    var localctx = new BindingPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECMAScriptParser.RULE_bindingProperty);
    try {
        this.state = 1074;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1069;
            this.singleNameBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1070;
            this.propertyName();
            this.state = 1071;
            this.match(ECMAScriptParser.Colon);
            this.state = 1072;
            this.bindingElement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalDeclaration;
    return this;
}

LexicalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclarationContext.prototype.constructor = LexicalDeclarationContext;

LexicalDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclarationContext.prototype.bindingList = function() {
    return this.getTypedRuleContext(BindingListContext,0);
};

LexicalDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalDeclaration(this);
	}
};

LexicalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalDeclaration(this);
	}
};




ECMAScriptParser.LexicalDeclarationContext = LexicalDeclarationContext;

ECMAScriptParser.prototype.lexicalDeclaration = function() {

    var localctx = new LexicalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECMAScriptParser.RULE_lexicalDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.letOrConst();
        this.state = 1077;
        this.bindingList();
        this.state = 1078;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalDeclaration_In;
    return this;
}

LexicalDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclaration_InContext.prototype.constructor = LexicalDeclaration_InContext;

LexicalDeclaration_InContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclaration_InContext.prototype.bindingList_In = function() {
    return this.getTypedRuleContext(BindingList_InContext,0);
};

LexicalDeclaration_InContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalDeclaration_In(this);
	}
};

LexicalDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalDeclaration_In(this);
	}
};




ECMAScriptParser.LexicalDeclaration_InContext = LexicalDeclaration_InContext;

ECMAScriptParser.prototype.lexicalDeclaration_In = function() {

    var localctx = new LexicalDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECMAScriptParser.RULE_lexicalDeclaration_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.letOrConst();
        this.state = 1081;
        this.bindingList_In();
        this.state = 1082;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetOrConstContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_letOrConst;
    return this;
}

LetOrConstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetOrConstContext.prototype.constructor = LetOrConstContext;

LetOrConstContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

LetOrConstContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

LetOrConstContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLetOrConst(this);
	}
};

LetOrConstContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLetOrConst(this);
	}
};




ECMAScriptParser.LetOrConstContext = LetOrConstContext;

ECMAScriptParser.prototype.letOrConst = function() {

    var localctx = new LetOrConstContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECMAScriptParser.RULE_letOrConst);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1084;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptParser.Const || _la===ECMAScriptParser.Let)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingList;
    return this;
}

BindingListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingListContext.prototype.constructor = BindingListContext;

BindingListContext.prototype.lexicalBinding = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBindingContext);
    } else {
        return this.getTypedRuleContext(LexicalBindingContext,i);
    }
};

BindingListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingList(this);
	}
};

BindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingList(this);
	}
};




ECMAScriptParser.BindingListContext = BindingListContext;

ECMAScriptParser.prototype.bindingList = function() {

    var localctx = new BindingListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECMAScriptParser.RULE_bindingList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.lexicalBinding();
        this.state = 1091;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1087;
                this.match(ECMAScriptParser.Comma);
                this.state = 1088;
                this.lexicalBinding(); 
            }
            this.state = 1093;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingList_In;
    return this;
}

BindingList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingList_InContext.prototype.constructor = BindingList_InContext;

BindingList_InContext.prototype.lexicalBinding_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBinding_InContext);
    } else {
        return this.getTypedRuleContext(LexicalBinding_InContext,i);
    }
};

BindingList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingList_In(this);
	}
};

BindingList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingList_In(this);
	}
};




ECMAScriptParser.BindingList_InContext = BindingList_InContext;

ECMAScriptParser.prototype.bindingList_In = function() {

    var localctx = new BindingList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECMAScriptParser.RULE_bindingList_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.lexicalBinding_In();
        this.state = 1099;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1095;
                this.match(ECMAScriptParser.Comma);
                this.state = 1096;
                this.lexicalBinding_In(); 
            }
            this.state = 1101;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalBinding;
    return this;
}

LexicalBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBindingContext.prototype.constructor = LexicalBindingContext;

LexicalBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBindingContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

LexicalBindingContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

LexicalBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalBinding(this);
	}
};

LexicalBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalBinding(this);
	}
};




ECMAScriptParser.LexicalBindingContext = LexicalBindingContext;

ECMAScriptParser.prototype.lexicalBinding = function() {

    var localctx = new LexicalBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECMAScriptParser.RULE_lexicalBinding);
    try {
        this.state = 1109;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1102;
            this.bindingIdentifier();
            this.state = 1104;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 1103;
                this.initializer();

            }
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1106;
            this.bindingPattern();
            this.state = 1107;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBinding_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalBinding_In;
    return this;
}

LexicalBinding_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBinding_InContext.prototype.constructor = LexicalBinding_InContext;

LexicalBinding_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBinding_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

LexicalBinding_InContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

LexicalBinding_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalBinding_In(this);
	}
};

LexicalBinding_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalBinding_In(this);
	}
};




ECMAScriptParser.LexicalBinding_InContext = LexicalBinding_InContext;

ECMAScriptParser.prototype.lexicalBinding_In = function() {

    var localctx = new LexicalBinding_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECMAScriptParser.RULE_lexicalBinding_In);
    try {
        this.state = 1118;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1111;
            this.bindingIdentifier();
            this.state = 1113;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 1112;
                this.initializer_In();

            }
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1115;
            this.bindingPattern();
            this.state = 1116;
            this.initializer_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.hoistableDeclaration = function() {
    return this.getTypedRuleContext(HoistableDeclarationContext,0);
};

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.lexicalDeclaration_In = function() {
    return this.getTypedRuleContext(LexicalDeclaration_InContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDeclaration(this);
	}
};




ECMAScriptParser.DeclarationContext = DeclarationContext;

ECMAScriptParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECMAScriptParser.RULE_declaration);
    try {
        this.state = 1123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 1120;
            this.hoistableDeclaration();
            break;
        case ECMAScriptParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 1121;
            this.classDeclaration();
            break;
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Let:
            this.enterOuterAlt(localctx, 3);
            this.state = 1122;
            this.lexicalDeclaration_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_hoistableDeclaration;
    return this;
}

HoistableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclarationContext.prototype.constructor = HoistableDeclarationContext;

HoistableDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

HoistableDeclarationContext.prototype.generatorDeclaration = function() {
    return this.getTypedRuleContext(GeneratorDeclarationContext,0);
};

HoistableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterHoistableDeclaration(this);
	}
};

HoistableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitHoistableDeclaration(this);
	}
};




ECMAScriptParser.HoistableDeclarationContext = HoistableDeclarationContext;

ECMAScriptParser.prototype.hoistableDeclaration = function() {

    var localctx = new HoistableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECMAScriptParser.RULE_hoistableDeclaration);
    try {
        this.state = 1127;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1125;
            this.functionDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1126;
            this.generatorDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclaration_DefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_hoistableDeclaration_Default;
    return this;
}

HoistableDeclaration_DefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclaration_DefaultContext.prototype.constructor = HoistableDeclaration_DefaultContext;

HoistableDeclaration_DefaultContext.prototype.functionDeclaration_Default = function() {
    return this.getTypedRuleContext(FunctionDeclaration_DefaultContext,0);
};

HoistableDeclaration_DefaultContext.prototype.generatorDeclaration_Default = function() {
    return this.getTypedRuleContext(GeneratorDeclaration_DefaultContext,0);
};

HoistableDeclaration_DefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterHoistableDeclaration_Default(this);
	}
};

HoistableDeclaration_DefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitHoistableDeclaration_Default(this);
	}
};




ECMAScriptParser.HoistableDeclaration_DefaultContext = HoistableDeclaration_DefaultContext;

ECMAScriptParser.prototype.hoistableDeclaration_Default = function() {

    var localctx = new HoistableDeclaration_DefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECMAScriptParser.RULE_hoistableDeclaration_Default);
    try {
        this.state = 1131;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1129;
            this.functionDeclaration_Default();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1130;
            this.generatorDeclaration_Default();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

ThrowStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitThrowStatement(this);
	}
};




ECMAScriptParser.ThrowStatementContext = ThrowStatementContext;

ECMAScriptParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECMAScriptParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1133;
        this.match(ECMAScriptParser.Throw);
        this.state = 1134;
        this.expression_In();
        this.state = 1135;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchPart = function() {
    return this.getTypedRuleContext(CatchPartContext,0);
};

TryStatementContext.prototype.finallyPart = function() {
    return this.getTypedRuleContext(FinallyPartContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTryStatement(this);
	}
};




ECMAScriptParser.TryStatementContext = TryStatementContext;

ECMAScriptParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECMAScriptParser.RULE_tryStatement);
    try {
        this.state = 1150;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1137;
            this.match(ECMAScriptParser.Try);
            this.state = 1138;
            this.block();
            this.state = 1139;
            this.catchPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1141;
            this.match(ECMAScriptParser.Try);
            this.state = 1142;
            this.block();
            this.state = 1143;
            this.finallyPart();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1145;
            this.match(ECMAScriptParser.Try);
            this.state = 1146;
            this.block();
            this.state = 1147;
            this.catchPart();
            this.state = 1148;
            this.finallyPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_catchPart;
    return this;
}

CatchPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchPartContext.prototype.constructor = CatchPartContext;

CatchPartContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

CatchPartContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

CatchPartContext.prototype.catchParameter = function() {
    return this.getTypedRuleContext(CatchParameterContext,0);
};

CatchPartContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

CatchPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCatchPart(this);
	}
};

CatchPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCatchPart(this);
	}
};




ECMAScriptParser.CatchPartContext = CatchPartContext;

ECMAScriptParser.prototype.catchPart = function() {

    var localctx = new CatchPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECMAScriptParser.RULE_catchPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        this.match(ECMAScriptParser.Catch);
        this.state = 1153;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1154;
        this.catchParameter();
        this.state = 1155;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1156;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_finallyPart;
    return this;
}

FinallyPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyPartContext.prototype.constructor = FinallyPartContext;

FinallyPartContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

FinallyPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFinallyPart(this);
	}
};

FinallyPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFinallyPart(this);
	}
};




ECMAScriptParser.FinallyPartContext = FinallyPartContext;

ECMAScriptParser.prototype.finallyPart = function() {

    var localctx = new FinallyPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECMAScriptParser.RULE_finallyPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1158;
        this.match(ECMAScriptParser.Finally);
        this.state = 1159;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_catchParameter;
    return this;
}

CatchParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchParameterContext.prototype.constructor = CatchParameterContext;

CatchParameterContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

CatchParameterContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

CatchParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCatchParameter(this);
	}
};

CatchParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCatchParameter(this);
	}
};




ECMAScriptParser.CatchParameterContext = CatchParameterContext;

ECMAScriptParser.prototype.catchParameter = function() {

    var localctx = new CatchParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECMAScriptParser.RULE_catchParameter);
    try {
        this.state = 1163;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1161;
            this.bindingIdentifier();
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1162;
            this.bindingPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

WithStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitWithStatement(this);
	}
};




ECMAScriptParser.WithStatementContext = WithStatementContext;

ECMAScriptParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECMAScriptParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.match(ECMAScriptParser.With);
        this.state = 1166;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1167;
        this.expression_In();
        this.state = 1168;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1169;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

LabelledStatementContext.prototype.labelledItem = function() {
    return this.getTypedRuleContext(LabelledItemContext,0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelledStatement(this);
	}
};




ECMAScriptParser.LabelledStatementContext = LabelledStatementContext;

ECMAScriptParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECMAScriptParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1171;
        this.labelIdentifier();
        this.state = 1172;
        this.match(ECMAScriptParser.Colon);
        this.state = 1173;
        this.labelledItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelledItem;
    return this;
}

LabelledItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledItemContext.prototype.constructor = LabelledItemContext;

LabelledItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledItemContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

LabelledItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelledItem(this);
	}
};

LabelledItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelledItem(this);
	}
};




ECMAScriptParser.LabelledItemContext = LabelledItemContext;

ECMAScriptParser.prototype.labelledItem = function() {

    var localctx = new LabelledItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECMAScriptParser.RULE_labelledItem);
    try {
        this.state = 1177;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1175;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1176;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelIdentifier;
    return this;
}

LabelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelIdentifierContext.prototype.constructor = LabelIdentifierContext;

LabelIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabelIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

LabelIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

LabelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelIdentifier(this);
	}
};




ECMAScriptParser.LabelIdentifierContext = LabelIdentifierContext;

ECMAScriptParser.prototype.labelIdentifier = function() {

    var localctx = new LabelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ECMAScriptParser.RULE_labelIdentifier);
    try {
        this.state = 1182;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1179;
            this.identifier();
            break;
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 1180;
            this.match(ECMAScriptParser.Yield);
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 1181;
            this.match(ECMAScriptParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSwitchStatement(this);
	}
};




ECMAScriptParser.SwitchStatementContext = SwitchStatementContext;

ECMAScriptParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ECMAScriptParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1184;
        this.match(ECMAScriptParser.Switch);
        this.state = 1185;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1186;
        this.expression_In();
        this.state = 1187;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1188;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseBlock(this);
	}
};

CaseBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseBlock(this);
	}
};




ECMAScriptParser.CaseBlockContext = CaseBlockContext;

ECMAScriptParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECMAScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.state = 1205;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1190;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 1191;
                this.caseClauses();
            }

            this.state = 1194;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1195;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1197;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 1196;
                this.caseClauses();
            }

            this.state = 1199;
            this.defaultClause();
            this.state = 1201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 1200;
                this.caseClauses();
            }

            this.state = 1203;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseClauses(this);
	}
};

CaseClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseClauses(this);
	}
};




ECMAScriptParser.CaseClausesContext = CaseClausesContext;

ECMAScriptParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ECMAScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1208; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1207;
            this.caseClause();
            this.state = 1210; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

CaseClauseContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseClause(this);
	}
};

CaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseClause(this);
	}
};




ECMAScriptParser.CaseClauseContext = CaseClauseContext;

ECMAScriptParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ECMAScriptParser.RULE_caseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1212;
        this.match(ECMAScriptParser.Case);
        this.state = 1213;
        this.expression_In();
        this.state = 1214;
        this.match(ECMAScriptParser.Colon);
        this.state = 1216;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 1215;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDefaultClause(this);
	}
};

DefaultClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDefaultClause(this);
	}
};




ECMAScriptParser.DefaultClauseContext = DefaultClauseContext;

ECMAScriptParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ECMAScriptParser.RULE_defaultClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1218;
        this.match(ECMAScriptParser.Default);
        this.state = 1219;
        this.match(ECMAScriptParser.Colon);
        this.state = 1221;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        if(la_===1) {
            this.state = 1220;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

IterationStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

IterationStatementContext.prototype.expression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_InContext);
    } else {
        return this.getTypedRuleContext(Expression_InContext,i);
    }
};

IterationStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

IterationStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

IterationStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.SemiColon);
    } else {
        return this.getToken(ECMAScriptParser.SemiColon, i);
    }
};


IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

IterationStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

IterationStatementContext.prototype.lexicalDeclaration = function() {
    return this.getTypedRuleContext(LexicalDeclarationContext,0);
};

IterationStatementContext.prototype.assignmentPattern = function() {
    return this.getTypedRuleContext(AssignmentPatternContext,0);
};

IterationStatementContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

IterationStatementContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

IterationStatementContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

IterationStatementContext.prototype.forDeclaration = function() {
    return this.getTypedRuleContext(ForDeclarationContext,0);
};

IterationStatementContext.prototype.Of = function() {
    return this.getToken(ECMAScriptParser.Of, 0);
};

IterationStatementContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIterationStatement(this);
	}
};




ECMAScriptParser.IterationStatementContext = IterationStatementContext;

ECMAScriptParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ECMAScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 1340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1223;
            this.match(ECMAScriptParser.Do);
            this.state = 1224;
            this.statement();
            this.state = 1225;
            this.match(ECMAScriptParser.While);
            this.state = 1226;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1227;
            this.expression_In();
            this.state = 1228;
            this.match(ECMAScriptParser.CloseParen);
            this.enableDoWhileEos()
            this.state = 1230;
            this.eos();
            this.disableDoWhileEos()
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1233;
            this.match(ECMAScriptParser.While);
            this.state = 1234;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1235;
            this.expression_In();
            this.state = 1236;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1237;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1239;
            this.match(ECMAScriptParser.For);
            this.state = 1240;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1241;
                this.expression();
            }

            this.state = 1244;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 1246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1245;
                this.expression_In();
            }

            this.state = 1248;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1249;
                this.expression_In();
            }

            this.state = 1252;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1253;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1254;
            this.match(ECMAScriptParser.For);
            this.state = 1255;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1256;
            this.match(ECMAScriptParser.Var);
            this.state = 1257;
            this.variableDeclarationList();
            this.state = 1258;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 1260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1259;
                this.expression_In();
            }

            this.state = 1262;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 1264;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1263;
                this.expression_In();
            }

            this.state = 1266;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1267;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1269;
            this.match(ECMAScriptParser.For);
            this.state = 1270;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1271;
            this.lexicalDeclaration();
            this.state = 1273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1272;
                this.expression_In();
            }

            this.state = 1275;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 1277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0)) {
                this.state = 1276;
                this.expression_In();
            }

            this.state = 1279;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1280;
            this.statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1282;
            this.match(ECMAScriptParser.For);
            this.state = 1283;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1284;
            this.assignmentPattern();
            this.state = 1285;
            this.match(ECMAScriptParser.In);
            this.state = 1286;
            this.expression_In();
            this.state = 1287;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1288;
            this.statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1290;
            this.match(ECMAScriptParser.For);
            this.state = 1291;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1292;
            this.leftHandSideExpression();
            this.state = 1293;
            this.match(ECMAScriptParser.In);
            this.state = 1294;
            this.expression_In();
            this.state = 1295;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1296;
            this.statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1298;
            this.match(ECMAScriptParser.For);
            this.state = 1299;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1300;
            this.match(ECMAScriptParser.Var);
            this.state = 1301;
            this.forBinding();
            this.state = 1302;
            this.match(ECMAScriptParser.In);
            this.state = 1303;
            this.expression_In();
            this.state = 1304;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1305;
            this.statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1307;
            this.match(ECMAScriptParser.For);
            this.state = 1308;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1309;
            this.forDeclaration();
            this.state = 1310;
            this.match(ECMAScriptParser.In);
            this.state = 1311;
            this.expression_In();
            this.state = 1312;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1313;
            this.statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1315;
            this.match(ECMAScriptParser.For);
            this.state = 1316;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1317;
            this.leftHandSideExpression();
            this.state = 1318;
            this.match(ECMAScriptParser.Of);
            this.state = 1319;
            this.assignmentExpression_In(0);
            this.state = 1320;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1321;
            this.statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1323;
            this.match(ECMAScriptParser.For);
            this.state = 1324;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1325;
            this.match(ECMAScriptParser.Var);
            this.state = 1326;
            this.forBinding();
            this.state = 1327;
            this.match(ECMAScriptParser.Of);
            this.state = 1328;
            this.assignmentExpression_In(0);
            this.state = 1329;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1330;
            this.statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1332;
            this.match(ECMAScriptParser.For);
            this.state = 1333;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1334;
            this.forDeclaration();
            this.state = 1335;
            this.match(ECMAScriptParser.Of);
            this.state = 1336;
            this.assignmentExpression_In(0);
            this.state = 1337;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1338;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

ForDeclarationContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

ForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterForDeclaration(this);
	}
};

ForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitForDeclaration(this);
	}
};




ECMAScriptParser.ForDeclarationContext = ForDeclarationContext;

ECMAScriptParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ECMAScriptParser.RULE_forDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.letOrConst();
        this.state = 1343;
        this.forBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_forBinding;
    return this;
}

ForBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForBindingContext.prototype.constructor = ForBindingContext;

ForBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ForBindingContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

ForBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterForBinding(this);
	}
};

ForBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitForBinding(this);
	}
};




ECMAScriptParser.ForBindingContext = ForBindingContext;

ECMAScriptParser.prototype.forBinding = function() {

    var localctx = new ForBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ECMAScriptParser.RULE_forBinding);
    try {
        this.state = 1347;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1345;
            this.bindingIdentifier();
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1346;
            this.bindingPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

IfStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIfStatement(this);
	}
};




ECMAScriptParser.IfStatementContext = IfStatementContext;

ECMAScriptParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ECMAScriptParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1349;
        this.match(ECMAScriptParser.If);
        this.state = 1350;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1351;
        this.expression_In();
        this.state = 1352;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1353;
        this.statement();
        this.state = 1356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        if(la_===1) {
            this.state = 1354;
            this.match(ECMAScriptParser.Else);
            this.state = 1355;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_breakableStatement;
    return this;
}

BreakableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakableStatementContext.prototype.constructor = BreakableStatementContext;

BreakableStatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

BreakableStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

BreakableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBreakableStatement(this);
	}
};

BreakableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBreakableStatement(this);
	}
};




ECMAScriptParser.BreakableStatementContext = BreakableStatementContext;

ECMAScriptParser.prototype.breakableStatement = function() {

    var localctx = new BreakableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ECMAScriptParser.RULE_breakableStatement);
    try {
        this.state = 1360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Do:
        case ECMAScriptParser.For:
        case ECMAScriptParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 1358;
            this.iterationStatement();
            break;
        case ECMAScriptParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 1359;
            this.switchStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

ContinueStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitContinueStatement(this);
	}
};




ECMAScriptParser.ContinueStatementContext = ContinueStatementContext;

ECMAScriptParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ECMAScriptParser.RULE_continueStatement);
    try {
        this.state = 1368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1362;
            this.match(ECMAScriptParser.Continue);
            this.state = 1363;
            this.labelIdentifier();
            this.state = 1364;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1366;
            this.match(ECMAScriptParser.Continue);
            this.state = 1367;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

BreakStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBreakStatement(this);
	}
};




ECMAScriptParser.BreakStatementContext = BreakStatementContext;

ECMAScriptParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ECMAScriptParser.RULE_breakStatement);
    try {
        this.state = 1376;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1370;
            this.match(ECMAScriptParser.Break);
            this.state = 1371;
            this.labelIdentifier();
            this.state = 1372;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1374;
            this.match(ECMAScriptParser.Break);
            this.state = 1375;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBlockStatement(this);
	}
};




ECMAScriptParser.BlockStatementContext = BlockStatementContext;

ECMAScriptParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ECMAScriptParser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1378;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBlock(this);
	}
};




ECMAScriptParser.BlockContext = BlockContext;

ECMAScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ECMAScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1380;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        if(la_===1) {
            this.state = 1381;
            this.statementList();

        }
        this.state = 1384;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

VariableStatementContext.prototype.variableDeclarationList_In = function() {
    return this.getTypedRuleContext(VariableDeclarationList_InContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableStatement(this);
	}
};

VariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableStatement(this);
	}
};




ECMAScriptParser.VariableStatementContext = VariableStatementContext;

ECMAScriptParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ECMAScriptParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1386;
        this.match(ECMAScriptParser.Var);
        this.state = 1387;
        this.variableDeclarationList_In();
        this.state = 1388;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclarationList(this);
	}
};




ECMAScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;

ECMAScriptParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ECMAScriptParser.RULE_variableDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.variableDeclaration();
        this.state = 1395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptParser.Comma) {
            this.state = 1391;
            this.match(ECMAScriptParser.Comma);
            this.state = 1392;
            this.variableDeclaration();
            this.state = 1397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList_In;
    return this;
}

VariableDeclarationList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationList_InContext.prototype.constructor = VariableDeclarationList_InContext;

VariableDeclarationList_InContext.prototype.variableDeclaration_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaration_InContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaration_InContext,i);
    }
};

VariableDeclarationList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


VariableDeclarationList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclarationList_In(this);
	}
};

VariableDeclarationList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclarationList_In(this);
	}
};




ECMAScriptParser.VariableDeclarationList_InContext = VariableDeclarationList_InContext;

ECMAScriptParser.prototype.variableDeclarationList_In = function() {

    var localctx = new VariableDeclarationList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ECMAScriptParser.RULE_variableDeclarationList_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1398;
        this.variableDeclaration_In();
        this.state = 1403;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1399;
                this.match(ECMAScriptParser.Comma);
                this.state = 1400;
                this.variableDeclaration_In(); 
            }
            this.state = 1405;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclarationContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

VariableDeclarationContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclaration(this);
	}
};




ECMAScriptParser.VariableDeclarationContext = VariableDeclarationContext;

ECMAScriptParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ECMAScriptParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1406;
            this.bindingIdentifier();
            this.state = 1408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Assign) {
                this.state = 1407;
                this.initializer();
            }

            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1410;
            this.bindingPattern();
            this.state = 1411;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclaration_In;
    return this;
}

VariableDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaration_InContext.prototype.constructor = VariableDeclaration_InContext;

VariableDeclaration_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclaration_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

VariableDeclaration_InContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

VariableDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclaration_In(this);
	}
};

VariableDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclaration_In(this);
	}
};




ECMAScriptParser.VariableDeclaration_InContext = VariableDeclaration_InContext;

ECMAScriptParser.prototype.variableDeclaration_In = function() {

    var localctx = new VariableDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ECMAScriptParser.RULE_variableDeclaration_In);
    try {
        this.state = 1422;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1415;
            this.bindingIdentifier();
            this.state = 1417;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            if(la_===1) {
                this.state = 1416;
                this.initializer_In();

            }
            break;
        case ECMAScriptParser.OpenBrace:
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1419;
            this.bindingPattern();
            this.state = 1420;
            this.initializer_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

FunctionDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ECMAScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

ECMAScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ECMAScriptParser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1424;
        this.match(ECMAScriptParser.Function);
        this.state = 1425;
        this.bindingIdentifier();
        this.state = 1426;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1427;
        this.formalParameters();
        this.state = 1428;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1429;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1430;
        this.functionBody();
        this.state = 1431;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclaration_DefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionDeclaration_Default;
    return this;
}

FunctionDeclaration_DefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclaration_DefaultContext.prototype.constructor = FunctionDeclaration_DefaultContext;

FunctionDeclaration_DefaultContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

FunctionDeclaration_DefaultContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionDeclaration_DefaultContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclaration_DefaultContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionDeclaration_DefaultContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionDeclaration_DefaultContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclaration_DefaultContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionDeclaration_DefaultContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionDeclaration_DefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionDeclaration_Default(this);
	}
};

FunctionDeclaration_DefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionDeclaration_Default(this);
	}
};




ECMAScriptParser.FunctionDeclaration_DefaultContext = FunctionDeclaration_DefaultContext;

ECMAScriptParser.prototype.functionDeclaration_Default = function() {

    var localctx = new FunctionDeclaration_DefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ECMAScriptParser.RULE_functionDeclaration_Default);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1433;
        this.match(ECMAScriptParser.Function);
        this.state = 1435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Await || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1434;
            this.bindingIdentifier();
        }

        this.state = 1437;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1438;
        this.formalParameters();
        this.state = 1439;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1440;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1441;
        this.functionBody();
        this.state = 1442;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionExpression;
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

FunctionExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionExpressionContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionExpressionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionExpression(this);
	}
};




ECMAScriptParser.FunctionExpressionContext = FunctionExpressionContext;

ECMAScriptParser.prototype.functionExpression = function() {

    var localctx = new FunctionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ECMAScriptParser.RULE_functionExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1444;
        this.match(ECMAScriptParser.Function);
        this.state = 1446;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Await || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1445;
            this.bindingIdentifier();
        }

        this.state = 1448;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1449;
        this.formalParameters();
        this.state = 1450;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1451;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1452;
        this.functionBody();
        this.state = 1453;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ClassDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassDeclaration(this);
	}
};




ECMAScriptParser.ClassDeclarationContext = ClassDeclarationContext;

ECMAScriptParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ECMAScriptParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        this.match(ECMAScriptParser.Class);
        this.state = 1456;
        this.bindingIdentifier();
        this.state = 1457;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classExpression;
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassExpression(this);
	}
};




ECMAScriptParser.ClassExpressionContext = ClassExpressionContext;

ECMAScriptParser.prototype.classExpression = function() {

    var localctx = new ClassExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ECMAScriptParser.RULE_classExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        this.match(ECMAScriptParser.Class);
        this.state = 1461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Await || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1460;
            this.bindingIdentifier();
        }

        this.state = 1463;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ClassTailContext.prototype.classHeritage = function() {
    return this.getTypedRuleContext(ClassHeritageContext,0);
};

ClassTailContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassTail(this);
	}
};

ClassTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassTail(this);
	}
};




ECMAScriptParser.ClassTailContext = ClassTailContext;

ECMAScriptParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ECMAScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Extends) {
            this.state = 1465;
            this.classHeritage();
        }

        this.state = 1468;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.Multiply))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ECMAScriptParser.Break - 66)) | (1 << (ECMAScriptParser.Case - 66)) | (1 << (ECMAScriptParser.Catch - 66)) | (1 << (ECMAScriptParser.Class - 66)) | (1 << (ECMAScriptParser.Const - 66)) | (1 << (ECMAScriptParser.Continue - 66)) | (1 << (ECMAScriptParser.Debugger - 66)) | (1 << (ECMAScriptParser.Default - 66)) | (1 << (ECMAScriptParser.Delete - 66)) | (1 << (ECMAScriptParser.Do - 66)) | (1 << (ECMAScriptParser.Else - 66)) | (1 << (ECMAScriptParser.Export - 66)) | (1 << (ECMAScriptParser.Extends - 66)) | (1 << (ECMAScriptParser.Finally - 66)) | (1 << (ECMAScriptParser.For - 66)) | (1 << (ECMAScriptParser.Function - 66)) | (1 << (ECMAScriptParser.If - 66)) | (1 << (ECMAScriptParser.Import - 66)) | (1 << (ECMAScriptParser.In - 66)) | (1 << (ECMAScriptParser.Instanceof - 66)) | (1 << (ECMAScriptParser.New - 66)) | (1 << (ECMAScriptParser.Return - 66)) | (1 << (ECMAScriptParser.Super - 66)) | (1 << (ECMAScriptParser.Switch - 66)) | (1 << (ECMAScriptParser.This - 66)) | (1 << (ECMAScriptParser.Throw - 66)) | (1 << (ECMAScriptParser.Try - 66)) | (1 << (ECMAScriptParser.Typeof - 66)) | (1 << (ECMAScriptParser.Var - 66)) | (1 << (ECMAScriptParser.Void - 66)) | (1 << (ECMAScriptParser.While - 66)) | (1 << (ECMAScriptParser.With - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.Enum - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.StringLiteral - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1469;
            this.classBody();
        }

        this.state = 1472;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassHeritageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classHeritage;
    return this;
}

ClassHeritageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassHeritageContext.prototype.constructor = ClassHeritageContext;

ClassHeritageContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

ClassHeritageContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

ClassHeritageContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassHeritage(this);
	}
};

ClassHeritageContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassHeritage(this);
	}
};




ECMAScriptParser.ClassHeritageContext = ClassHeritageContext;

ECMAScriptParser.prototype.classHeritage = function() {

    var localctx = new ClassHeritageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ECMAScriptParser.RULE_classHeritage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1474;
        this.match(ECMAScriptParser.Extends);
        this.state = 1475;
        this.leftHandSideExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classElementList = function() {
    return this.getTypedRuleContext(ClassElementListContext,0);
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassBody(this);
	}
};




ECMAScriptParser.ClassBodyContext = ClassBodyContext;

ECMAScriptParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ECMAScriptParser.RULE_classBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1477;
        this.classElementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classElementList;
    return this;
}

ClassElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementListContext.prototype.constructor = ClassElementListContext;

ClassElementListContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassElementList(this);
	}
};

ClassElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassElementList(this);
	}
};




ECMAScriptParser.ClassElementListContext = ClassElementListContext;

ECMAScriptParser.prototype.classElementList = function() {

    var localctx = new ClassElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ECMAScriptParser.RULE_classElementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1479;
            this.classElement();
            this.state = 1482; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.Multiply))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ECMAScriptParser.Break - 66)) | (1 << (ECMAScriptParser.Case - 66)) | (1 << (ECMAScriptParser.Catch - 66)) | (1 << (ECMAScriptParser.Class - 66)) | (1 << (ECMAScriptParser.Const - 66)) | (1 << (ECMAScriptParser.Continue - 66)) | (1 << (ECMAScriptParser.Debugger - 66)) | (1 << (ECMAScriptParser.Default - 66)) | (1 << (ECMAScriptParser.Delete - 66)) | (1 << (ECMAScriptParser.Do - 66)) | (1 << (ECMAScriptParser.Else - 66)) | (1 << (ECMAScriptParser.Export - 66)) | (1 << (ECMAScriptParser.Extends - 66)) | (1 << (ECMAScriptParser.Finally - 66)) | (1 << (ECMAScriptParser.For - 66)) | (1 << (ECMAScriptParser.Function - 66)) | (1 << (ECMAScriptParser.If - 66)) | (1 << (ECMAScriptParser.Import - 66)) | (1 << (ECMAScriptParser.In - 66)) | (1 << (ECMAScriptParser.Instanceof - 66)) | (1 << (ECMAScriptParser.New - 66)) | (1 << (ECMAScriptParser.Return - 66)) | (1 << (ECMAScriptParser.Super - 66)) | (1 << (ECMAScriptParser.Switch - 66)) | (1 << (ECMAScriptParser.This - 66)) | (1 << (ECMAScriptParser.Throw - 66)) | (1 << (ECMAScriptParser.Try - 66)) | (1 << (ECMAScriptParser.Typeof - 66)) | (1 << (ECMAScriptParser.Var - 66)) | (1 << (ECMAScriptParser.Void - 66)) | (1 << (ECMAScriptParser.While - 66)) | (1 << (ECMAScriptParser.With - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.Enum - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.StringLiteral - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.Static = function() {
    return this.getToken(ECMAScriptParser.Static, 0);
};

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

ClassElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassElement(this);
	}
};

ClassElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassElement(this);
	}
};




ECMAScriptParser.ClassElementContext = ClassElementContext;

ECMAScriptParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ECMAScriptParser.RULE_classElement);
    try {
        this.state = 1488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1484;
            this.match(ECMAScriptParser.Static);
            this.state = 1485;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1486;
            this.methodDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1487;
            this.match(ECMAScriptParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorDeclaration;
    return this;
}

GeneratorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorDeclarationContext.prototype.constructor = GeneratorDeclarationContext;

GeneratorDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

GeneratorDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

GeneratorDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

GeneratorDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorDeclarationContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorDeclaration(this);
	}
};

GeneratorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorDeclaration(this);
	}
};




ECMAScriptParser.GeneratorDeclarationContext = GeneratorDeclarationContext;

ECMAScriptParser.prototype.generatorDeclaration = function() {

    var localctx = new GeneratorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ECMAScriptParser.RULE_generatorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1490;
        this.match(ECMAScriptParser.Function);
        this.state = 1491;
        this.match(ECMAScriptParser.Multiply);
        this.state = 1492;
        this.bindingIdentifier();
        this.state = 1493;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1494;
        this.formalParameters();
        this.state = 1495;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1496;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1497;
        this.generatorBody();
        this.state = 1498;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorDeclaration_DefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorDeclaration_Default;
    return this;
}

GeneratorDeclaration_DefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorDeclaration_DefaultContext.prototype.constructor = GeneratorDeclaration_DefaultContext;

GeneratorDeclaration_DefaultContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

GeneratorDeclaration_DefaultContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorDeclaration_DefaultContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorDeclaration_DefaultContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

GeneratorDeclaration_DefaultContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorDeclaration_DefaultContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorDeclaration_DefaultContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorDeclaration_DefaultContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorDeclaration_DefaultContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

GeneratorDeclaration_DefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorDeclaration_Default(this);
	}
};

GeneratorDeclaration_DefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorDeclaration_Default(this);
	}
};




ECMAScriptParser.GeneratorDeclaration_DefaultContext = GeneratorDeclaration_DefaultContext;

ECMAScriptParser.prototype.generatorDeclaration_Default = function() {

    var localctx = new GeneratorDeclaration_DefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ECMAScriptParser.RULE_generatorDeclaration_Default);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1500;
        this.match(ECMAScriptParser.Function);
        this.state = 1501;
        this.match(ECMAScriptParser.Multiply);
        this.state = 1503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Await || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1502;
            this.bindingIdentifier();
        }

        this.state = 1505;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1506;
        this.formalParameters();
        this.state = 1507;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1508;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1509;
        this.generatorBody();
        this.state = 1510;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorExpression;
    return this;
}

GeneratorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorExpressionContext.prototype.constructor = GeneratorExpressionContext;

GeneratorExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

GeneratorExpressionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorExpressionContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

GeneratorExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorExpressionContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

GeneratorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorExpression(this);
	}
};

GeneratorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorExpression(this);
	}
};




ECMAScriptParser.GeneratorExpressionContext = GeneratorExpressionContext;

ECMAScriptParser.prototype.generatorExpression = function() {

    var localctx = new GeneratorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ECMAScriptParser.RULE_generatorExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1512;
        this.match(ECMAScriptParser.Function);
        this.state = 1513;
        this.match(ECMAScriptParser.Multiply);
        this.state = 1515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Await || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ECMAScriptParser.Yield - 98)) | (1 << (ECMAScriptParser.As - 98)) | (1 << (ECMAScriptParser.Async - 98)) | (1 << (ECMAScriptParser.From - 98)) | (1 << (ECMAScriptParser.Get - 98)) | (1 << (ECMAScriptParser.Let - 98)) | (1 << (ECMAScriptParser.Of - 98)) | (1 << (ECMAScriptParser.Set - 98)) | (1 << (ECMAScriptParser.Static - 98)) | (1 << (ECMAScriptParser.Target - 98)) | (1 << (ECMAScriptParser.IdentifierName - 98)))) !== 0)) {
            this.state = 1514;
            this.bindingIdentifier();
        }

        this.state = 1517;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1518;
        this.formalParameters();
        this.state = 1519;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1520;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1521;
        this.generatorBody();
        this.state = 1522;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueFormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_uniqueFormalParameters;
    return this;
}

UniqueFormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueFormalParametersContext.prototype.constructor = UniqueFormalParametersContext;

UniqueFormalParametersContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

UniqueFormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUniqueFormalParameters(this);
	}
};

UniqueFormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUniqueFormalParameters(this);
	}
};




ECMAScriptParser.UniqueFormalParametersContext = UniqueFormalParametersContext;

ECMAScriptParser.prototype.uniqueFormalParameters = function() {

    var localctx = new UniqueFormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ECMAScriptParser.RULE_uniqueFormalParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1524;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.functionRestParameter = function() {
    return this.getTypedRuleContext(FunctionRestParameterContext,0);
};

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameters(this);
	}
};




ECMAScriptParser.FormalParametersContext = FormalParametersContext;

ECMAScriptParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ECMAScriptParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.state = 1536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1527;
            this.functionRestParameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1528;
            this.formalParameterList();
            this.state = 1530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1529;
                this.match(ECMAScriptParser.Comma);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1532;
            this.formalParameterList();
            this.state = 1533;
            this.match(ECMAScriptParser.Comma);
            this.state = 1534;
            this.functionRestParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameterList(this);
	}
};




ECMAScriptParser.FormalParameterListContext = FormalParameterListContext;

ECMAScriptParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ECMAScriptParser.RULE_formalParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1538;
        this.formalParameter();
        this.state = 1543;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1539;
                this.match(ECMAScriptParser.Comma);
                this.state = 1540;
                this.formalParameter(); 
            }
            this.state = 1545;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionRestParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionRestParameter;
    return this;
}

FunctionRestParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionRestParameterContext.prototype.constructor = FunctionRestParameterContext;

FunctionRestParameterContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

FunctionRestParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionRestParameter(this);
	}
};

FunctionRestParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionRestParameter(this);
	}
};




ECMAScriptParser.FunctionRestParameterContext = FunctionRestParameterContext;

ECMAScriptParser.prototype.functionRestParameter = function() {

    var localctx = new FunctionRestParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ECMAScriptParser.RULE_functionRestParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1546;
        this.bindingRestElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameter(this);
	}
};




ECMAScriptParser.FormalParameterContext = FormalParameterContext;

ECMAScriptParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ECMAScriptParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1548;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrowParameters;
    return this;
}

ArrowParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowParametersContext.prototype.constructor = ArrowParametersContext;

ArrowParametersContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ArrowParametersContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

ArrowParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrowParameters(this);
	}
};

ArrowParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrowParameters(this);
	}
};




ECMAScriptParser.ArrowParametersContext = ArrowParametersContext;

ECMAScriptParser.prototype.arrowParameters = function() {

    var localctx = new ArrowParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ECMAScriptParser.RULE_arrowParameters);
    try {
        this.state = 1552;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1550;
            this.bindingIdentifier();
            break;
        case ECMAScriptParser.OpenParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 1551;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionBody(this);
	}
};




ECMAScriptParser.FunctionBodyContext = FunctionBodyContext;

ECMAScriptParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ECMAScriptParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.enterFunctionBody()
        this.state = 1556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        if(la_===1) {
            this.state = 1555;
            this.statementList();

        }
        this.exitFunctionBody()
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorBody;
    return this;
}

GeneratorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorBodyContext.prototype.constructor = GeneratorBodyContext;

GeneratorBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

GeneratorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorBody(this);
	}
};

GeneratorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorBody(this);
	}
};




ECMAScriptParser.GeneratorBodyContext = GeneratorBodyContext;

ECMAScriptParser.prototype.generatorBody = function() {

    var localctx = new GeneratorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ECMAScriptParser.RULE_generatorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.enterGeneratorBody()
        this.state = 1561;
        this.functionBody();
        this.exitGeneratorBody()
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConciseBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_conciseBody;
    return this;
}

ConciseBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConciseBodyContext.prototype.constructor = ConciseBodyContext;

ConciseBodyContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ConciseBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ConciseBodyContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ConciseBodyContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ConciseBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterConciseBody(this);
	}
};

ConciseBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitConciseBody(this);
	}
};




ECMAScriptParser.ConciseBodyContext = ConciseBodyContext;

ECMAScriptParser.prototype.conciseBody = function() {

    var localctx = new ConciseBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ECMAScriptParser.RULE_conciseBody);
    try {
        this.state = 1569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1564;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1565;
            this.functionBody();
            this.state = 1566;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1568;
            this.assignmentExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConciseBody_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_conciseBody_In;
    return this;
}

ConciseBody_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConciseBody_InContext.prototype.constructor = ConciseBody_InContext;

ConciseBody_InContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ConciseBody_InContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ConciseBody_InContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ConciseBody_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ConciseBody_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterConciseBody_In(this);
	}
};

ConciseBody_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitConciseBody_In(this);
	}
};




ECMAScriptParser.ConciseBody_InContext = ConciseBody_InContext;

ECMAScriptParser.prototype.conciseBody_In = function() {

    var localctx = new ConciseBody_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ECMAScriptParser.RULE_conciseBody_In);
    try {
        this.state = 1576;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1571;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1572;
            this.functionBody();
            this.state = 1573;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.assignmentExpression_In(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.Get = function() {
    return this.getToken(ECMAScriptParser.Get, 0);
};

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Set = function() {
    return this.getToken(ECMAScriptParser.Set, 0);
};

MethodDefinitionContext.prototype.propertySetParameterList = function() {
    return this.getTypedRuleContext(PropertySetParameterListContext,0);
};

MethodDefinitionContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

MethodDefinitionContext.prototype.generatorMethod = function() {
    return this.getTypedRuleContext(GeneratorMethodContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMethodDefinition(this);
	}
};




ECMAScriptParser.MethodDefinitionContext = MethodDefinitionContext;

ECMAScriptParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ECMAScriptParser.RULE_methodDefinition);
    try {
        this.state = 1604;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1578;
            this.match(ECMAScriptParser.Get);
            this.state = 1579;
            this.propertyName();
            this.state = 1580;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1581;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1582;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1583;
            this.functionBody();
            this.state = 1584;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1586;
            this.match(ECMAScriptParser.Set);
            this.state = 1587;
            this.propertyName();
            this.state = 1588;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1589;
            this.propertySetParameterList();
            this.state = 1590;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1591;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1592;
            this.functionBody();
            this.state = 1593;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1595;
            this.propertyName();
            this.state = 1596;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1597;
            this.uniqueFormalParameters();
            this.state = 1598;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1599;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1600;
            this.functionBody();
            this.state = 1601;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1603;
            this.generatorMethod();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySetParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertySetParameterList;
    return this;
}

PropertySetParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetParameterListContext.prototype.constructor = PropertySetParameterListContext;

PropertySetParameterListContext.prototype.formalParameter = function() {
    return this.getTypedRuleContext(FormalParameterContext,0);
};

PropertySetParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertySetParameterList(this);
	}
};

PropertySetParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertySetParameterList(this);
	}
};




ECMAScriptParser.PropertySetParameterListContext = PropertySetParameterListContext;

ECMAScriptParser.prototype.propertySetParameterList = function() {

    var localctx = new PropertySetParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ECMAScriptParser.RULE_propertySetParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1606;
        this.formalParameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorMethod;
    return this;
}

GeneratorMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorMethodContext.prototype.constructor = GeneratorMethodContext;

GeneratorMethodContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorMethodContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GeneratorMethodContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorMethodContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

GeneratorMethodContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorMethodContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorMethodContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorMethodContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorMethod(this);
	}
};

GeneratorMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorMethod(this);
	}
};




ECMAScriptParser.GeneratorMethodContext = GeneratorMethodContext;

ECMAScriptParser.prototype.generatorMethod = function() {

    var localctx = new GeneratorMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ECMAScriptParser.RULE_generatorMethod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1608;
        this.match(ECMAScriptParser.Multiply);
        this.state = 1609;
        this.propertyName();
        this.state = 1610;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1611;
        this.uniqueFormalParameters();
        this.state = 1612;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 1613;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 1614;
        this.generatorBody();
        this.state = 1615;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

ScriptContext.prototype.scriptBody = function() {
    return this.getTypedRuleContext(ScriptBodyContext,0);
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitScript(this);
	}
};




ECMAScriptParser.ScriptContext = ScriptContext;

ECMAScriptParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ECMAScriptParser.RULE_script);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        if(la_===1) {
            this.state = 1617;
            this.scriptBody();

        }
        this.state = 1620;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_scriptBody;
    return this;
}

ScriptBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptBodyContext.prototype.constructor = ScriptBodyContext;

ScriptBodyContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

ScriptBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterScriptBody(this);
	}
};

ScriptBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitScriptBody(this);
	}
};




ECMAScriptParser.ScriptBodyContext = ScriptBodyContext;

ECMAScriptParser.prototype.scriptBody = function() {

    var localctx = new ScriptBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ECMAScriptParser.RULE_scriptBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1622;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

ModuleContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModule(this);
	}
};




ECMAScriptParser.ModuleContext = ModuleContext;

ECMAScriptParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ECMAScriptParser.RULE_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1625;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        if(la_===1) {
            this.state = 1624;
            this.moduleBody();

        }
        this.state = 1627;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.moduleItemList = function() {
    return this.getTypedRuleContext(ModuleItemListContext,0);
};

ModuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleBody(this);
	}
};

ModuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleBody(this);
	}
};




ECMAScriptParser.ModuleBodyContext = ModuleBodyContext;

ECMAScriptParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ECMAScriptParser.RULE_moduleBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1629;
        this.moduleItemList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleItemList;
    return this;
}

ModuleItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemListContext.prototype.constructor = ModuleItemListContext;

ModuleItemListContext.prototype.moduleItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleItemContext);
    } else {
        return this.getTypedRuleContext(ModuleItemContext,i);
    }
};

ModuleItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleItemList(this);
	}
};

ModuleItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleItemList(this);
	}
};




ECMAScriptParser.ModuleItemListContext = ModuleItemListContext;

ECMAScriptParser.prototype.moduleItemList = function() {

    var localctx = new ModuleItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ECMAScriptParser.RULE_moduleItemList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1632; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1631;
        		this.moduleItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1634; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,144, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleItem;
    return this;
}

ModuleItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemContext.prototype.constructor = ModuleItemContext;

ModuleItemContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

ModuleItemContext.prototype.exportDeclaration = function() {
    return this.getTypedRuleContext(ExportDeclarationContext,0);
};

ModuleItemContext.prototype.statementListItem = function() {
    return this.getTypedRuleContext(StatementListItemContext,0);
};

ModuleItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleItem(this);
	}
};

ModuleItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleItem(this);
	}
};




ECMAScriptParser.ModuleItemContext = ModuleItemContext;

ECMAScriptParser.prototype.moduleItem = function() {

    var localctx = new ModuleItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ECMAScriptParser.RULE_moduleItem);
    try {
        this.state = 1639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1636;
            this.importDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1637;
            this.exportDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1638;
            this.statementListItem();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

ImportDeclarationContext.prototype.importClause = function() {
    return this.getTypedRuleContext(ImportClauseContext,0);
};

ImportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ImportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ImportDeclarationContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportDeclaration(this);
	}
};




ECMAScriptParser.ImportDeclarationContext = ImportDeclarationContext;

ECMAScriptParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ECMAScriptParser.RULE_importDeclaration);
    try {
        this.state = 1650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1641;
            this.match(ECMAScriptParser.Import);
            this.state = 1642;
            this.importClause();
            this.state = 1643;
            this.fromClause();
            this.state = 1644;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1646;
            this.match(ECMAScriptParser.Import);
            this.state = 1647;
            this.moduleSpecifier();
            this.state = 1648;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importClause;
    return this;
}

ImportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportClauseContext.prototype.constructor = ImportClauseContext;

ImportClauseContext.prototype.importedDefaultBinding = function() {
    return this.getTypedRuleContext(ImportedDefaultBindingContext,0);
};

ImportClauseContext.prototype.nameSpaceImport = function() {
    return this.getTypedRuleContext(NameSpaceImportContext,0);
};

ImportClauseContext.prototype.namedImports = function() {
    return this.getTypedRuleContext(NamedImportsContext,0);
};

ImportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ImportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportClause(this);
	}
};

ImportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportClause(this);
	}
};




ECMAScriptParser.ImportClauseContext = ImportClauseContext;

ECMAScriptParser.prototype.importClause = function() {

    var localctx = new ImportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ECMAScriptParser.RULE_importClause);
    try {
        this.state = 1663;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1652;
            this.importedDefaultBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1653;
            this.nameSpaceImport();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1654;
            this.namedImports();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1655;
            this.importedDefaultBinding();
            this.state = 1656;
            this.match(ECMAScriptParser.Comma);
            this.state = 1657;
            this.nameSpaceImport();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1659;
            this.importedDefaultBinding();
            this.state = 1660;
            this.match(ECMAScriptParser.Comma);
            this.state = 1661;
            this.namedImports();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedDefaultBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importedDefaultBinding;
    return this;
}

ImportedDefaultBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedDefaultBindingContext.prototype.constructor = ImportedDefaultBindingContext;

ImportedDefaultBindingContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportedDefaultBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportedDefaultBinding(this);
	}
};

ImportedDefaultBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportedDefaultBinding(this);
	}
};




ECMAScriptParser.ImportedDefaultBindingContext = ImportedDefaultBindingContext;

ECMAScriptParser.prototype.importedDefaultBinding = function() {

    var localctx = new ImportedDefaultBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ECMAScriptParser.RULE_importedDefaultBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1665;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameSpaceImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_nameSpaceImport;
    return this;
}

NameSpaceImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameSpaceImportContext.prototype.constructor = NameSpaceImportContext;

NameSpaceImportContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

NameSpaceImportContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

NameSpaceImportContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

NameSpaceImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNameSpaceImport(this);
	}
};

NameSpaceImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNameSpaceImport(this);
	}
};




ECMAScriptParser.NameSpaceImportContext = NameSpaceImportContext;

ECMAScriptParser.prototype.nameSpaceImport = function() {

    var localctx = new NameSpaceImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ECMAScriptParser.RULE_nameSpaceImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1667;
        this.match(ECMAScriptParser.Multiply);
        this.state = 1668;
        this.match(ECMAScriptParser.As);
        this.state = 1669;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_namedImports;
    return this;
}

NamedImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedImportsContext.prototype.constructor = NamedImportsContext;

NamedImportsContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

NamedImportsContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

NamedImportsContext.prototype.importsList = function() {
    return this.getTypedRuleContext(ImportsListContext,0);
};

NamedImportsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

NamedImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNamedImports(this);
	}
};

NamedImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNamedImports(this);
	}
};




ECMAScriptParser.NamedImportsContext = NamedImportsContext;

ECMAScriptParser.prototype.namedImports = function() {

    var localctx = new NamedImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ECMAScriptParser.RULE_namedImports);
    var _la = 0; // Token type
    try {
        this.state = 1680;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1671;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1672;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1673;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1674;
            this.importsList();
            this.state = 1676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1675;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 1678;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

FromClauseContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFromClause(this);
	}
};




ECMAScriptParser.FromClauseContext = FromClauseContext;

ECMAScriptParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ECMAScriptParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1682;
        this.match(ECMAScriptParser.From);
        this.state = 1683;
        this.moduleSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importsList;
    return this;
}

ImportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsListContext.prototype.constructor = ImportsListContext;

ImportsListContext.prototype.importSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ImportSpecifierContext,i);
    }
};

ImportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ImportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportsList(this);
	}
};

ImportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportsList(this);
	}
};




ECMAScriptParser.ImportsListContext = ImportsListContext;

ECMAScriptParser.prototype.importsList = function() {

    var localctx = new ImportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ECMAScriptParser.RULE_importsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1685;
        this.importSpecifier();
        this.state = 1690;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1686;
                this.match(ECMAScriptParser.Comma);
                this.state = 1687;
                this.importSpecifier(); 
            }
            this.state = 1692;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importSpecifier;
    return this;
}

ImportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportSpecifierContext.prototype.constructor = ImportSpecifierContext;

ImportSpecifierContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportSpecifierContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ImportSpecifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

ImportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportSpecifier(this);
	}
};

ImportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportSpecifier(this);
	}
};




ECMAScriptParser.ImportSpecifierContext = ImportSpecifierContext;

ECMAScriptParser.prototype.importSpecifier = function() {

    var localctx = new ImportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ECMAScriptParser.RULE_importSpecifier);
    try {
        this.state = 1698;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1693;
            this.importedBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1694;
            this.identifierName();
            this.state = 1695;
            this.match(ECMAScriptParser.As);
            this.state = 1696;
            this.importedBinding();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleSpecifier;
    return this;
}

ModuleSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSpecifierContext.prototype.constructor = ModuleSpecifierContext;

ModuleSpecifierContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

ModuleSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleSpecifier(this);
	}
};

ModuleSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleSpecifier(this);
	}
};




ECMAScriptParser.ModuleSpecifierContext = ModuleSpecifierContext;

ECMAScriptParser.prototype.moduleSpecifier = function() {

    var localctx = new ModuleSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, ECMAScriptParser.RULE_moduleSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1700;
        this.match(ECMAScriptParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importedBinding;
    return this;
}

ImportedBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedBindingContext.prototype.constructor = ImportedBindingContext;

ImportedBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ImportedBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportedBinding(this);
	}
};

ImportedBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportedBinding(this);
	}
};




ECMAScriptParser.ImportedBindingContext = ImportedBindingContext;

ECMAScriptParser.prototype.importedBinding = function() {

    var localctx = new ImportedBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, ECMAScriptParser.RULE_importedBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1702;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportDeclaration;
    return this;
}

ExportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

ExportDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

ExportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ExportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDeclarationContext.prototype.exportClause = function() {
    return this.getTypedRuleContext(ExportClauseContext,0);
};

ExportDeclarationContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

ExportDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExportDeclarationContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

ExportDeclarationContext.prototype.hoistableDeclaration_Default = function() {
    return this.getTypedRuleContext(HoistableDeclaration_DefaultContext,0);
};

ExportDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ExportDeclarationContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ExportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportDeclaration(this);
	}
};

ExportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportDeclaration(this);
	}
};




ECMAScriptParser.ExportDeclarationContext = ExportDeclarationContext;

ECMAScriptParser.prototype.exportDeclaration = function() {

    var localctx = new ExportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, ECMAScriptParser.RULE_exportDeclaration);
    try {
        this.state = 1733;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1704;
            this.match(ECMAScriptParser.Export);
            this.state = 1705;
            this.match(ECMAScriptParser.Multiply);
            this.state = 1706;
            this.fromClause();
            this.state = 1707;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1709;
            this.match(ECMAScriptParser.Export);
            this.state = 1710;
            this.exportClause();
            this.state = 1711;
            this.fromClause();
            this.state = 1712;
            this.eos();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1714;
            this.match(ECMAScriptParser.Export);
            this.state = 1715;
            this.exportClause();
            this.state = 1716;
            this.eos();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1718;
            this.match(ECMAScriptParser.Export);
            this.state = 1719;
            this.variableStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1720;
            this.match(ECMAScriptParser.Export);
            this.state = 1721;
            this.declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1722;
            this.match(ECMAScriptParser.Export);
            this.state = 1723;
            this.match(ECMAScriptParser.Default);
            this.state = 1724;
            this.hoistableDeclaration_Default();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1725;
            this.match(ECMAScriptParser.Export);
            this.state = 1726;
            this.match(ECMAScriptParser.Default);
            this.state = 1727;
            this.classDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1728;
            this.match(ECMAScriptParser.Export);
            this.state = 1729;
            this.match(ECMAScriptParser.Default);
            this.state = 1730;
            this.assignmentExpression_In(0);
            this.state = 1731;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportClause;
    return this;
}

ExportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportClauseContext.prototype.constructor = ExportClauseContext;

ExportClauseContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ExportClauseContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ExportClauseContext.prototype.exportsList = function() {
    return this.getTypedRuleContext(ExportsListContext,0);
};

ExportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ExportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportClause(this);
	}
};

ExportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportClause(this);
	}
};




ECMAScriptParser.ExportClauseContext = ExportClauseContext;

ECMAScriptParser.prototype.exportClause = function() {

    var localctx = new ExportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, ECMAScriptParser.RULE_exportClause);
    var _la = 0; // Token type
    try {
        this.state = 1744;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1735;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1736;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1737;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1738;
            this.exportsList();
            this.state = 1740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1739;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 1742;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportsList;
    return this;
}

ExportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsListContext.prototype.constructor = ExportsListContext;

ExportsListContext.prototype.exportSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ExportSpecifierContext,i);
    }
};

ExportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ExportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportsList(this);
	}
};

ExportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportsList(this);
	}
};




ECMAScriptParser.ExportsListContext = ExportsListContext;

ECMAScriptParser.prototype.exportsList = function() {

    var localctx = new ExportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, ECMAScriptParser.RULE_exportsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1746;
        this.exportSpecifier();
        this.state = 1751;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1747;
                this.match(ECMAScriptParser.Comma);
                this.state = 1748;
                this.exportSpecifier(); 
            }
            this.state = 1753;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportSpecifier;
    return this;
}

ExportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportSpecifierContext.prototype.constructor = ExportSpecifierContext;

ExportSpecifierContext.prototype.identifierName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
        return this.getTypedRuleContext(IdentifierNameContext,i);
    }
};

ExportSpecifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

ExportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportSpecifier(this);
	}
};

ExportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportSpecifier(this);
	}
};




ECMAScriptParser.ExportSpecifierContext = ExportSpecifierContext;

ECMAScriptParser.prototype.exportSpecifier = function() {

    var localctx = new ExportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, ECMAScriptParser.RULE_exportSpecifier);
    try {
        this.state = 1759;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1754;
            this.identifierName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1755;
            this.identifierName();
            this.state = 1756;
            this.match(ECMAScriptParser.As);
            this.state = 1757;
            this.identifierName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_templateLiteral;
    return this;
}

TemplateLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateLiteralContext.prototype.constructor = TemplateLiteralContext;

TemplateLiteralContext.prototype.TemplateHead = function() {
    return this.getToken(ECMAScriptParser.TemplateHead, 0);
};

TemplateLiteralContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TemplateLiteralContext.prototype.templateSpans = function() {
    return this.getTypedRuleContext(TemplateSpansContext,0);
};

TemplateLiteralContext.prototype.NoSubstitutionTemplate = function() {
    return this.getToken(ECMAScriptParser.NoSubstitutionTemplate, 0);
};

TemplateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTemplateLiteral(this);
	}
};

TemplateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTemplateLiteral(this);
	}
};




ECMAScriptParser.TemplateLiteralContext = TemplateLiteralContext;

ECMAScriptParser.prototype.templateLiteral = function() {

    var localctx = new TemplateLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, ECMAScriptParser.RULE_templateLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1766;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.TemplateHead:
            this.state = 1761;
            this.match(ECMAScriptParser.TemplateHead);
            this.state = 1762;
            this.expression();
            this.state = 1763;
            this.templateSpans();
            break;
        case ECMAScriptParser.NoSubstitutionTemplate:
            this.state = 1765;
            this.match(ECMAScriptParser.NoSubstitutionTemplate);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateSpansContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_templateSpans;
    return this;
}

TemplateSpansContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateSpansContext.prototype.constructor = TemplateSpansContext;

TemplateSpansContext.prototype.TemplateTail = function() {
    return this.getToken(ECMAScriptParser.TemplateTail, 0);
};

TemplateSpansContext.prototype.templateMiddleList = function() {
    return this.getTypedRuleContext(TemplateMiddleListContext,0);
};

TemplateSpansContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTemplateSpans(this);
	}
};

TemplateSpansContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTemplateSpans(this);
	}
};




ECMAScriptParser.TemplateSpansContext = TemplateSpansContext;

ECMAScriptParser.prototype.templateSpans = function() {

    var localctx = new TemplateSpansContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, ECMAScriptParser.RULE_templateSpans);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1769;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.TemplateMiddle) {
            this.state = 1768;
            this.templateMiddleList();
        }

        this.state = 1771;
        this.match(ECMAScriptParser.TemplateTail);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateMiddleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_templateMiddleList;
    return this;
}

TemplateMiddleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateMiddleListContext.prototype.constructor = TemplateMiddleListContext;

TemplateMiddleListContext.prototype.TemplateMiddle = function() {
    return this.getToken(ECMAScriptParser.TemplateMiddle, 0);
};

TemplateMiddleListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TemplateMiddleListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTemplateMiddleList(this);
	}
};

TemplateMiddleListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTemplateMiddleList(this);
	}
};




ECMAScriptParser.TemplateMiddleListContext = TemplateMiddleListContext;

ECMAScriptParser.prototype.templateMiddleList = function() {

    var localctx = new TemplateMiddleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, ECMAScriptParser.RULE_templateMiddleList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1773;
        this.match(ECMAScriptParser.TemplateMiddle);
        this.state = 1775; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1774;
            this.expression();
            this.state = 1777; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.NumericLiteral) | (1 << ECMAScriptParser.TemplateHead) | (1 << ECMAScriptParser.NoSubstitutionTemplate) | (1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ECMAScriptParser.PlusPlus - 34)) | (1 << (ECMAScriptParser.MinusMinus - 34)) | (1 << (ECMAScriptParser.Not - 34)) | (1 << (ECMAScriptParser.BitNot - 34)) | (1 << (ECMAScriptParser.NullLiteral - 34)) | (1 << (ECMAScriptParser.BooleanLiteral - 34)) | (1 << (ECMAScriptParser.Await - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ECMAScriptParser.Class - 69)) | (1 << (ECMAScriptParser.Delete - 69)) | (1 << (ECMAScriptParser.Function - 69)) | (1 << (ECMAScriptParser.New - 69)) | (1 << (ECMAScriptParser.Super - 69)) | (1 << (ECMAScriptParser.This - 69)) | (1 << (ECMAScriptParser.Typeof - 69)) | (1 << (ECMAScriptParser.Void - 69)) | (1 << (ECMAScriptParser.Yield - 69)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)) | (1 << (ECMAScriptParser.StringLiteral - 103)) | (1 << (ECMAScriptParser.IdentifierName - 103)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptParser.IdentifierName, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifierName(this);
	}
};

IdentifierNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifierName(this);
	}
};




ECMAScriptParser.IdentifierNameContext = IdentifierNameContext;

ECMAScriptParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, ECMAScriptParser.RULE_identifierName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1782;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.IdentifierName:
            this.state = 1779;
            this.match(ECMAScriptParser.IdentifierName);
            break;
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Enum:
            this.state = 1780;
            this.reservedWord();
            break;
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
            this.state = 1781;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.futureReservedWord = function() {
    return this.getTypedRuleContext(FutureReservedWordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitReservedWord(this);
	}
};




ECMAScriptParser.ReservedWordContext = ReservedWordContext;

ECMAScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, ECMAScriptParser.RULE_reservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1788;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
            this.state = 1784;
            this.keyword();
            break;
        case ECMAScriptParser.Enum:
            this.state = 1785;
            this.futureReservedWord();
            break;
        case ECMAScriptParser.NullLiteral:
            this.state = 1786;
            this.match(ECMAScriptParser.NullLiteral);
            break;
        case ECMAScriptParser.BooleanLiteral:
            this.state = 1787;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

KeywordContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitKeyword(this);
	}
};




ECMAScriptParser.KeywordContext = KeywordContext;

ECMAScriptParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, ECMAScriptParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1790;
        _la = this._input.LA(1);
        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptParser.Await - 65)) | (1 << (ECMAScriptParser.Break - 65)) | (1 << (ECMAScriptParser.Case - 65)) | (1 << (ECMAScriptParser.Catch - 65)) | (1 << (ECMAScriptParser.Class - 65)) | (1 << (ECMAScriptParser.Const - 65)) | (1 << (ECMAScriptParser.Continue - 65)) | (1 << (ECMAScriptParser.Debugger - 65)) | (1 << (ECMAScriptParser.Default - 65)) | (1 << (ECMAScriptParser.Delete - 65)) | (1 << (ECMAScriptParser.Do - 65)) | (1 << (ECMAScriptParser.Else - 65)) | (1 << (ECMAScriptParser.Export - 65)) | (1 << (ECMAScriptParser.Extends - 65)) | (1 << (ECMAScriptParser.Finally - 65)) | (1 << (ECMAScriptParser.For - 65)) | (1 << (ECMAScriptParser.Function - 65)) | (1 << (ECMAScriptParser.If - 65)) | (1 << (ECMAScriptParser.Import - 65)) | (1 << (ECMAScriptParser.In - 65)) | (1 << (ECMAScriptParser.Instanceof - 65)) | (1 << (ECMAScriptParser.New - 65)) | (1 << (ECMAScriptParser.Return - 65)) | (1 << (ECMAScriptParser.Super - 65)) | (1 << (ECMAScriptParser.Switch - 65)) | (1 << (ECMAScriptParser.This - 65)) | (1 << (ECMAScriptParser.Throw - 65)) | (1 << (ECMAScriptParser.Try - 65)) | (1 << (ECMAScriptParser.Typeof - 65)) | (1 << (ECMAScriptParser.Var - 65)) | (1 << (ECMAScriptParser.Void - 65)) | (1 << (ECMAScriptParser.While - 65)))) !== 0) || _la===ECMAScriptParser.With || _la===ECMAScriptParser.Yield)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FutureReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_futureReservedWord;
    return this;
}

FutureReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FutureReservedWordContext.prototype.constructor = FutureReservedWordContext;

FutureReservedWordContext.prototype.Enum = function() {
    return this.getToken(ECMAScriptParser.Enum, 0);
};

FutureReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFutureReservedWord(this);
	}
};

FutureReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFutureReservedWord(this);
	}
};




ECMAScriptParser.FutureReservedWordContext = FutureReservedWordContext;

ECMAScriptParser.prototype.futureReservedWord = function() {

    var localctx = new FutureReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, ECMAScriptParser.RULE_futureReservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1792;
        this.match(ECMAScriptParser.Enum);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MiscIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_miscIdentifier;
    return this;
}

MiscIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MiscIdentifierContext.prototype.constructor = MiscIdentifierContext;

MiscIdentifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

MiscIdentifierContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

MiscIdentifierContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

MiscIdentifierContext.prototype.Get = function() {
    return this.getToken(ECMAScriptParser.Get, 0);
};

MiscIdentifierContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

MiscIdentifierContext.prototype.Of = function() {
    return this.getToken(ECMAScriptParser.Of, 0);
};

MiscIdentifierContext.prototype.Set = function() {
    return this.getToken(ECMAScriptParser.Set, 0);
};

MiscIdentifierContext.prototype.Static = function() {
    return this.getToken(ECMAScriptParser.Static, 0);
};

MiscIdentifierContext.prototype.Target = function() {
    return this.getToken(ECMAScriptParser.Target, 0);
};

MiscIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMiscIdentifier(this);
	}
};

MiscIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMiscIdentifier(this);
	}
};




ECMAScriptParser.MiscIdentifierContext = MiscIdentifierContext;

ECMAScriptParser.prototype.miscIdentifier = function() {

    var localctx = new MiscIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, ECMAScriptParser.RULE_miscIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1794;
        _la = this._input.LA(1);
        if(!(((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (ECMAScriptParser.As - 103)) | (1 << (ECMAScriptParser.Async - 103)) | (1 << (ECMAScriptParser.From - 103)) | (1 << (ECMAScriptParser.Get - 103)) | (1 << (ECMAScriptParser.Let - 103)) | (1 << (ECMAScriptParser.Of - 103)) | (1 << (ECMAScriptParser.Set - 103)) | (1 << (ECMAScriptParser.Static - 103)) | (1 << (ECMAScriptParser.Target - 103)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ECMAScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.eos_sempred(localctx, predIndex);
	case 25:
			return this.elementList_sempred(localctx, predIndex);
	case 34:
			return this.callExpression_sempred(localctx, predIndex);
	case 40:
			return this.memberExpression_sempred(localctx, predIndex);
	case 46:
			return this.assignmentExpression_sempred(localctx, predIndex);
	case 47:
			return this.assignmentExpression_In_sempred(localctx, predIndex);
	case 55:
			return this.statement_sempred(localctx, predIndex);
	case 61:
			return this.expressionStatement_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ECMAScriptParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.mayInsertSemiColon();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.elementList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.callExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 2);
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.memberExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 6);
		case 8:
			return this.precpred(this._ctx, 5);
		case 9:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.assignmentExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 33);
		case 11:
			return this.precpred(this._ctx, 32);
		case 12:
			return this.precpred(this._ctx, 31);
		case 13:
			return this.precpred(this._ctx, 30);
		case 14:
			return this.precpred(this._ctx, 29);
		case 15:
			return this.precpred(this._ctx, 28);
		case 16:
			return this.precpred(this._ctx, 27);
		case 17:
			return this.precpred(this._ctx, 26);
		case 18:
			return this.precpred(this._ctx, 25);
		case 19:
			return this.precpred(this._ctx, 24);
		case 20:
			return this.precpred(this._ctx, 23);
		case 21:
			return this.precpred(this._ctx, 22);
		case 22:
			return this.precpred(this._ctx, 21);
		case 23:
			return this.precpred(this._ctx, 20);
		case 24:
			return this.precpred(this._ctx, 19);
		case 25:
			return this.precpred(this._ctx, 18);
		case 26:
			return this.precpred(this._ctx, 40);
		case 27:
			return this.precpred(this._ctx, 38);
		case 28:
			return this.precpred(this._ctx, 37);
		case 29:
			return this.precpred(this._ctx, 35);
		case 30:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.assignmentExpression_In_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.precpred(this._ctx, 33);
		case 32:
			return this.precpred(this._ctx, 32);
		case 33:
			return this.precpred(this._ctx, 31);
		case 34:
			return this.precpred(this._ctx, 30);
		case 35:
			return this.precpred(this._ctx, 29);
		case 36:
			return this.precpred(this._ctx, 28);
		case 37:
			return this.precpred(this._ctx, 27);
		case 38:
			return this.precpred(this._ctx, 26);
		case 39:
			return this.precpred(this._ctx, 25);
		case 40:
			return this.precpred(this._ctx, 24);
		case 41:
			return this.precpred(this._ctx, 23);
		case 42:
			return this.precpred(this._ctx, 22);
		case 43:
			return this.precpred(this._ctx, 21);
		case 44:
			return this.precpred(this._ctx, 20);
		case 45:
			return this.precpred(this._ctx, 18);
		case 46:
			return this.precpred(this._ctx, 17);
		case 47:
			return this.precpred(this._ctx, 40);
		case 48:
			return this.precpred(this._ctx, 39);
		case 49:
			return this.precpred(this._ctx, 38);
		case 50:
			return this.precpred(this._ctx, 37);
		case 51:
			return this.precpred(this._ctx, 35);
		case 52:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.statement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 53:
			return this.canReturn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 54:
			return this.isValidExpressionStatement();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ECMAScriptParser = ECMAScriptParser;
