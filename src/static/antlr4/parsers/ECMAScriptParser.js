// Generated from /home/jason/Projets/ecmascript-parser/src/static/antlr4/grammars/ECMAScript.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ECMAScriptListener = require('./ECMAScriptListener').ECMAScriptListener;
var grammarFileName = "ECMAScript.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003u\u04eb\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u00fa\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u010b\n\u0004\u0003\u0005\u0006\u0005\u010e\n\u0005\r\u0005",
    "\u000e\u0005\u010f\u0003\u0006\u0003\u0006\u0005\u0006\u0114\n\u0006",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u011b\n\b\u0003",
    "\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0129\n\u000b\f\u000b\u000e",
    "\u000b\u012c\u000b\u000b\u0003\f\u0005\f\u012f\n\f\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u0136\n\r\u0005\r\u0138\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u013e\n\u000e\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u0142\n\u000f\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0146\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u014b\n\u0011\u0005\u0011\u014d\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u0153\n\u0012\u0003\u0012\u0005\u0012",
    "\u0156\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0161",
    "\n\u0012\u0003\u0012\u0005\u0012\u0164\n\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u0168\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u016d\n\u0013\f\u0013\u000e\u0013\u0170\u000b\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0177\n",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0182\n\u0017",
    "\f\u0017\u000e\u0017\u0185\u000b\u0017\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u0189\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u018e\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0193",
    "\n\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0197\n\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01aa\n",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u01b7\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0005\"\u01c5\n\"\u0003#\u0003",
    "#\u0003#\u0005#\u01ca\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "%\u0003%\u0005%\u01d4\n%\u0003%\u0003%\u0003%\u0005%\u01d9\n%\u0003",
    "%\u0003%\u0005%\u01dd\n%\u0003%\u0003%\u0005%\u01e1\n%\u0003&\u0006",
    "&\u01e4\n&\r&\u000e&\u01e5\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u01ec",
    "\n\'\u0003(\u0003(\u0003(\u0005(\u01f1\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0206\n)\u0003)\u0003)\u0005",
    ")\u020a\n)\u0003)\u0003)\u0005)\u020e\n)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u0218\n)\u0003)\u0003)\u0005)\u021c",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0225\n",
    ")\u0003)\u0003)\u0005)\u0229\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0260\n)\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0005+\u0267\n+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u0270\n,\u0003-\u0003-\u0005-\u0274\n",
    "-\u0003.\u0003.\u0003.\u0005.\u0279\n.\u0003.\u0003.\u0003/\u0003/\u0003",
    "/\u0005/\u0280\n/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00051\u0288",
    "\n1\u00031\u00031\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u0007",
    "3\u0293\n3\f3\u000e3\u0296\u000b3\u00034\u00034\u00054\u029a\n4\u0003",
    "4\u00034\u00034\u00054\u029f\n4\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u00037\u00057\u02af",
    "\n7\u00037\u00037\u00057\u02b3\n7\u00037\u00037\u00038\u00038\u0003",
    "8\u00039\u00039\u0003:\u0006:\u02bd\n:\r:\u000e:\u02be\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u02c5\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u02d7\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u02dd\n>\u0003",
    "?\u0003?\u0003?\u0007?\u02e2\n?\f?\u000e?\u02e5\u000b?\u0003@\u0003",
    "@\u0003A\u0003A\u0003B\u0003B\u0005B\u02ed\nB\u0003C\u0003C\u0005C\u02f1",
    "\nC\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0005E\u02fe\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005",
    "F\u031a\nF\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003I\u0005I\u0328\nI\u0003I\u0003I\u0003J\u0003J\u0003",
    "K\u0005K\u032f\nK\u0003K\u0003K\u0003L\u0003L\u0003M\u0006M\u0336\n",
    "M\rM\u000eM\u0337\u0003N\u0003N\u0003N\u0005N\u033d\nN\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0005O\u0348\nO\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0005P\u0355\nP\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0005S\u0362\nS\u0003S\u0003S\u0005S\u0366\n",
    "S\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0007U\u036e\nU\fU\u000e",
    "U\u0371\u000bU\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u0378\nV\u0003",
    "W\u0003W\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0005Y\u039b\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005",
    "Z\u03a2\nZ\u0003Z\u0003Z\u0005Z\u03a6\nZ\u0003[\u0003[\u0003[\u0007",
    "[\u03ab\n[\f[\u000e[\u03ae\u000b[\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0005\\\u03b5\n\\\u0003]\u0003]\u0003]\u0005]\u03ba\n]\u0003^\u0003",
    "^\u0003^\u0005^\u03bf\n^\u0003_\u0003_\u0005_\u03c3\n_\u0003`\u0003",
    "`\u0003`\u0005`\u03c8\n`\u0005`\u03ca\n`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005",
    "`\u03d9\n`\u0003a\u0003a\u0005a\u03dd\na\u0003a\u0003a\u0005a\u03e1",
    "\na\u0003a\u0003a\u0003a\u0005a\u03e6\na\u0007a\u03e8\na\fa\u000ea\u03eb",
    "\u000ba\u0005a\u03ed\na\u0003a\u0005a\u03f0\na\u0003a\u0003a\u0003b",
    "\u0006b\u03f5\nb\rb\u000eb\u03f6\u0003c\u0003c\u0003c\u0003d\u0003d",
    "\u0003d\u0007d\u03ff\nd\fd\u000ed\u0402\u000bd\u0003e\u0003e\u0003e",
    "\u0003e\u0003e\u0003e\u0003e\u0005e\u040b\ne\u0003f\u0003f\u0005f\u040f",
    "\nf\u0003g\u0003g\u0003g\u0005g\u0414\ng\u0003h\u0003h\u0003i\u0003",
    "i\u0003i\u0003j\u0003j\u0003j\u0005j\u041e\nj\u0005j\u0420\nj\u0003",
    "j\u0003j\u0003k\u0005k\u0425\nk\u0003k\u0003k\u0003k\u0003k\u0007k\u042b",
    "\nk\fk\u000ek\u042e\u000bk\u0003l\u0003l\u0003l\u0003m\u0003m\u0003",
    "m\u0007m\u0436\nm\fm\u000em\u0439\u000bm\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u0446\nn\u0005",
    "n\u0448\nn\u0003n\u0003n\u0003n\u0005n\u044d\nn\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u0458\nn\u0003n\u0003",
    "n\u0003n\u0003n\u0005n\u045e\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005",
    "n\u046f\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0005n\u047d\nn\u0003n\u0005n\u0480\nn\u0005",
    "n\u0482\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0007n\u04c7",
    "\nn\fn\u000en\u04ca\u000bn\u0003o\u0003o\u0003p\u0003p\u0003q\u0003",
    "q\u0003r\u0003r\u0003s\u0003s\u0003t\u0003t\u0003u\u0003u\u0003v\u0003",
    "v\u0003v\u0005v\u04dd\nv\u0003w\u0003w\u0003w\u0003w\u0005w\u04e3\n",
    "w\u0003x\u0003x\u0003y\u0003y\u0003z\u0003z\u0003z\u0002\u0003\u00da",
    "{\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u0002\r\u0004",
    "\u0002GGll\u0003\u0002#$\b\u0002\u001e\u001f#$+,KK^^``\u0004\u0002 ",
    "!>>\u0003\u0002\u001e\u001f\u0003\u0002%\'\u0003\u0002\u0016\u0019\u0003",
    "\u0002\u001a\u001d\u0004\u00022<??\u0003\u0002Bc\u0003\u0002hp\u0002",
    "\u0533\u0002\u00f4\u0003\u0002\u0002\u0002\u0004\u00f9\u0003\u0002\u0002",
    "\u0002\u0006\u010a\u0003\u0002\u0002\u0002\b\u010d\u0003\u0002\u0002",
    "\u0002\n\u0113\u0003\u0002\u0002\u0002\f\u0115\u0003\u0002\u0002\u0002",
    "\u000e\u0117\u0003\u0002\u0002\u0002\u0010\u011e\u0003\u0002\u0002\u0002",
    "\u0012\u0121\u0003\u0002\u0002\u0002\u0014\u0125\u0003\u0002\u0002\u0002",
    "\u0016\u012e\u0003\u0002\u0002\u0002\u0018\u0137\u0003\u0002\u0002\u0002",
    "\u001a\u013d\u0003\u0002\u0002\u0002\u001c\u013f\u0003\u0002\u0002\u0002",
    "\u001e\u0145\u0003\u0002\u0002\u0002 \u0147\u0003\u0002\u0002\u0002",
    "\"\u0167\u0003\u0002\u0002\u0002$\u0169\u0003\u0002\u0002\u0002&\u0176",
    "\u0003\u0002\u0002\u0002(\u0178\u0003\u0002\u0002\u0002*\u017c\u0003",
    "\u0002\u0002\u0002,\u017e\u0003\u0002\u0002\u0002.\u018d\u0003\u0002",
    "\u0002\u00020\u0192\u0003\u0002\u0002\u00022\u0196\u0003\u0002\u0002",
    "\u00024\u0198\u0003\u0002\u0002\u00026\u01a9\u0003\u0002\u0002\u0002",
    "8\u01ab\u0003\u0002\u0002\u0002:\u01b1\u0003\u0002\u0002\u0002<\u01b6",
    "\u0003\u0002\u0002\u0002>\u01b8\u0003\u0002\u0002\u0002@\u01be\u0003",
    "\u0002\u0002\u0002B\u01c4\u0003\u0002\u0002\u0002D\u01c9\u0003\u0002",
    "\u0002\u0002F\u01cb\u0003\u0002\u0002\u0002H\u01e0\u0003\u0002\u0002",
    "\u0002J\u01e3\u0003\u0002\u0002\u0002L\u01e7\u0003\u0002\u0002\u0002",
    "N\u01ed\u0003\u0002\u0002\u0002P\u025f\u0003\u0002\u0002\u0002R\u0261",
    "\u0003\u0002\u0002\u0002T\u0266\u0003\u0002\u0002\u0002V\u0268\u0003",
    "\u0002\u0002\u0002X\u0273\u0003\u0002\u0002\u0002Z\u0275\u0003\u0002",
    "\u0002\u0002\\\u027c\u0003\u0002\u0002\u0002^\u0283\u0003\u0002\u0002",
    "\u0002`\u0285\u0003\u0002\u0002\u0002b\u028b\u0003\u0002\u0002\u0002",
    "d\u028f\u0003\u0002\u0002\u0002f\u029e\u0003\u0002\u0002\u0002h\u02a0",
    "\u0003\u0002\u0002\u0002j\u02a9\u0003\u0002\u0002\u0002l\u02ae\u0003",
    "\u0002\u0002\u0002n\u02b6\u0003\u0002\u0002\u0002p\u02b9\u0003\u0002",
    "\u0002\u0002r\u02bc\u0003\u0002\u0002\u0002t\u02c4\u0003\u0002\u0002",
    "\u0002v\u02c6\u0003\u0002\u0002\u0002x\u02d0\u0003\u0002\u0002\u0002",
    "z\u02dc\u0003\u0002\u0002\u0002|\u02de\u0003\u0002\u0002\u0002~\u02e6",
    "\u0003\u0002\u0002\u0002\u0080\u02e8\u0003\u0002\u0002\u0002\u0082\u02ec",
    "\u0003\u0002\u0002\u0002\u0084\u02ee\u0003\u0002\u0002\u0002\u0086\u02f4",
    "\u0003\u0002\u0002\u0002\u0088\u02fd\u0003\u0002\u0002\u0002\u008a\u0319",
    "\u0003\u0002\u0002\u0002\u008c\u031b\u0003\u0002\u0002\u0002\u008e\u031d",
    "\u0003\u0002\u0002\u0002\u0090\u0327\u0003\u0002\u0002\u0002\u0092\u032b",
    "\u0003\u0002\u0002\u0002\u0094\u032e\u0003\u0002\u0002\u0002\u0096\u0332",
    "\u0003\u0002\u0002\u0002\u0098\u0335\u0003\u0002\u0002\u0002\u009a\u033c",
    "\u0003\u0002\u0002\u0002\u009c\u0347\u0003\u0002\u0002\u0002\u009e\u0354",
    "\u0003\u0002\u0002\u0002\u00a0\u0356\u0003\u0002\u0002\u0002\u00a2\u0358",
    "\u0003\u0002\u0002\u0002\u00a4\u0365\u0003\u0002\u0002\u0002\u00a6\u0367",
    "\u0003\u0002\u0002\u0002\u00a8\u036a\u0003\u0002\u0002\u0002\u00aa\u0377",
    "\u0003\u0002\u0002\u0002\u00ac\u0379\u0003\u0002\u0002\u0002\u00ae\u037b",
    "\u0003\u0002\u0002\u0002\u00b0\u039a\u0003\u0002\u0002\u0002\u00b2\u03a5",
    "\u0003\u0002\u0002\u0002\u00b4\u03a7\u0003\u0002\u0002\u0002\u00b6\u03b4",
    "\u0003\u0002\u0002\u0002\u00b8\u03b9\u0003\u0002\u0002\u0002\u00ba\u03be",
    "\u0003\u0002\u0002\u0002\u00bc\u03c2\u0003\u0002\u0002\u0002\u00be\u03d8",
    "\u0003\u0002\u0002\u0002\u00c0\u03da\u0003\u0002\u0002\u0002\u00c2\u03f4",
    "\u0003\u0002\u0002\u0002\u00c4\u03f8\u0003\u0002\u0002\u0002\u00c6\u03fb",
    "\u0003\u0002\u0002\u0002\u00c8\u040a\u0003\u0002\u0002\u0002\u00ca\u040e",
    "\u0003\u0002\u0002\u0002\u00cc\u0413\u0003\u0002\u0002\u0002\u00ce\u0415",
    "\u0003\u0002\u0002\u0002\u00d0\u0417\u0003\u0002\u0002\u0002\u00d2\u041a",
    "\u0003\u0002\u0002\u0002\u00d4\u0424\u0003\u0002\u0002\u0002\u00d6\u042f",
    "\u0003\u0002\u0002\u0002\u00d8\u0432\u0003\u0002\u0002\u0002\u00da\u0481",
    "\u0003\u0002\u0002\u0002\u00dc\u04cb\u0003\u0002\u0002\u0002\u00de\u04cd",
    "\u0003\u0002\u0002\u0002\u00e0\u04cf\u0003\u0002\u0002\u0002\u00e2\u04d1",
    "\u0003\u0002\u0002\u0002\u00e4\u04d3\u0003\u0002\u0002\u0002\u00e6\u04d5",
    "\u0003\u0002\u0002\u0002\u00e8\u04d7\u0003\u0002\u0002\u0002\u00ea\u04dc",
    "\u0003\u0002\u0002\u0002\u00ec\u04e2\u0003\u0002\u0002\u0002\u00ee\u04e4",
    "\u0003\u0002\u0002\u0002\u00f0\u04e6\u0003\u0002\u0002\u0002\u00f2\u04e8",
    "\u0003\u0002\u0002\u0002\u00f4\u00f5\u0005\u0094K\u0002\u00f5\u00f6",
    "\u0007\u0002\u0002\u0003\u00f6\u0003\u0003\u0002\u0002\u0002\u00f7\u00fa",
    "\u0007\u0014\u0002\u0002\u00f8\u00fa\u0006\u0003\u0002\u0002\u00f9\u00f7",
    "\u0003\u0002\u0002\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002\u00fa\u0005",
    "\u0003\u0002\u0002\u0002\u00fb\u010b\u0005^0\u0002\u00fc\u010b\u0005",
    "b2\u0002\u00fd\u010b\u0005\f\u0007\u0002\u00fe\u010b\u0005\u0012\n\u0002",
    "\u00ff\u010b\u0005V,\u0002\u0100\u010b\u0005X-\u0002\u0101\u010b\u0005",
    "Z.\u0002\u0102\u010b\u0005\\/\u0002\u0103\u0104\u0006\u0004\u0003\u0002",
    "\u0104\u010b\u0005\u000e\b\u0002\u0105\u010b\u0005> \u0002\u0106\u010b",
    "\u0005@!\u0002\u0107\u010b\u00054\u001b\u0002\u0108\u010b\u00056\u001c",
    "\u0002\u0109\u010b\u0005\u0010\t\u0002\u010a\u00fb\u0003\u0002\u0002",
    "\u0002\u010a\u00fc\u0003\u0002\u0002\u0002\u010a\u00fd\u0003\u0002\u0002",
    "\u0002\u010a\u00fe\u0003\u0002\u0002\u0002\u010a\u00ff\u0003\u0002\u0002",
    "\u0002\u010a\u0100\u0003\u0002\u0002\u0002\u010a\u0101\u0003\u0002\u0002",
    "\u0002\u010a\u0102\u0003\u0002\u0002\u0002\u010a\u0103\u0003\u0002\u0002",
    "\u0002\u010a\u0105\u0003\u0002\u0002\u0002\u010a\u0106\u0003\u0002\u0002",
    "\u0002\u010a\u0107\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002",
    "\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010b\u0007\u0003\u0002\u0002",
    "\u0002\u010c\u010e\u0005\n\u0006\u0002\u010d\u010c\u0003\u0002\u0002",
    "\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002",
    "\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\t\u0003\u0002\u0002",
    "\u0002\u0111\u0114\u00050\u0019\u0002\u0112\u0114\u0005\u0006\u0004",
    "\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0112\u0003\u0002\u0002",
    "\u0002\u0114\u000b\u0003\u0002\u0002\u0002\u0115\u0116\u0007\u0014\u0002",
    "\u0002\u0116\r\u0003\u0002\u0002\u0002\u0117\u011a\u0007X\u0002\u0002",
    "\u0118\u0119\u0006\b\u0004\u0002\u0119\u011b\u0005\u00d8m\u0002\u011a",
    "\u0118\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b",
    "\u011c\u0003\u0002\u0002\u0002\u011c\u011d\u0005\u0004\u0003\u0002\u011d",
    "\u000f\u0003\u0002\u0002\u0002\u011e\u011f\u0007I\u0002\u0002\u011f",
    "\u0120\u0005\u0004\u0003\u0002\u0120\u0011\u0003\u0002\u0002\u0002\u0121",
    "\u0122\u0006\n\u0005\u0002\u0122\u0123\u0005\u00d8m\u0002\u0123\u0124",
    "\u0005\u0004\u0003\u0002\u0124\u0013\u0003\u0002\u0002\u0002\u0125\u012a",
    "\u0005\u0016\f\u0002\u0126\u0127\u0007\u0015\u0002\u0002\u0127\u0129",
    "\u0005\u0016\f\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0129\u012c",
    "\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002\u012a\u012b",
    "\u0003\u0002\u0002\u0002\u012b\u0015\u0003\u0002\u0002\u0002\u012c\u012a",
    "\u0003\u0002\u0002\u0002\u012d\u012f\u0005\u00c2b\u0002\u012e\u012d",
    "\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0130",
    "\u0003\u0002\u0002\u0002\u0130\u0131\u0005\u0018\r\u0002\u0131\u0017",
    "\u0003\u0002\u0002\u0002\u0132\u0138\u0005\u001c\u000f\u0002\u0133\u0135",
    "\u0005\u001e\u0010\u0002\u0134\u0136\u0005\u00d6l\u0002\u0135\u0134",
    "\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0138",
    "\u0003\u0002\u0002\u0002\u0137\u0132\u0003\u0002\u0002\u0002\u0137\u0133",
    "\u0003\u0002\u0002\u0002\u0138\u0019\u0003\u0002\u0002\u0002\u0139\u013a",
    "\u0007\u0013\u0002\u0002\u013a\u013e\u0005\u00ba^\u0002\u013b\u013c",
    "\u0007\u0013\u0002\u0002\u013c\u013e\u0005\u001e\u0010\u0002\u013d\u0139",
    "\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013e\u001b",
    "\u0003\u0002\u0002\u0002\u013f\u0141\u0005\u00ba^\u0002\u0140\u0142",
    "\u0005\u00d6l\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0141\u0142",
    "\u0003\u0002\u0002\u0002\u0142\u001d\u0003\u0002\u0002\u0002\u0143\u0146",
    "\u0005 \u0011\u0002\u0144\u0146\u0005\"\u0012\u0002\u0145\u0143\u0003",
    "\u0002\u0002\u0002\u0145\u0144\u0003\u0002\u0002\u0002\u0146\u001f\u0003",
    "\u0002\u0002\u0002\u0147\u014c\u0007\f\u0002\u0002\u0148\u014a\u0005",
    "$\u0013\u0002\u0149\u014b\u0007\u0015\u0002\u0002\u014a\u0149\u0003",
    "\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014d\u0003",
    "\u0002\u0002\u0002\u014c\u0148\u0003\u0002\u0002\u0002\u014c\u014d\u0003",
    "\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u014f\u0007",
    "\r\u0002\u0002\u014f!\u0003\u0002\u0002\u0002\u0150\u0152\u0007\u0010",
    "\u0002\u0002\u0151\u0153\u0005\u00c2b\u0002\u0152\u0151\u0003\u0002",
    "\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0155\u0003\u0002",
    "\u0002\u0002\u0154\u0156\u0005\u001a\u000e\u0002\u0155\u0154\u0003\u0002",
    "\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002",
    "\u0002\u0002\u0157\u0168\u0007\u0011\u0002\u0002\u0158\u0159\u0007\u0010",
    "\u0002\u0002\u0159\u015a\u0005\u0014\u000b\u0002\u015a\u015b\u0007\u0011",
    "\u0002\u0002\u015b\u0168\u0003\u0002\u0002\u0002\u015c\u015d\u0007\u0010",
    "\u0002\u0002\u015d\u015e\u0005\u0014\u000b\u0002\u015e\u0160\u0007\u0015",
    "\u0002\u0002\u015f\u0161\u0005\u00c2b\u0002\u0160\u015f\u0003\u0002",
    "\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0163\u0003\u0002",
    "\u0002\u0002\u0162\u0164\u0005\u001a\u000e\u0002\u0163\u0162\u0003\u0002",
    "\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002",
    "\u0002\u0002\u0165\u0166\u0007\u0011\u0002\u0002\u0166\u0168\u0003\u0002",
    "\u0002\u0002\u0167\u0150\u0003\u0002\u0002\u0002\u0167\u0158\u0003\u0002",
    "\u0002\u0002\u0167\u015c\u0003\u0002\u0002\u0002\u0168#\u0003\u0002",
    "\u0002\u0002\u0169\u016e\u0005&\u0014\u0002\u016a\u016b\u0007\u0015",
    "\u0002\u0002\u016b\u016d\u0005&\u0014\u0002\u016c\u016a\u0003\u0002",
    "\u0002\u0002\u016d\u0170\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002",
    "\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f%\u0003\u0002",
    "\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0171\u0177\u0005\u001c",
    "\u000f\u0002\u0172\u0173\u0005\u00caf\u0002\u0173\u0174\u00070\u0002",
    "\u0002\u0174\u0175\u0005\u0018\r\u0002\u0175\u0177\u0003\u0002\u0002",
    "\u0002\u0176\u0171\u0003\u0002\u0002\u0002\u0176\u0172\u0003\u0002\u0002",
    "\u0002\u0177\'\u0003\u0002\u0002\u0002\u0178\u0179\u0005*\u0016\u0002",
    "\u0179\u017a\u0005,\u0017\u0002\u017a\u017b\u0005\u0004\u0003\u0002",
    "\u017b)\u0003\u0002\u0002\u0002\u017c\u017d\t\u0002\u0002\u0002\u017d",
    "+\u0003\u0002\u0002\u0002\u017e\u0183\u0005.\u0018\u0002\u017f\u0180",
    "\u0007\u0015\u0002\u0002\u0180\u0182\u0005.\u0018\u0002\u0181\u017f",
    "\u0003\u0002\u0002\u0002\u0182\u0185\u0003\u0002\u0002\u0002\u0183\u0181",
    "\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184-",
    "\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0186\u0188",
    "\u0005\u00ba^\u0002\u0187\u0189\u0005\u00d6l\u0002\u0188\u0187\u0003",
    "\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u018e\u0003",
    "\u0002\u0002\u0002\u018a\u018b\u0005\u001e\u0010\u0002\u018b\u018c\u0005",
    "\u00d6l\u0002\u018c\u018e\u0003\u0002\u0002\u0002\u018d\u0186\u0003",
    "\u0002\u0002\u0002\u018d\u018a\u0003\u0002\u0002\u0002\u018e/\u0003",
    "\u0002\u0002\u0002\u018f\u0193\u00052\u001a\u0002\u0190\u0193\u0005",
    "j6\u0002\u0191\u0193\u0005(\u0015\u0002\u0192\u018f\u0003\u0002\u0002",
    "\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0192\u0191\u0003\u0002\u0002",
    "\u0002\u01931\u0003\u0002\u0002\u0002\u0194\u0197\u0005h5\u0002\u0195",
    "\u0197\u0005v<\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0196\u0195",
    "\u0003\u0002\u0002\u0002\u01973\u0003\u0002\u0002\u0002\u0198\u0199",
    "\u0007\\\u0002\u0002\u0199\u019a\u0005\u00d8m\u0002\u019a\u019b\u0005",
    "\u0004\u0003\u0002\u019b5\u0003\u0002\u0002\u0002\u019c\u019d\u0007",
    "]\u0002\u0002\u019d\u019e\u0005`1\u0002\u019e\u019f\u00058\u001d\u0002",
    "\u019f\u01aa\u0003\u0002\u0002\u0002\u01a0\u01a1\u0007]\u0002\u0002",
    "\u01a1\u01a2\u0005`1\u0002\u01a2\u01a3\u0005:\u001e\u0002\u01a3\u01aa",
    "\u0003\u0002\u0002\u0002\u01a4\u01a5\u0007]\u0002\u0002\u01a5\u01a6",
    "\u0005`1\u0002\u01a6\u01a7\u00058\u001d\u0002\u01a7\u01a8\u0005:\u001e",
    "\u0002\u01a8\u01aa\u0003\u0002\u0002\u0002\u01a9\u019c\u0003\u0002\u0002",
    "\u0002\u01a9\u01a0\u0003\u0002\u0002\u0002\u01a9\u01a4\u0003\u0002\u0002",
    "\u0002\u01aa7\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007E\u0002\u0002",
    "\u01ac\u01ad\u0007\u000e\u0002\u0002\u01ad\u01ae\u0005<\u001f\u0002",
    "\u01ae\u01af\u0007\u000f\u0002\u0002\u01af\u01b0\u0005`1\u0002\u01b0",
    "9\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007P\u0002\u0002\u01b2\u01b3",
    "\u0005`1\u0002\u01b3;\u0003\u0002\u0002\u0002\u01b4\u01b7\u0005\u00ba",
    "^\u0002\u01b5\u01b7\u0005\u001e\u0010\u0002\u01b6\u01b4\u0003\u0002",
    "\u0002\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b7=\u0003\u0002",
    "\u0002\u0002\u01b8\u01b9\u0007b\u0002\u0002\u01b9\u01ba\u0007\u000e",
    "\u0002\u0002\u01ba\u01bb\u0005\u00d8m\u0002\u01bb\u01bc\u0007\u000f",
    "\u0002\u0002\u01bc\u01bd\u0005\u0006\u0004\u0002\u01bd?\u0003\u0002",
    "\u0002\u0002\u01be\u01bf\u0005D#\u0002\u01bf\u01c0\u00070\u0002\u0002",
    "\u01c0\u01c1\u0005B\"\u0002\u01c1A\u0003\u0002\u0002\u0002\u01c2\u01c5",
    "\u0005\u0006\u0004\u0002\u01c3\u01c5\u0005h5\u0002\u01c4\u01c2\u0003",
    "\u0002\u0002\u0002\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5C\u0003",
    "\u0002\u0002\u0002\u01c6\u01ca\u0005\u00bc_\u0002\u01c7\u01ca\u0007",
    "c\u0002\u0002\u01c8\u01ca\u0007B\u0002\u0002\u01c9\u01c6\u0003\u0002",
    "\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01c8\u0003\u0002",
    "\u0002\u0002\u01caE\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007Z\u0002",
    "\u0002\u01cc\u01cd\u0007\u000e\u0002\u0002\u01cd\u01ce\u0005\u00d8m",
    "\u0002\u01ce\u01cf\u0007\u000f\u0002\u0002\u01cf\u01d0\u0005H%\u0002",
    "\u01d0G\u0003\u0002\u0002\u0002\u01d1\u01d3\u0007\f\u0002\u0002\u01d2",
    "\u01d4\u0005J&\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01e1",
    "\u0007\r\u0002\u0002\u01d6\u01d8\u0007\f\u0002\u0002\u01d7\u01d9\u0005",
    "J&\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002",
    "\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01dc\u0005N",
    "(\u0002\u01db\u01dd\u0005J&\u0002\u01dc\u01db\u0003\u0002\u0002\u0002",
    "\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0007\r\u0002\u0002\u01df\u01e1\u0003\u0002\u0002\u0002",
    "\u01e0\u01d1\u0003\u0002\u0002\u0002\u01e0\u01d6\u0003\u0002\u0002\u0002",
    "\u01e1I\u0003\u0002\u0002\u0002\u01e2\u01e4\u0005L\'\u0002\u01e3\u01e2",
    "\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e3",
    "\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6K",
    "\u0003\u0002\u0002\u0002\u01e7\u01e8\u0007D\u0002\u0002\u01e8\u01e9",
    "\u0005\u00d8m\u0002\u01e9\u01eb\u00070\u0002\u0002\u01ea\u01ec\u0005",
    "\b\u0005\u0002\u01eb\u01ea\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003",
    "\u0002\u0002\u0002\u01ecM\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007",
    "J\u0002\u0002\u01ee\u01f0\u00070\u0002\u0002\u01ef\u01f1\u0005\b\u0005",
    "\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002",
    "\u0002\u01f1O\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007L\u0002\u0002",
    "\u01f3\u01f4\u0005\u0006\u0004\u0002\u01f4\u01f5\u0007a\u0002\u0002",
    "\u01f5\u01f6\u0007\u000e\u0002\u0002\u01f6\u01f7\u0005\u00d8m\u0002",
    "\u01f7\u01f8\u0007\u000f\u0002\u0002\u01f8\u01f9\b)\u0001\u0002\u01f9",
    "\u01fa\u0005\u0004\u0003\u0002\u01fa\u01fb\b)\u0001\u0002\u01fb\u0260",
    "\u0003\u0002\u0002\u0002\u01fc\u01fd\u0007a\u0002\u0002\u01fd\u01fe",
    "\u0007\u000e\u0002\u0002\u01fe\u01ff\u0005\u00d8m\u0002\u01ff\u0200",
    "\u0007\u000f\u0002\u0002\u0200\u0201\u0005\u0006\u0004\u0002\u0201\u0260",
    "\u0003\u0002\u0002\u0002\u0202\u0203\u0007Q\u0002\u0002\u0203\u0205",
    "\u0007\u000e\u0002\u0002\u0204\u0206\u0005\u00d8m\u0002\u0205\u0204",
    "\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207",
    "\u0003\u0002\u0002\u0002\u0207\u0209\u0007\u0014\u0002\u0002\u0208\u020a",
    "\u0005\u00d8m\u0002\u0209\u0208\u0003\u0002\u0002\u0002\u0209\u020a",
    "\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020b\u020d",
    "\u0007\u0014\u0002\u0002\u020c\u020e\u0005\u00d8m\u0002\u020d\u020c",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f",
    "\u0003\u0002\u0002\u0002\u020f\u0210\u0007\u000f\u0002\u0002\u0210\u0260",
    "\u0005\u0006\u0004\u0002\u0211\u0212\u0007Q\u0002\u0002\u0212\u0213",
    "\u0007\u000e\u0002\u0002\u0213\u0214\u0007_\u0002\u0002\u0214\u0215",
    "\u0005d3\u0002\u0215\u0217\u0007\u0014\u0002\u0002\u0216\u0218\u0005",
    "\u00d8m\u0002\u0217\u0216\u0003\u0002\u0002\u0002\u0217\u0218\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021b\u0007",
    "\u0014\u0002\u0002\u021a\u021c\u0005\u00d8m\u0002\u021b\u021a\u0003",
    "\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0003",
    "\u0002\u0002\u0002\u021d\u021e\u0007\u000f\u0002\u0002\u021e\u021f\u0005",
    "\u0006\u0004\u0002\u021f\u0260\u0003\u0002\u0002\u0002\u0220\u0221\u0007",
    "Q\u0002\u0002\u0221\u0222\u0007\u000e\u0002\u0002\u0222\u0224\u0005",
    "(\u0015\u0002\u0223\u0225\u0005\u00d8m\u0002\u0224\u0223\u0003\u0002",
    "\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002",
    "\u0002\u0002\u0226\u0228\u0007\u0014\u0002\u0002\u0227\u0229\u0005\u00d8",
    "m\u0002\u0228\u0227\u0003\u0002\u0002\u0002\u0228\u0229\u0003\u0002",
    "\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022b\u0007\u000f",
    "\u0002\u0002\u022b\u022c\u0005\u0006\u0004\u0002\u022c\u0260\u0003\u0002",
    "\u0002\u0002\u022d\u022e\u0007Q\u0002\u0002\u022e\u022f\u0007\u000e",
    "\u0002\u0002\u022f\u0230\u0005\u00dan\u0002\u0230\u0231\u0007U\u0002",
    "\u0002\u0231\u0232\u0005\u00d8m\u0002\u0232\u0233\u0007\u000f\u0002",
    "\u0002\u0233\u0234\u0005\u0006\u0004\u0002\u0234\u0260\u0003\u0002\u0002",
    "\u0002\u0235\u0236\u0007Q\u0002\u0002\u0236\u0237\u0007\u000e\u0002",
    "\u0002\u0237\u0238\u0007_\u0002\u0002\u0238\u0239\u0005T+\u0002\u0239",
    "\u023a\u0007U\u0002\u0002\u023a\u023b\u0005\u00d8m\u0002\u023b\u023c",
    "\u0007\u000f\u0002\u0002\u023c\u023d\u0005\u0006\u0004\u0002\u023d\u0260",
    "\u0003\u0002\u0002\u0002\u023e\u023f\u0007Q\u0002\u0002\u023f\u0240",
    "\u0007\u000e\u0002\u0002\u0240\u0241\u0005R*\u0002\u0241\u0242\u0007",
    "U\u0002\u0002\u0242\u0243\u0005\u00d8m\u0002\u0243\u0244\u0007\u000f",
    "\u0002\u0002\u0244\u0245\u0005\u0006\u0004\u0002\u0245\u0260\u0003\u0002",
    "\u0002\u0002\u0246\u0247\u0007Q\u0002\u0002\u0247\u0248\u0007\u000e",
    "\u0002\u0002\u0248\u0249\u0005\u00dan\u0002\u0249\u024a\u0007m\u0002",
    "\u0002\u024a\u024b\u0005\u00d8m\u0002\u024b\u024c\u0007\u000f\u0002",
    "\u0002\u024c\u024d\u0005\u0006\u0004\u0002\u024d\u0260\u0003\u0002\u0002",
    "\u0002\u024e\u024f\u0007Q\u0002\u0002\u024f\u0250\u0007\u000e\u0002",
    "\u0002\u0250\u0251\u0007_\u0002\u0002\u0251\u0252\u0005T+\u0002\u0252",
    "\u0253\u0007m\u0002\u0002\u0253\u0254\u0005\u00d8m\u0002\u0254\u0255",
    "\u0007\u000f\u0002\u0002\u0255\u0256\u0005\u0006\u0004\u0002\u0256\u0260",
    "\u0003\u0002\u0002\u0002\u0257\u0258\u0007Q\u0002\u0002\u0258\u0259",
    "\u0007\u000e\u0002\u0002\u0259\u025a\u0005R*\u0002\u025a\u025b\u0007",
    "m\u0002\u0002\u025b\u025c\u0005\u00d8m\u0002\u025c\u025d\u0007\u000f",
    "\u0002\u0002\u025d\u025e\u0005\u0006\u0004\u0002\u025e\u0260\u0003\u0002",
    "\u0002\u0002\u025f\u01f2\u0003\u0002\u0002\u0002\u025f\u01fc\u0003\u0002",
    "\u0002\u0002\u025f\u0202\u0003\u0002\u0002\u0002\u025f\u0211\u0003\u0002",
    "\u0002\u0002\u025f\u0220\u0003\u0002\u0002\u0002\u025f\u022d\u0003\u0002",
    "\u0002\u0002\u025f\u0235\u0003\u0002\u0002\u0002\u025f\u023e\u0003\u0002",
    "\u0002\u0002\u025f\u0246\u0003\u0002\u0002\u0002\u025f\u024e\u0003\u0002",
    "\u0002\u0002\u025f\u0257\u0003\u0002\u0002\u0002\u0260Q\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0005*\u0016\u0002\u0262\u0263\u0005T+\u0002",
    "\u0263S\u0003\u0002\u0002\u0002\u0264\u0267\u0005\u00ba^\u0002\u0265",
    "\u0267\u0005\u001e\u0010\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0266",
    "\u0265\u0003\u0002\u0002\u0002\u0267U\u0003\u0002\u0002\u0002\u0268",
    "\u0269\u0007S\u0002\u0002\u0269\u026a\u0007\u000e\u0002\u0002\u026a",
    "\u026b\u0005\u00d8m\u0002\u026b\u026c\u0007\u000f\u0002\u0002\u026c",
    "\u026f\u0005\u0006\u0004\u0002\u026d\u026e\u0007M\u0002\u0002\u026e",
    "\u0270\u0005\u0006\u0004\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270W\u0003\u0002\u0002\u0002\u0271",
    "\u0274\u0005P)\u0002\u0272\u0274\u0005F$\u0002\u0273\u0271\u0003\u0002",
    "\u0002\u0002\u0273\u0272\u0003\u0002\u0002\u0002\u0274Y\u0003\u0002",
    "\u0002\u0002\u0275\u0278\u0007H\u0002\u0002\u0276\u0277\u0006.\u0006",
    "\u0002\u0277\u0279\u0005D#\u0002\u0278\u0276\u0003\u0002\u0002\u0002",
    "\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002\u0002\u0002",
    "\u027a\u027b\u0005\u0004\u0003\u0002\u027b[\u0003\u0002\u0002\u0002",
    "\u027c\u027f\u0007C\u0002\u0002\u027d\u027e\u0006/\u0007\u0002\u027e",
    "\u0280\u0005D#\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f\u0280",
    "\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0005\u0004\u0003\u0002\u0282]\u0003\u0002\u0002\u0002\u0283\u0284",
    "\u0005`1\u0002\u0284_\u0003\u0002\u0002\u0002\u0285\u0287\u0007\f\u0002",
    "\u0002\u0286\u0288\u0005\b\u0005\u0002\u0287\u0286\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002",
    "\u0002\u0289\u028a\u0007\r\u0002\u0002\u028aa\u0003\u0002\u0002\u0002",
    "\u028b\u028c\u0007_\u0002\u0002\u028c\u028d\u0005d3\u0002\u028d\u028e",
    "\u0005\u0004\u0003\u0002\u028ec\u0003\u0002\u0002\u0002\u028f\u0294",
    "\u0005f4\u0002\u0290\u0291\u0007\u0015\u0002\u0002\u0291\u0293\u0005",
    "f4\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0293\u0296\u0003\u0002",
    "\u0002\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002",
    "\u0002\u0002\u0295e\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002",
    "\u0002\u0002\u0297\u0299\u0005\u00ba^\u0002\u0298\u029a\u0005\u00d6",
    "l\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002",
    "\u0002\u0002\u029a\u029f\u0003\u0002\u0002\u0002\u029b\u029c\u0005\u001e",
    "\u0010\u0002\u029c\u029d\u0005\u00d6l\u0002\u029d\u029f\u0003\u0002",
    "\u0002\u0002\u029e\u0297\u0003\u0002\u0002\u0002\u029e\u029b\u0003\u0002",
    "\u0002\u0002\u029fg\u0003\u0002\u0002\u0002\u02a0\u02a1\u0007R\u0002",
    "\u0002\u02a1\u02a2\u0005\u00ba^\u0002\u02a2\u02a3\u0007\u000e\u0002",
    "\u0002\u02a3\u02a4\u0005z>\u0002\u02a4\u02a5\u0007\u000f\u0002\u0002",
    "\u02a5\u02a6\u0007\f\u0002\u0002\u02a6\u02a7\u0005\u0084C\u0002\u02a7",
    "\u02a8\u0007\r\u0002\u0002\u02a8i\u0003\u0002\u0002\u0002\u02a9\u02aa",
    "\u0007F\u0002\u0002\u02aa\u02ab\u0005\u00ba^\u0002\u02ab\u02ac\u0005",
    "l7\u0002\u02ack\u0003\u0002\u0002\u0002\u02ad\u02af\u0005n8\u0002\u02ae",
    "\u02ad\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af",
    "\u02b0\u0003\u0002\u0002\u0002\u02b0\u02b2\u0007\f\u0002\u0002\u02b1",
    "\u02b3\u0005p9\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b2\u02b3",
    "\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b5",
    "\u0007\r\u0002\u0002\u02b5m\u0003\u0002\u0002\u0002\u02b6\u02b7\u0007",
    "O\u0002\u0002\u02b7\u02b8\u0005\u00dan\u0002\u02b8o\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0005r:\u0002\u02baq\u0003\u0002\u0002\u0002\u02bb",
    "\u02bd\u0005t;\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd\u02be",
    "\u0003\u0002\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02be\u02bf",
    "\u0003\u0002\u0002\u0002\u02bfs\u0003\u0002\u0002\u0002\u02c0\u02c1",
    "\u0007o\u0002\u0002\u02c1\u02c5\u0005\u008aF\u0002\u02c2\u02c5\u0005",
    "\u008aF\u0002\u02c3\u02c5\u0007\u0014\u0002\u0002\u02c4\u02c0\u0003",
    "\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c4\u02c3\u0003",
    "\u0002\u0002\u0002\u02c5u\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007",
    "R\u0002\u0002\u02c7\u02c8\u0007 \u0002\u0002\u02c8\u02c9\u0005\u00ba",
    "^\u0002\u02c9\u02ca\u0007\u000e\u0002\u0002\u02ca\u02cb\u0005z>\u0002",
    "\u02cb\u02cc\u0007\u000f\u0002\u0002\u02cc\u02cd\u0007\f\u0002\u0002",
    "\u02cd\u02ce\u0005\u0086D\u0002\u02ce\u02cf\u0007\r\u0002\u0002\u02cf",
    "w\u0003\u0002\u0002\u0002\u02d0\u02d1\u0005z>\u0002\u02d1y\u0003\u0002",
    "\u0002\u0002\u02d2\u02dd\u0003\u0002\u0002\u0002\u02d3\u02dd\u0005~",
    "@\u0002\u02d4\u02d6\u0005|?\u0002\u02d5\u02d7\u0007\u0015\u0002\u0002",
    "\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002",
    "\u02d7\u02dd\u0003\u0002\u0002\u0002\u02d8\u02d9\u0005|?\u0002\u02d9",
    "\u02da\u0007\u0015\u0002\u0002\u02da\u02db\u0005~@\u0002\u02db\u02dd",
    "\u0003\u0002\u0002\u0002\u02dc\u02d2\u0003\u0002\u0002\u0002\u02dc\u02d3",
    "\u0003\u0002\u0002\u0002\u02dc\u02d4\u0003\u0002\u0002\u0002\u02dc\u02d8",
    "\u0003\u0002\u0002\u0002\u02dd{\u0003\u0002\u0002\u0002\u02de\u02e3",
    "\u0005\u0080A\u0002\u02df\u02e0\u0007\u0015\u0002\u0002\u02e0\u02e2",
    "\u0005\u0080A\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e5",
    "\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0003\u0002\u0002\u0002\u02e4}\u0003\u0002\u0002\u0002\u02e5\u02e3",
    "\u0003\u0002\u0002\u0002\u02e6\u02e7\u0005\u001a\u000e\u0002\u02e7\u007f",
    "\u0003\u0002\u0002\u0002\u02e8\u02e9\u0005\u0018\r\u0002\u02e9\u0081",
    "\u0003\u0002\u0002\u0002\u02ea\u02ed\u0005\u00ba^\u0002\u02eb\u02ed",
    "\u0005\u00be`\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ec\u02eb",
    "\u0003\u0002\u0002\u0002\u02ed\u0083\u0003\u0002\u0002\u0002\u02ee\u02f0",
    "\bC\u0001\u0002\u02ef\u02f1\u0005\b\u0005\u0002\u02f0\u02ef\u0003\u0002",
    "\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002",
    "\u0002\u0002\u02f2\u02f3\bC\u0001\u0002\u02f3\u0085\u0003\u0002\u0002",
    "\u0002\u02f4\u02f5\bD\u0001\u0002\u02f5\u02f6\u0005\u0084C\u0002\u02f6",
    "\u02f7\bD\u0001\u0002\u02f7\u0087\u0003\u0002\u0002\u0002\u02f8\u02f9",
    "\u0007\f\u0002\u0002\u02f9\u02fa\u0005\u0084C\u0002\u02fa\u02fb\u0007",
    "\r\u0002\u0002\u02fb\u02fe\u0003\u0002\u0002\u0002\u02fc\u02fe\u0005",
    "\u00dan\u0002\u02fd\u02f8\u0003\u0002\u0002\u0002\u02fd\u02fc\u0003",
    "\u0002\u0002\u0002\u02fe\u0089\u0003\u0002\u0002\u0002\u02ff\u0300\u0007",
    "k\u0002\u0002\u0300\u0301\u0005\u00caf\u0002\u0301\u0302\u0007\u000e",
    "\u0002\u0002\u0302\u0303\u0007\u000f\u0002\u0002\u0303\u0304\u0007\f",
    "\u0002\u0002\u0304\u0305\u0005\u0084C\u0002\u0305\u0306\u0007\r\u0002",
    "\u0002\u0306\u031a\u0003\u0002\u0002\u0002\u0307\u0308\u0007n\u0002",
    "\u0002\u0308\u0309\u0005\u00caf\u0002\u0309\u030a\u0007\u000e\u0002",
    "\u0002\u030a\u030b\u0005\u008cG\u0002\u030b\u030c\u0007\u000f\u0002",
    "\u0002\u030c\u030d\u0007\f\u0002\u0002\u030d\u030e\u0005\u0084C\u0002",
    "\u030e\u030f\u0007\r\u0002\u0002\u030f\u031a\u0003\u0002\u0002\u0002",
    "\u0310\u0311\u0005\u00caf\u0002\u0311\u0312\u0007\u000e\u0002\u0002",
    "\u0312\u0313\u0005x=\u0002\u0313\u0314\u0007\u000f\u0002\u0002\u0314",
    "\u0315\u0007\f\u0002\u0002\u0315\u0316\u0005\u0084C\u0002\u0316\u0317",
    "\u0007\r\u0002\u0002\u0317\u031a\u0003\u0002\u0002\u0002\u0318\u031a",
    "\u0005\u008eH\u0002\u0319\u02ff\u0003\u0002\u0002\u0002\u0319\u0307",
    "\u0003\u0002\u0002\u0002\u0319\u0310\u0003\u0002\u0002\u0002\u0319\u0318",
    "\u0003\u0002\u0002\u0002\u031a\u008b\u0003\u0002\u0002\u0002\u031b\u031c",
    "\u0005\u0080A\u0002\u031c\u008d\u0003\u0002\u0002\u0002\u031d\u031e",
    "\u0007 \u0002\u0002\u031e\u031f\u0005\u00caf\u0002\u031f\u0320\u0007",
    "\u000e\u0002\u0002\u0320\u0321\u0005x=\u0002\u0321\u0322\u0007\u000f",
    "\u0002\u0002\u0322\u0323\u0007\f\u0002\u0002\u0323\u0324\u0005\u0086",
    "D\u0002\u0324\u0325\u0007\r\u0002\u0002\u0325\u008f\u0003\u0002\u0002",
    "\u0002\u0326\u0328\u0005\u0092J\u0002\u0327\u0326\u0003\u0002\u0002",
    "\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0003\u0002\u0002",
    "\u0002\u0329\u032a\u0007\u0002\u0002\u0003\u032a\u0091\u0003\u0002\u0002",
    "\u0002\u032b\u032c\u0005\b\u0005\u0002\u032c\u0093\u0003\u0002\u0002",
    "\u0002\u032d\u032f\u0005\u0096L\u0002\u032e\u032d\u0003\u0002\u0002",
    "\u0002\u032e\u032f\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002",
    "\u0002\u0330\u0331\u0007\u0002\u0002\u0003\u0331\u0095\u0003\u0002\u0002",
    "\u0002\u0332\u0333\u0005\u0098M\u0002\u0333\u0097\u0003\u0002\u0002",
    "\u0002\u0334\u0336\u0005\u009aN\u0002\u0335\u0334\u0003\u0002\u0002",
    "\u0002\u0336\u0337\u0003\u0002\u0002\u0002\u0337\u0335\u0003\u0002\u0002",
    "\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u0099\u0003\u0002\u0002",
    "\u0002\u0339\u033d\u0005\u009cO\u0002\u033a\u033d\u0005\u00b0Y\u0002",
    "\u033b\u033d\u0005\n\u0006\u0002\u033c\u0339\u0003\u0002\u0002\u0002",
    "\u033c\u033a\u0003\u0002\u0002\u0002\u033c\u033b\u0003\u0002\u0002\u0002",
    "\u033d\u009b\u0003\u0002\u0002\u0002\u033e\u033f\u0007T\u0002\u0002",
    "\u033f\u0340\u0005\u009eP\u0002\u0340\u0341\u0005\u00a6T\u0002\u0341",
    "\u0342\u0005\u0004\u0003\u0002\u0342\u0348\u0003\u0002\u0002\u0002\u0343",
    "\u0344\u0007T\u0002\u0002\u0344\u0345\u0005\u00acW\u0002\u0345\u0346",
    "\u0005\u0004\u0003\u0002\u0346\u0348\u0003\u0002\u0002\u0002\u0347\u033e",
    "\u0003\u0002\u0002\u0002\u0347\u0343\u0003\u0002\u0002\u0002\u0348\u009d",
    "\u0003\u0002\u0002\u0002\u0349\u0355\u0005\u00a0Q\u0002\u034a\u0355",
    "\u0005\u00a2R\u0002\u034b\u0355\u0005\u00a4S\u0002\u034c\u034d\u0005",
    "\u00a0Q\u0002\u034d\u034e\u0007\u0015\u0002\u0002\u034e\u034f\u0005",
    "\u00a2R\u0002\u034f\u0355\u0003\u0002\u0002\u0002\u0350\u0351\u0005",
    "\u00a0Q\u0002\u0351\u0352\u0007\u0015\u0002\u0002\u0352\u0353\u0005",
    "\u00a4S\u0002\u0353\u0355\u0003\u0002\u0002\u0002\u0354\u0349\u0003",
    "\u0002\u0002\u0002\u0354\u034a\u0003\u0002\u0002\u0002\u0354\u034b\u0003",
    "\u0002\u0002\u0002\u0354\u034c\u0003\u0002\u0002\u0002\u0354\u0350\u0003",
    "\u0002\u0002\u0002\u0355\u009f\u0003\u0002\u0002\u0002\u0356\u0357\u0005",
    "\u00aeX\u0002\u0357\u00a1\u0003\u0002\u0002\u0002\u0358\u0359\u0007",
    " \u0002\u0002\u0359\u035a\u0007h\u0002\u0002\u035a\u035b\u0005\u00ae",
    "X\u0002\u035b\u00a3\u0003\u0002\u0002\u0002\u035c\u035d\u0007\f\u0002",
    "\u0002\u035d\u0366\u0007\r\u0002\u0002\u035e\u035f\u0007\f\u0002\u0002",
    "\u035f\u0361\u0005\u00a8U\u0002\u0360\u0362\u0007\u0015\u0002\u0002",
    "\u0361\u0360\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002",
    "\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0364\u0007\r\u0002\u0002",
    "\u0364\u0366\u0003\u0002\u0002\u0002\u0365\u035c\u0003\u0002\u0002\u0002",
    "\u0365\u035e\u0003\u0002\u0002\u0002\u0366\u00a5\u0003\u0002\u0002\u0002",
    "\u0367\u0368\u0007j\u0002\u0002\u0368\u0369\u0005\u00acW\u0002\u0369",
    "\u00a7\u0003\u0002\u0002\u0002\u036a\u036f\u0005\u00aaV\u0002\u036b",
    "\u036c\u0007\u0015\u0002\u0002\u036c\u036e\u0005\u00aaV\u0002\u036d",
    "\u036b\u0003\u0002\u0002\u0002\u036e\u0371\u0003\u0002\u0002\u0002\u036f",
    "\u036d\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370",
    "\u00a9\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0372",
    "\u0378\u0005\u00aeX\u0002\u0373\u0374\u0005\u00eav\u0002\u0374\u0375",
    "\u0007h\u0002\u0002\u0375\u0376\u0005\u00aeX\u0002\u0376\u0378\u0003",
    "\u0002\u0002\u0002\u0377\u0372\u0003\u0002\u0002\u0002\u0377\u0373\u0003",
    "\u0002\u0002\u0002\u0378\u00ab\u0003\u0002\u0002\u0002\u0379\u037a\u0007",
    "q\u0002\u0002\u037a\u00ad\u0003\u0002\u0002\u0002\u037b\u037c\u0005",
    "\u00ba^\u0002\u037c\u00af\u0003\u0002\u0002\u0002\u037d\u037e\u0007",
    "N\u0002\u0002\u037e\u037f\u0007 \u0002\u0002\u037f\u0380\u0005\u00a6",
    "T\u0002\u0380\u0381\u0005\u0004\u0003\u0002\u0381\u039b\u0003\u0002",
    "\u0002\u0002\u0382\u0383\u0007N\u0002\u0002\u0383\u0384\u0005\u00b2",
    "Z\u0002\u0384\u0385\u0005\u00a6T\u0002\u0385\u0386\u0005\u0004\u0003",
    "\u0002\u0386\u039b\u0003\u0002\u0002\u0002\u0387\u0388\u0007N\u0002",
    "\u0002\u0388\u0389\u0005\u00b2Z\u0002\u0389\u038a\u0005\u0004\u0003",
    "\u0002\u038a\u039b\u0003\u0002\u0002\u0002\u038b\u038c\u0007N\u0002",
    "\u0002\u038c\u039b\u0005b2\u0002\u038d\u038e\u0007N\u0002\u0002\u038e",
    "\u039b\u00050\u0019\u0002\u038f\u0390\u0007N\u0002\u0002\u0390\u0391",
    "\u0007J\u0002\u0002\u0391\u039b\u00052\u001a\u0002\u0392\u0393\u0007",
    "N\u0002\u0002\u0393\u0394\u0007J\u0002\u0002\u0394\u039b\u0005j6\u0002",
    "\u0395\u0396\u0007N\u0002\u0002\u0396\u0397\u0007J\u0002\u0002\u0397",
    "\u0398\u0005\u00dan\u0002\u0398\u0399\u0005\u0004\u0003\u0002\u0399",
    "\u039b\u0003\u0002\u0002\u0002\u039a\u037d\u0003\u0002\u0002\u0002\u039a",
    "\u0382\u0003\u0002\u0002\u0002\u039a\u0387\u0003\u0002\u0002\u0002\u039a",
    "\u038b\u0003\u0002\u0002\u0002\u039a\u038d\u0003\u0002\u0002\u0002\u039a",
    "\u038f\u0003\u0002\u0002\u0002\u039a\u0392\u0003\u0002\u0002\u0002\u039a",
    "\u0395\u0003\u0002\u0002\u0002\u039b\u00b1\u0003\u0002\u0002\u0002\u039c",
    "\u039d\u0007\f\u0002\u0002\u039d\u03a6\u0007\r\u0002\u0002\u039e\u039f",
    "\u0007\f\u0002\u0002\u039f\u03a1\u0005\u00b4[\u0002\u03a0\u03a2\u0007",
    "\u0015\u0002\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003",
    "\u0002\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007",
    "\r\u0002\u0002\u03a4\u03a6\u0003\u0002\u0002\u0002\u03a5\u039c\u0003",
    "\u0002\u0002\u0002\u03a5\u039e\u0003\u0002\u0002\u0002\u03a6\u00b3\u0003",
    "\u0002\u0002\u0002\u03a7\u03ac\u0005\u00b6\\\u0002\u03a8\u03a9\u0007",
    "\u0015\u0002\u0002\u03a9\u03ab\u0005\u00b6\\\u0002\u03aa\u03a8\u0003",
    "\u0002\u0002\u0002\u03ab\u03ae\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003",
    "\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u00b5\u0003",
    "\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03af\u03b5\u0005",
    "\u00eav\u0002\u03b0\u03b1\u0005\u00eav\u0002\u03b1\u03b2\u0007h\u0002",
    "\u0002\u03b2\u03b3\u0005\u00eav\u0002\u03b3\u03b5\u0003\u0002\u0002",
    "\u0002\u03b4\u03af\u0003\u0002\u0002\u0002\u03b4\u03b0\u0003\u0002\u0002",
    "\u0002\u03b5\u00b7\u0003\u0002\u0002\u0002\u03b6\u03ba\u0005\u00bc_",
    "\u0002\u03b7\u03b8\u0006]\b\u0002\u03b8\u03ba\u0007c\u0002\u0002\u03b9",
    "\u03b6\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03ba",
    "\u00b9\u0003\u0002\u0002\u0002\u03bb\u03bf\u0005\u00bc_\u0002\u03bc",
    "\u03bd\u0006^\t\u0002\u03bd\u03bf\u0007c\u0002\u0002\u03be\u03bb\u0003",
    "\u0002\u0002\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03bf\u00bb\u0003",
    "\u0002\u0002\u0002\u03c0\u03c3\u0007r\u0002\u0002\u03c1\u03c3\u0005",
    "\u00f2z\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c1\u0003",
    "\u0002\u0002\u0002\u03c3\u00bd\u0003\u0002\u0002\u0002\u03c4\u03c9\u0007",
    "\u000e\u0002\u0002\u03c5\u03c7\u0005\u00d8m\u0002\u03c6\u03c8\u0007",
    "\u0015\u0002\u0002\u03c7\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003",
    "\u0002\u0002\u0002\u03c8\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c5\u0003",
    "\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003",
    "\u0002\u0002\u0002\u03cb\u03d9\u0007\u000f\u0002\u0002\u03cc\u03cd\u0007",
    "\u000e\u0002\u0002\u03cd\u03ce\u0007\u0013\u0002\u0002\u03ce\u03cf\u0005",
    "\u00ba^\u0002\u03cf\u03d0\u0007\u000f\u0002\u0002\u03d0\u03d9\u0003",
    "\u0002\u0002\u0002\u03d1\u03d2\u0007\u000e\u0002\u0002\u03d2\u03d3\u0005",
    "\u00d8m\u0002\u03d3\u03d4\u0007\u0015\u0002\u0002\u03d4\u03d5\u0007",
    "\u0013\u0002\u0002\u03d5\u03d6\u0005\u00ba^\u0002\u03d6\u03d7\u0007",
    "\u000f\u0002\u0002\u03d7\u03d9\u0003\u0002\u0002\u0002\u03d8\u03c4\u0003",
    "\u0002\u0002\u0002\u03d8\u03cc\u0003\u0002\u0002\u0002\u03d8\u03d1\u0003",
    "\u0002\u0002\u0002\u03d9\u00bf\u0003\u0002\u0002\u0002\u03da\u03dc\u0007",
    "\u0010\u0002\u0002\u03db\u03dd\u0005\u00c2b\u0002\u03dc\u03db\u0003",
    "\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03ec\u0003",
    "\u0002\u0002\u0002\u03de\u03e1\u0005\u00dan\u0002\u03df\u03e1\u0005",
    "\u00c4c\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e0\u03df\u0003",
    "\u0002\u0002\u0002\u03e1\u03e9\u0003\u0002\u0002\u0002\u03e2\u03e5\u0005",
    "\u00c2b\u0002\u03e3\u03e6\u0005\u00dan\u0002\u03e4\u03e6\u0005\u00c4",
    "c\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e4\u0003\u0002",
    "\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7\u03e2\u0003\u0002",
    "\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002\u0002\u03e9\u03e7\u0003\u0002",
    "\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03ed\u0003\u0002",
    "\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03e0\u0003\u0002",
    "\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed\u03ef\u0003\u0002",
    "\u0002\u0002\u03ee\u03f0\u0005\u00c2b\u0002\u03ef\u03ee\u0003\u0002",
    "\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002",
    "\u0002\u0002\u03f1\u03f2\u0007\u0011\u0002\u0002\u03f2\u00c1\u0003\u0002",
    "\u0002\u0002\u03f3\u03f5\u0007\u0015\u0002\u0002\u03f4\u03f3\u0003\u0002",
    "\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002",
    "\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7\u00c3\u0003\u0002",
    "\u0002\u0002\u03f8\u03f9\u0007\u0013\u0002\u0002\u03f9\u03fa\u0005\u00da",
    "n\u0002\u03fa\u00c5\u0003\u0002\u0002\u0002\u03fb\u0400\u0005\u00c8",
    "e\u0002\u03fc\u03fd\u0007\u0015\u0002\u0002\u03fd\u03ff\u0005\u00c8",
    "e\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0402\u0003\u0002",
    "\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002",
    "\u0002\u0002\u0401\u00c7\u0003\u0002\u0002\u0002\u0402\u0400\u0003\u0002",
    "\u0002\u0002\u0403\u040b\u0005\u008aF\u0002\u0404\u040b\u0005\u00d0",
    "i\u0002\u0405\u0406\u0005\u00caf\u0002\u0406\u0407\u00070\u0002\u0002",
    "\u0407\u0408\u0005\u00dan\u0002\u0408\u040b\u0003\u0002\u0002\u0002",
    "\u0409\u040b\u0005\u00b8]\u0002\u040a\u0403\u0003\u0002\u0002\u0002",
    "\u040a\u0404\u0003\u0002\u0002\u0002\u040a\u0405\u0003\u0002\u0002\u0002",
    "\u040a\u0409\u0003\u0002\u0002\u0002\u040b\u00c9\u0003\u0002\u0002\u0002",
    "\u040c\u040f\u0005\u00ccg\u0002\u040d\u040f\u0005\u00ceh\u0002\u040e",
    "\u040c\u0003\u0002\u0002\u0002\u040e\u040d\u0003\u0002\u0002\u0002\u040f",
    "\u00cb\u0003\u0002\u0002\u0002\u0410\u0414\u0005\u00eav\u0002\u0411",
    "\u0414\u0007q\u0002\u0002\u0412\u0414\u0007\n\u0002\u0002\u0413\u0410",
    "\u0003\u0002\u0002\u0002\u0413\u0411\u0003\u0002\u0002\u0002\u0413\u0412",
    "\u0003\u0002\u0002\u0002\u0414\u00cd\u0003\u0002\u0002\u0002\u0415\u0416",
    "\u0005\u00dan\u0002\u0416\u00cf\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0005\u00b8]\u0002\u0418\u0419\u0005\u00d6l\u0002\u0419\u00d1\u0003",
    "\u0002\u0002\u0002\u041a\u041f\u0007\u000e\u0002\u0002\u041b\u041d\u0005",
    "\u00d4k\u0002\u041c\u041e\u0007\u0015\u0002\u0002\u041d\u041c\u0003",
    "\u0002\u0002\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041e\u0420\u0003",
    "\u0002\u0002\u0002\u041f\u041b\u0003\u0002\u0002\u0002\u041f\u0420\u0003",
    "\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u0422\u0007",
    "\u000f\u0002\u0002\u0422\u00d3\u0003\u0002\u0002\u0002\u0423\u0425\u0007",
    "\u0013\u0002\u0002\u0424\u0423\u0003\u0002\u0002\u0002\u0424\u0425\u0003",
    "\u0002\u0002\u0002\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u042c\u0005",
    "\u00d8m\u0002\u0427\u0428\u0007\u0015\u0002\u0002\u0428\u0429\u0007",
    "\u0013\u0002\u0002\u0429\u042b\u0005\u00d8m\u0002\u042a\u0427\u0003",
    "\u0002\u0002\u0002\u042b\u042e\u0003\u0002\u0002\u0002\u042c\u042a\u0003",
    "\u0002\u0002\u0002\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u00d5\u0003",
    "\u0002\u0002\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042f\u0430\u0007",
    "1\u0002\u0002\u0430\u0431\u0005\u00dan\u0002\u0431\u00d7\u0003\u0002",
    "\u0002\u0002\u0432\u0437\u0005\u00dan\u0002\u0433\u0434\u0007\u0015",
    "\u0002\u0002\u0434\u0436\u0005\u00dan\u0002\u0435\u0433\u0003\u0002",
    "\u0002\u0002\u0436\u0439\u0003\u0002\u0002\u0002\u0437\u0435\u0003\u0002",
    "\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u00d9\u0003\u0002",
    "\u0002\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u043a\u043b\bn\u0001",
    "\u0002\u043b\u0482\u0007[\u0002\u0002\u043c\u0482\u0005\u00b8]\u0002",
    "\u043d\u0482\u0007@\u0002\u0002\u043e\u0482\u0007A\u0002\u0002\u043f",
    "\u0482\u0007\n\u0002\u0002\u0440\u0482\u0007q\u0002\u0002\u0441\u0482",
    "\u0005\u00c0a\u0002\u0442\u0447\u0007\f\u0002\u0002\u0443\u0445\u0005",
    "\u00c6d\u0002\u0444\u0446\u0007\u0015\u0002\u0002\u0445\u0444\u0003",
    "\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0448\u0003",
    "\u0002\u0002\u0002\u0447\u0443\u0003\u0002\u0002\u0002\u0447\u0448\u0003",
    "\u0002\u0002\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u0482\u0007",
    "\r\u0002\u0002\u044a\u044c\u0007R\u0002\u0002\u044b\u044d\u0005\u00ba",
    "^\u0002\u044c\u044b\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002",
    "\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u044f\u0007\u000e",
    "\u0002\u0002\u044f\u0450\u0005z>\u0002\u0450\u0451\u0007\u000f\u0002",
    "\u0002\u0451\u0452\u0007\f\u0002\u0002\u0452\u0453\u0005\u0084C\u0002",
    "\u0453\u0454\u0007\r\u0002\u0002\u0454\u0482\u0003\u0002\u0002\u0002",
    "\u0455\u0457\u0007F\u0002\u0002\u0456\u0458\u0005\u00ba^\u0002\u0457",
    "\u0456\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002\u0458",
    "\u0459\u0003\u0002\u0002\u0002\u0459\u0482\u0005l7\u0002\u045a\u045b",
    "\u0007R\u0002\u0002\u045b\u045d\u0007 \u0002\u0002\u045c\u045e\u0005",
    "\u00ba^\u0002\u045d\u045c\u0003\u0002\u0002\u0002\u045d\u045e\u0003",
    "\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002\u045f\u0460\u0007",
    "\u000e\u0002\u0002\u0460\u0461\u0005z>\u0002\u0461\u0462\u0007\u000f",
    "\u0002\u0002\u0462\u0463\u0007\f\u0002\u0002\u0463\u0464\u0005\u0086",
    "D\u0002\u0464\u0465\u0007\r\u0002\u0002\u0465\u0482\u0003\u0002\u0002",
    "\u0002\u0466\u0482\u0007\u000b\u0002\u0002\u0467\u0468\u0007\u000e\u0002",
    "\u0002\u0468\u0469\u0005\u00d8m\u0002\u0469\u046a\u0007\u000f\u0002",
    "\u0002\u046a\u0482\u0003\u0002\u0002\u0002\u046b\u046c\u0007W\u0002",
    "\u0002\u046c\u046e\u0005\u00dan\u0002\u046d\u046f\u0005\u00d2j\u0002",
    "\u046e\u046d\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002",
    "\u046f\u0482\u0003\u0002\u0002\u0002\u0470\u0471\u0005\u00dco\u0002",
    "\u0471\u0472\u0005\u00dan\u0014\u0472\u0482\u0003\u0002\u0002\u0002",
    "\u0473\u0474\u0005\u0082B\u0002\u0474\u0475\u0006n\n\u0002\u0475\u0476",
    "\u0007=\u0002\u0002\u0476\u0477\u0005\u0088E\u0002\u0477\u0482\u0003",
    "\u0002\u0002\u0002\u0478\u0479\bn\u0001\u0002\u0479\u047f\u0007c\u0002",
    "\u0002\u047a\u047c\u0006n\u000b\u0002\u047b\u047d\u0007 \u0002\u0002",
    "\u047c\u047b\u0003\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002",
    "\u047d\u047e\u0003\u0002\u0002\u0002\u047e\u0480\u0005\u00dan\u0002",
    "\u047f\u047a\u0003\u0002\u0002\u0002\u047f\u0480\u0003\u0002\u0002\u0002",
    "\u0480\u0482\u0003\u0002\u0002\u0002\u0481\u043a\u0003\u0002\u0002\u0002",
    "\u0481\u043c\u0003\u0002\u0002\u0002\u0481\u043d\u0003\u0002\u0002\u0002",
    "\u0481\u043e\u0003\u0002\u0002\u0002\u0481\u043f\u0003\u0002\u0002\u0002",
    "\u0481\u0440\u0003\u0002\u0002\u0002\u0481\u0441\u0003\u0002\u0002\u0002",
    "\u0481\u0442\u0003\u0002\u0002\u0002\u0481\u044a\u0003\u0002\u0002\u0002",
    "\u0481\u0455\u0003\u0002\u0002\u0002\u0481\u045a\u0003\u0002\u0002\u0002",
    "\u0481\u0466\u0003\u0002\u0002\u0002\u0481\u0467\u0003\u0002\u0002\u0002",
    "\u0481\u046b\u0003\u0002\u0002\u0002\u0481\u0470\u0003\u0002\u0002\u0002",
    "\u0481\u0473\u0003\u0002\u0002\u0002\u0481\u0478\u0003\u0002\u0002\u0002",
    "\u0482\u04c8\u0003\u0002\u0002\u0002\u0483\u0484\f\u0013\u0002\u0002",
    "\u0484\u0485\u0005\u00dep\u0002\u0485\u0486\u0005\u00dan\u0014\u0486",
    "\u04c7\u0003\u0002\u0002\u0002\u0487\u0488\f\u0012\u0002\u0002\u0488",
    "\u0489\u0005\u00e0q\u0002\u0489\u048a\u0005\u00dan\u0013\u048a\u04c7",
    "\u0003\u0002\u0002\u0002\u048b\u048c\f\u0011\u0002\u0002\u048c\u048d",
    "\u0005\u00e2r\u0002\u048d\u048e\u0005\u00dan\u0012\u048e\u04c7\u0003",
    "\u0002\u0002\u0002\u048f\u0490\f\u0010\u0002\u0002\u0490\u0491\u0005",
    "\u00e4s\u0002\u0491\u0492\u0005\u00dan\u0011\u0492\u04c7\u0003\u0002",
    "\u0002\u0002\u0493\u0494\f\u000f\u0002\u0002\u0494\u0495\u0007U\u0002",
    "\u0002\u0495\u04c7\u0005\u00dan\u0010\u0496\u0497\f\u000e\u0002\u0002",
    "\u0497\u0498\u0007V\u0002\u0002\u0498\u04c7\u0005\u00dan\u000f\u0499",
    "\u049a\f\r\u0002\u0002\u049a\u049b\u0005\u00e6t\u0002\u049b\u049c\u0005",
    "\u00dan\u000e\u049c\u04c7\u0003\u0002\u0002\u0002\u049d\u049e\f\f\u0002",
    "\u0002\u049e\u049f\u0007(\u0002\u0002\u049f\u04c7\u0005\u00dan\r\u04a0",
    "\u04a1\f\u000b\u0002\u0002\u04a1\u04a2\u0007*\u0002\u0002\u04a2\u04c7",
    "\u0005\u00dan\f\u04a3\u04a4\f\n\u0002\u0002\u04a4\u04a5\u0007)\u0002",
    "\u0002\u04a5\u04c7\u0005\u00dan\u000b\u04a6\u04a7\f\t\u0002\u0002\u04a7",
    "\u04a8\u0007-\u0002\u0002\u04a8\u04c7\u0005\u00dan\n\u04a9\u04aa\f\b",
    "\u0002\u0002\u04aa\u04ab\u0007.\u0002\u0002\u04ab\u04c7\u0005\u00da",
    "n\t\u04ac\u04ad\f\u0007\u0002\u0002\u04ad\u04ae\u0007/\u0002\u0002\u04ae",
    "\u04af\u0005\u00dan\u0002\u04af\u04b0\u00070\u0002\u0002\u04b0\u04b1",
    "\u0005\u00dan\b\u04b1\u04c7\u0003\u0002\u0002\u0002\u04b2\u04b3\f\u0004",
    "\u0002\u0002\u04b3\u04b4\u00071\u0002\u0002\u04b4\u04c7\u0005\u00da",
    "n\u0005\u04b5\u04b6\f\u0003\u0002\u0002\u04b6\u04b7\u0005\u00e8u\u0002",
    "\u04b7\u04b8\u0005\u00dan\u0004\u04b8\u04c7\u0003\u0002\u0002\u0002",
    "\u04b9\u04ba\f\u0019\u0002\u0002\u04ba\u04c7\u0005\u00d2j\u0002\u04bb",
    "\u04bc\f\u0018\u0002\u0002\u04bc\u04bd\u0007\u0010\u0002\u0002\u04bd",
    "\u04be\u0005\u00d8m\u0002\u04be\u04bf\u0007\u0011\u0002\u0002\u04bf",
    "\u04c7\u0003\u0002\u0002\u0002\u04c0\u04c1\f\u0017\u0002\u0002\u04c1",
    "\u04c2\u0007\u0012\u0002\u0002\u04c2\u04c7\u0005\u00eav\u0002\u04c3",
    "\u04c4\f\u0015\u0002\u0002\u04c4\u04c5\u0006n\u001f\u0002\u04c5\u04c7",
    "\t\u0003\u0002\u0002\u04c6\u0483\u0003\u0002\u0002\u0002\u04c6\u0487",
    "\u0003\u0002\u0002\u0002\u04c6\u048b\u0003\u0002\u0002\u0002\u04c6\u048f",
    "\u0003\u0002\u0002\u0002\u04c6\u0493\u0003\u0002\u0002\u0002\u04c6\u0496",
    "\u0003\u0002\u0002\u0002\u04c6\u0499\u0003\u0002\u0002\u0002\u04c6\u049d",
    "\u0003\u0002\u0002\u0002\u04c6\u04a0\u0003\u0002\u0002\u0002\u04c6\u04a3",
    "\u0003\u0002\u0002\u0002\u04c6\u04a6\u0003\u0002\u0002\u0002\u04c6\u04a9",
    "\u0003\u0002\u0002\u0002\u04c6\u04ac\u0003\u0002\u0002\u0002\u04c6\u04b2",
    "\u0003\u0002\u0002\u0002\u04c6\u04b5\u0003\u0002\u0002\u0002\u04c6\u04b9",
    "\u0003\u0002\u0002\u0002\u04c6\u04bb\u0003\u0002\u0002\u0002\u04c6\u04c0",
    "\u0003\u0002\u0002\u0002\u04c6\u04c3\u0003\u0002\u0002\u0002\u04c7\u04ca",
    "\u0003\u0002\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c8\u04c9",
    "\u0003\u0002\u0002\u0002\u04c9\u00db\u0003\u0002\u0002\u0002\u04ca\u04c8",
    "\u0003\u0002\u0002\u0002\u04cb\u04cc\t\u0004\u0002\u0002\u04cc\u00dd",
    "\u0003\u0002\u0002\u0002\u04cd\u04ce\t\u0005\u0002\u0002\u04ce\u00df",
    "\u0003\u0002\u0002\u0002\u04cf\u04d0\t\u0006\u0002\u0002\u04d0\u00e1",
    "\u0003\u0002\u0002\u0002\u04d1\u04d2\t\u0007\u0002\u0002\u04d2\u00e3",
    "\u0003\u0002\u0002\u0002\u04d3\u04d4\t\b\u0002\u0002\u04d4\u00e5\u0003",
    "\u0002\u0002\u0002\u04d5\u04d6\t\t\u0002\u0002\u04d6\u00e7\u0003\u0002",
    "\u0002\u0002\u04d7\u04d8\t\n\u0002\u0002\u04d8\u00e9\u0003\u0002\u0002",
    "\u0002\u04d9\u04dd\u0007r\u0002\u0002\u04da\u04dd\u0005\u00ecw\u0002",
    "\u04db\u04dd\u0005\u00f2z\u0002\u04dc\u04d9\u0003\u0002\u0002\u0002",
    "\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002",
    "\u04dd\u00eb\u0003\u0002\u0002\u0002\u04de\u04e3\u0005\u00eex\u0002",
    "\u04df\u04e3\u0005\u00f0y\u0002\u04e0\u04e3\u0007@\u0002\u0002\u04e1",
    "\u04e3\u0007A\u0002\u0002\u04e2\u04de\u0003\u0002\u0002\u0002\u04e2",
    "\u04df\u0003\u0002\u0002\u0002\u04e2\u04e0\u0003\u0002\u0002\u0002\u04e2",
    "\u04e1\u0003\u0002\u0002\u0002\u04e3\u00ed\u0003\u0002\u0002\u0002\u04e4",
    "\u04e5\t\u000b\u0002\u0002\u04e5\u00ef\u0003\u0002\u0002\u0002\u04e6",
    "\u04e7\u0007d\u0002\u0002\u04e7\u00f1\u0003\u0002\u0002\u0002\u04e8",
    "\u04e9\t\f\u0002\u0002\u04e9\u00f3\u0003\u0002\u0002\u0002u\u00f9\u010a",
    "\u010f\u0113\u011a\u012a\u012e\u0135\u0137\u013d\u0141\u0145\u014a\u014c",
    "\u0152\u0155\u0160\u0163\u0167\u016e\u0176\u0183\u0188\u018d\u0192\u0196",
    "\u01a9\u01b6\u01c4\u01c9\u01d3\u01d8\u01dc\u01e0\u01e5\u01eb\u01f0\u0205",
    "\u0209\u020d\u0217\u021b\u0224\u0228\u025f\u0266\u026f\u0273\u0278\u027f",
    "\u0287\u0294\u0299\u029e\u02ae\u02b2\u02be\u02c4\u02d6\u02dc\u02e3\u02ec",
    "\u02f0\u02fd\u0319\u0327\u032e\u0337\u033c\u0347\u0354\u0361\u0365\u036f",
    "\u0377\u039a\u03a1\u03a5\u03ac\u03b4\u03b9\u03be\u03c2\u03c7\u03c9\u03d8",
    "\u03dc\u03e0\u03e5\u03e9\u03ec\u03ef\u03f6\u0400\u040a\u040e\u0413\u041d",
    "\u041f\u0424\u042c\u0437\u0445\u0447\u044c\u0457\u045d\u046e\u047c\u047f",
    "\u0481\u04c6\u04c8\u04dc\u04e2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, "'{'", "'}'", "'('", "')'", "'['", "']'", "'.'", 
                     "'...'", "';'", "','", "'<'", "'>'", "'<='", "'>='", 
                     "'=='", "'!='", "'==='", "'!=='", "'+'", "'-'", "'*'", 
                     "'%'", "'**'", "'++'", "'--'", "'<<'", "'>>'", "'>>>'", 
                     "'&'", "'|'", "'^'", "'!'", "'~'", "'&&'", "'||'", 
                     "'?'", "':'", "'='", "'+='", "'-='", "'*='", "'%='", 
                     "'**='", "'<<='", "'>>='", "'>>>='", "'&='", "'|='", 
                     "'^='", "'=>'", null, null, null, null, "'await'", 
                     "'break'", "'case'", "'catch'", "'class'", "'const'", 
                     "'continue'", "'debugger'", "'default'", "'delete'", 
                     "'do'", "'else'", "'export'", "'extends'", "'finally'", 
                     "'for'", "'function'", "'if'", "'import'", "'in'", 
                     "'instanceof'", "'new'", "'return'", "'super'", "'switch'", 
                     "'this'", "'throw'", "'try'", "'typeof'", "'var'", 
                     "'void'", "'while'", "'with'", "'yield'", "'enum'", 
                     "'null'", "'true'", "'false'", "'as'", "'async'", "'from'", 
                     "'get'", "'let'", "'of'", "'set'", "'static'", "'target'" ];

var symbolicNames = [ null, "EOS", "Discard", "MultiLineComment", "SingleLineHTMLOpenComment", 
                      "SingleLineHTMLCloseComment", "SingleLineDelimitedComment", 
                      "LeadingHTMLCloseComment", "NumericLiteral", "RegularExpressionLiteral", 
                      "OpenBrace", "CloseBrace", "OpenParen", "CloseParen", 
                      "OpenBracket", "CloseBracket", "Dot", "Spread", "SemiColon", 
                      "Comma", "LessThan", "GreaterThan", "LessThanEquals", 
                      "GreaterThanEquals", "Equals", "NotEquals", "IdentityEquals", 
                      "IdentityNotEquals", "Plus", "Minus", "Multiply", 
                      "Modulo", "Power", "PlusPlus", "MinusMinus", "LeftShiftArithmetic", 
                      "RightShiftArithmetic", "RightShiftLogical", "BitAnd", 
                      "BitOr", "BitXor", "Not", "BitNot", "And", "Or", "QuestionMark", 
                      "Colon", "Assign", "PlusAssign", "MinusAssign", "MultiplyAssign", 
                      "ModuloAssign", "PowerAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitOrAssign", "BitXorAssign", "FatArrow", 
                      "Divide", "DivideAssign", "NullLiteral", "BooleanLiteral", 
                      "Await", "Break", "Case", "Catch", "Class", "Const", 
                      "Continue", "Debugger", "Default", "Delete", "Do", 
                      "Else", "Export", "Extends", "Finally", "For", "Function", 
                      "If", "Import", "In", "Instanceof", "New", "Return", 
                      "Super", "Switch", "This", "Throw", "Try", "Typeof", 
                      "Var", "Void", "While", "With", "Yield", "Enum", "Null", 
                      "True", "False", "As", "Async", "From", "Get", "Let", 
                      "Of", "Set", "Static", "Target", "StringLiteral", 
                      "IdentifierName", "SingleLineComment", "WhiteSpace", 
                      "LineTerminator" ];

var ruleNames =  [ "file", "eos", "statement", "statementList", "statementListItem", 
                   "emptyStatement", "returnStatement", "debuggerStatement", 
                   "expressionStatement", "bindingElementList", "bindingElisionElement", 
                   "bindingElement", "bindingRestElement", "singleNameBinding", 
                   "bindingPattern", "objectBindingPattern", "arrayBindingPattern", 
                   "bindingPropertyList", "bindingProperty", "lexicalDeclaration", 
                   "letOrConst", "bindingList", "lexicalBinding", "declaration", 
                   "hoistableDeclaration", "throwStatement", "tryStatement", 
                   "catchPart", "finallyPart", "catchParameter", "withStatement", 
                   "labelledStatement", "labelledItem", "labelIdentifier", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "iterationStatement", "forDeclaration", 
                   "forBinding", "ifStatement", "breakableStatement", "continueStatement", 
                   "breakStatement", "blockStatement", "block", "variableStatement", 
                   "variableDeclarationList", "variableDeclaration", "functionDeclaration", 
                   "classDeclaration", "classTail", "classHeritage", "classBody", 
                   "classElementList", "classElement", "generatorDeclaration", 
                   "uniqueFormalParameters", "formalParameters", "formalParameterList", 
                   "functionRestParameter", "formalParameter", "arrowParameters", 
                   "functionBody", "generatorBody", "conciseBody", "methodDefinition", 
                   "propertySetParameterList", "generatorMethod", "script", 
                   "scriptBody", "module", "moduleBody", "moduleItemList", 
                   "moduleItem", "importDeclaration", "importClause", "importedDefaultBinding", 
                   "nameSpaceImport", "namedImports", "fromClause", "importsList", 
                   "importSpecifier", "moduleSpecifier", "importedBinding", 
                   "exportDeclaration", "exportClause", "exportsList", "exportSpecifier", 
                   "identifierReference", "bindingIdentifier", "identifier", 
                   "coverParenthesizedExpressionAndArrowParameterList", 
                   "arrayLiteral", "elision", "spreadElement", "propertyDefinitionList", 
                   "propertyDefinition", "propertyName", "literalPropertyName", 
                   "computedPropertyName", "coverInitializedName", "arguments", 
                   "argumentList", "initializer", "expressionList", "expression", 
                   "unaryOperator", "multiplicativeOperator", "additiveOperator", 
                   "shiftOperator", "relationalOperator", "equalityOperator", 
                   "assignmentOperator", "identifierName", "reservedWord", 
                   "keyword", "futureReservedWord", "miscIdentifier" ];

function ECMAScriptParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	var path = require('path');
	require(path.join(process.cwd(), 'build/src/static/antlr4/BaseParser'))
	  .addOwnMethodsTo(ECMAScriptParser.prototype);

    return this;
}

ECMAScriptParser.prototype = Object.create(antlr4.Parser.prototype);
ECMAScriptParser.prototype.constructor = ECMAScriptParser;

Object.defineProperty(ECMAScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ECMAScriptParser.EOF = antlr4.Token.EOF;
ECMAScriptParser.EOS = 1;
ECMAScriptParser.Discard = 2;
ECMAScriptParser.MultiLineComment = 3;
ECMAScriptParser.SingleLineHTMLOpenComment = 4;
ECMAScriptParser.SingleLineHTMLCloseComment = 5;
ECMAScriptParser.SingleLineDelimitedComment = 6;
ECMAScriptParser.LeadingHTMLCloseComment = 7;
ECMAScriptParser.NumericLiteral = 8;
ECMAScriptParser.RegularExpressionLiteral = 9;
ECMAScriptParser.OpenBrace = 10;
ECMAScriptParser.CloseBrace = 11;
ECMAScriptParser.OpenParen = 12;
ECMAScriptParser.CloseParen = 13;
ECMAScriptParser.OpenBracket = 14;
ECMAScriptParser.CloseBracket = 15;
ECMAScriptParser.Dot = 16;
ECMAScriptParser.Spread = 17;
ECMAScriptParser.SemiColon = 18;
ECMAScriptParser.Comma = 19;
ECMAScriptParser.LessThan = 20;
ECMAScriptParser.GreaterThan = 21;
ECMAScriptParser.LessThanEquals = 22;
ECMAScriptParser.GreaterThanEquals = 23;
ECMAScriptParser.Equals = 24;
ECMAScriptParser.NotEquals = 25;
ECMAScriptParser.IdentityEquals = 26;
ECMAScriptParser.IdentityNotEquals = 27;
ECMAScriptParser.Plus = 28;
ECMAScriptParser.Minus = 29;
ECMAScriptParser.Multiply = 30;
ECMAScriptParser.Modulo = 31;
ECMAScriptParser.Power = 32;
ECMAScriptParser.PlusPlus = 33;
ECMAScriptParser.MinusMinus = 34;
ECMAScriptParser.LeftShiftArithmetic = 35;
ECMAScriptParser.RightShiftArithmetic = 36;
ECMAScriptParser.RightShiftLogical = 37;
ECMAScriptParser.BitAnd = 38;
ECMAScriptParser.BitOr = 39;
ECMAScriptParser.BitXor = 40;
ECMAScriptParser.Not = 41;
ECMAScriptParser.BitNot = 42;
ECMAScriptParser.And = 43;
ECMAScriptParser.Or = 44;
ECMAScriptParser.QuestionMark = 45;
ECMAScriptParser.Colon = 46;
ECMAScriptParser.Assign = 47;
ECMAScriptParser.PlusAssign = 48;
ECMAScriptParser.MinusAssign = 49;
ECMAScriptParser.MultiplyAssign = 50;
ECMAScriptParser.ModuloAssign = 51;
ECMAScriptParser.PowerAssign = 52;
ECMAScriptParser.LeftShiftArithmeticAssign = 53;
ECMAScriptParser.RightShiftArithmeticAssign = 54;
ECMAScriptParser.RightShiftLogicalAssign = 55;
ECMAScriptParser.BitAndAssign = 56;
ECMAScriptParser.BitOrAssign = 57;
ECMAScriptParser.BitXorAssign = 58;
ECMAScriptParser.FatArrow = 59;
ECMAScriptParser.Divide = 60;
ECMAScriptParser.DivideAssign = 61;
ECMAScriptParser.NullLiteral = 62;
ECMAScriptParser.BooleanLiteral = 63;
ECMAScriptParser.Await = 64;
ECMAScriptParser.Break = 65;
ECMAScriptParser.Case = 66;
ECMAScriptParser.Catch = 67;
ECMAScriptParser.Class = 68;
ECMAScriptParser.Const = 69;
ECMAScriptParser.Continue = 70;
ECMAScriptParser.Debugger = 71;
ECMAScriptParser.Default = 72;
ECMAScriptParser.Delete = 73;
ECMAScriptParser.Do = 74;
ECMAScriptParser.Else = 75;
ECMAScriptParser.Export = 76;
ECMAScriptParser.Extends = 77;
ECMAScriptParser.Finally = 78;
ECMAScriptParser.For = 79;
ECMAScriptParser.Function = 80;
ECMAScriptParser.If = 81;
ECMAScriptParser.Import = 82;
ECMAScriptParser.In = 83;
ECMAScriptParser.Instanceof = 84;
ECMAScriptParser.New = 85;
ECMAScriptParser.Return = 86;
ECMAScriptParser.Super = 87;
ECMAScriptParser.Switch = 88;
ECMAScriptParser.This = 89;
ECMAScriptParser.Throw = 90;
ECMAScriptParser.Try = 91;
ECMAScriptParser.Typeof = 92;
ECMAScriptParser.Var = 93;
ECMAScriptParser.Void = 94;
ECMAScriptParser.While = 95;
ECMAScriptParser.With = 96;
ECMAScriptParser.Yield = 97;
ECMAScriptParser.Enum = 98;
ECMAScriptParser.Null = 99;
ECMAScriptParser.True = 100;
ECMAScriptParser.False = 101;
ECMAScriptParser.As = 102;
ECMAScriptParser.Async = 103;
ECMAScriptParser.From = 104;
ECMAScriptParser.Get = 105;
ECMAScriptParser.Let = 106;
ECMAScriptParser.Of = 107;
ECMAScriptParser.Set = 108;
ECMAScriptParser.Static = 109;
ECMAScriptParser.Target = 110;
ECMAScriptParser.StringLiteral = 111;
ECMAScriptParser.IdentifierName = 112;
ECMAScriptParser.SingleLineComment = 113;
ECMAScriptParser.WhiteSpace = 114;
ECMAScriptParser.LineTerminator = 115;

ECMAScriptParser.RULE_file = 0;
ECMAScriptParser.RULE_eos = 1;
ECMAScriptParser.RULE_statement = 2;
ECMAScriptParser.RULE_statementList = 3;
ECMAScriptParser.RULE_statementListItem = 4;
ECMAScriptParser.RULE_emptyStatement = 5;
ECMAScriptParser.RULE_returnStatement = 6;
ECMAScriptParser.RULE_debuggerStatement = 7;
ECMAScriptParser.RULE_expressionStatement = 8;
ECMAScriptParser.RULE_bindingElementList = 9;
ECMAScriptParser.RULE_bindingElisionElement = 10;
ECMAScriptParser.RULE_bindingElement = 11;
ECMAScriptParser.RULE_bindingRestElement = 12;
ECMAScriptParser.RULE_singleNameBinding = 13;
ECMAScriptParser.RULE_bindingPattern = 14;
ECMAScriptParser.RULE_objectBindingPattern = 15;
ECMAScriptParser.RULE_arrayBindingPattern = 16;
ECMAScriptParser.RULE_bindingPropertyList = 17;
ECMAScriptParser.RULE_bindingProperty = 18;
ECMAScriptParser.RULE_lexicalDeclaration = 19;
ECMAScriptParser.RULE_letOrConst = 20;
ECMAScriptParser.RULE_bindingList = 21;
ECMAScriptParser.RULE_lexicalBinding = 22;
ECMAScriptParser.RULE_declaration = 23;
ECMAScriptParser.RULE_hoistableDeclaration = 24;
ECMAScriptParser.RULE_throwStatement = 25;
ECMAScriptParser.RULE_tryStatement = 26;
ECMAScriptParser.RULE_catchPart = 27;
ECMAScriptParser.RULE_finallyPart = 28;
ECMAScriptParser.RULE_catchParameter = 29;
ECMAScriptParser.RULE_withStatement = 30;
ECMAScriptParser.RULE_labelledStatement = 31;
ECMAScriptParser.RULE_labelledItem = 32;
ECMAScriptParser.RULE_labelIdentifier = 33;
ECMAScriptParser.RULE_switchStatement = 34;
ECMAScriptParser.RULE_caseBlock = 35;
ECMAScriptParser.RULE_caseClauses = 36;
ECMAScriptParser.RULE_caseClause = 37;
ECMAScriptParser.RULE_defaultClause = 38;
ECMAScriptParser.RULE_iterationStatement = 39;
ECMAScriptParser.RULE_forDeclaration = 40;
ECMAScriptParser.RULE_forBinding = 41;
ECMAScriptParser.RULE_ifStatement = 42;
ECMAScriptParser.RULE_breakableStatement = 43;
ECMAScriptParser.RULE_continueStatement = 44;
ECMAScriptParser.RULE_breakStatement = 45;
ECMAScriptParser.RULE_blockStatement = 46;
ECMAScriptParser.RULE_block = 47;
ECMAScriptParser.RULE_variableStatement = 48;
ECMAScriptParser.RULE_variableDeclarationList = 49;
ECMAScriptParser.RULE_variableDeclaration = 50;
ECMAScriptParser.RULE_functionDeclaration = 51;
ECMAScriptParser.RULE_classDeclaration = 52;
ECMAScriptParser.RULE_classTail = 53;
ECMAScriptParser.RULE_classHeritage = 54;
ECMAScriptParser.RULE_classBody = 55;
ECMAScriptParser.RULE_classElementList = 56;
ECMAScriptParser.RULE_classElement = 57;
ECMAScriptParser.RULE_generatorDeclaration = 58;
ECMAScriptParser.RULE_uniqueFormalParameters = 59;
ECMAScriptParser.RULE_formalParameters = 60;
ECMAScriptParser.RULE_formalParameterList = 61;
ECMAScriptParser.RULE_functionRestParameter = 62;
ECMAScriptParser.RULE_formalParameter = 63;
ECMAScriptParser.RULE_arrowParameters = 64;
ECMAScriptParser.RULE_functionBody = 65;
ECMAScriptParser.RULE_generatorBody = 66;
ECMAScriptParser.RULE_conciseBody = 67;
ECMAScriptParser.RULE_methodDefinition = 68;
ECMAScriptParser.RULE_propertySetParameterList = 69;
ECMAScriptParser.RULE_generatorMethod = 70;
ECMAScriptParser.RULE_script = 71;
ECMAScriptParser.RULE_scriptBody = 72;
ECMAScriptParser.RULE_module = 73;
ECMAScriptParser.RULE_moduleBody = 74;
ECMAScriptParser.RULE_moduleItemList = 75;
ECMAScriptParser.RULE_moduleItem = 76;
ECMAScriptParser.RULE_importDeclaration = 77;
ECMAScriptParser.RULE_importClause = 78;
ECMAScriptParser.RULE_importedDefaultBinding = 79;
ECMAScriptParser.RULE_nameSpaceImport = 80;
ECMAScriptParser.RULE_namedImports = 81;
ECMAScriptParser.RULE_fromClause = 82;
ECMAScriptParser.RULE_importsList = 83;
ECMAScriptParser.RULE_importSpecifier = 84;
ECMAScriptParser.RULE_moduleSpecifier = 85;
ECMAScriptParser.RULE_importedBinding = 86;
ECMAScriptParser.RULE_exportDeclaration = 87;
ECMAScriptParser.RULE_exportClause = 88;
ECMAScriptParser.RULE_exportsList = 89;
ECMAScriptParser.RULE_exportSpecifier = 90;
ECMAScriptParser.RULE_identifierReference = 91;
ECMAScriptParser.RULE_bindingIdentifier = 92;
ECMAScriptParser.RULE_identifier = 93;
ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList = 94;
ECMAScriptParser.RULE_arrayLiteral = 95;
ECMAScriptParser.RULE_elision = 96;
ECMAScriptParser.RULE_spreadElement = 97;
ECMAScriptParser.RULE_propertyDefinitionList = 98;
ECMAScriptParser.RULE_propertyDefinition = 99;
ECMAScriptParser.RULE_propertyName = 100;
ECMAScriptParser.RULE_literalPropertyName = 101;
ECMAScriptParser.RULE_computedPropertyName = 102;
ECMAScriptParser.RULE_coverInitializedName = 103;
ECMAScriptParser.RULE_arguments = 104;
ECMAScriptParser.RULE_argumentList = 105;
ECMAScriptParser.RULE_initializer = 106;
ECMAScriptParser.RULE_expressionList = 107;
ECMAScriptParser.RULE_expression = 108;
ECMAScriptParser.RULE_unaryOperator = 109;
ECMAScriptParser.RULE_multiplicativeOperator = 110;
ECMAScriptParser.RULE_additiveOperator = 111;
ECMAScriptParser.RULE_shiftOperator = 112;
ECMAScriptParser.RULE_relationalOperator = 113;
ECMAScriptParser.RULE_equalityOperator = 114;
ECMAScriptParser.RULE_assignmentOperator = 115;
ECMAScriptParser.RULE_identifierName = 116;
ECMAScriptParser.RULE_reservedWord = 117;
ECMAScriptParser.RULE_keyword = 118;
ECMAScriptParser.RULE_futureReservedWord = 119;
ECMAScriptParser.RULE_miscIdentifier = 120;

function FileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_file;
    return this;
}

FileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileContext.prototype.constructor = FileContext;

FileContext.prototype.module = function() {
    return this.getTypedRuleContext(ModuleContext,0);
};

FileContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

FileContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFile(this);
	}
};

FileContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFile(this);
	}
};




ECMAScriptParser.FileContext = FileContext;

ECMAScriptParser.prototype.file = function() {

    var localctx = new FileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECMAScriptParser.RULE_file);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 242;
        this.module();
        this.state = 243;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEos(this);
	}
};




ECMAScriptParser.EosContext = EosContext;

ECMAScriptParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ECMAScriptParser.RULE_eos);
    try {
        this.state = 247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 245;
            this.match(ECMAScriptParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 246;
            if (!( this.isSemiColonEquivalent())) {
                throw new antlr4.error.FailedPredicateException(this, "this.isSemiColonEquivalent()");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.breakableStatement = function() {
    return this.getTypedRuleContext(BreakableStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatement(this);
	}
};




ECMAScriptParser.StatementContext = StatementContext;

ECMAScriptParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ECMAScriptParser.RULE_statement);
    try {
        this.state = 264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 249;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 250;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 251;
            this.emptyStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 252;
            this.expressionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 253;
            this.ifStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 254;
            this.breakableStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 255;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 256;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 257;
            if (!( this.canReturn())) {
                throw new antlr4.error.FailedPredicateException(this, "this.canReturn()");
            }
            this.state = 258;
            this.returnStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 259;
            this.withStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 260;
            this.labelledStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 261;
            this.throwStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 262;
            this.tryStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 263;
            this.debuggerStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statementListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItemContext);
    } else {
        return this.getTypedRuleContext(StatementListItemContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatementList(this);
	}
};




ECMAScriptParser.StatementListContext = StatementListContext;

ECMAScriptParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ECMAScriptParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 267; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 266;
        		this.statementListItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 269; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_statementListItem;
    return this;
}

StatementListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitStatementListItem(this);
	}
};




ECMAScriptParser.StatementListItemContext = StatementListItemContext;

ECMAScriptParser.prototype.statementListItem = function() {

    var localctx = new StatementListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ECMAScriptParser.RULE_statementListItem);
    try {
        this.state = 273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 271;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 272;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEmptyStatement(this);
	}
};




ECMAScriptParser.EmptyStatementContext = EmptyStatementContext;

ECMAScriptParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ECMAScriptParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 275;
        this.match(ECMAScriptParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitReturnStatement(this);
	}
};




ECMAScriptParser.ReturnStatementContext = ReturnStatementContext;

ECMAScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ECMAScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 277;
        this.match(ECMAScriptParser.Return);
        this.state = 280;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        if(la_===1) {
            this.state = 278;
            if (!( this.noLineTerminatorHere())) {
                throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
            }
            this.state = 279;
            this.expressionList();

        }
        this.state = 282;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDebuggerStatement(this);
	}
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDebuggerStatement(this);
	}
};




ECMAScriptParser.DebuggerStatementContext = DebuggerStatementContext;

ECMAScriptParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ECMAScriptParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(ECMAScriptParser.Debugger);
        this.state = 285;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpressionStatement(this);
	}
};




ECMAScriptParser.ExpressionStatementContext = ExpressionStatementContext;

ECMAScriptParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ECMAScriptParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        if (!( this.isValidExpressionStatement())) {
            throw new antlr4.error.FailedPredicateException(this, "this.isValidExpressionStatement()");
        }
        this.state = 288;
        this.expressionList();
        this.state = 289;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElementList;
    return this;
}

BindingElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementListContext.prototype.constructor = BindingElementListContext;

BindingElementListContext.prototype.bindingElisionElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingElisionElementContext);
    } else {
        return this.getTypedRuleContext(BindingElisionElementContext,i);
    }
};

BindingElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElementList(this);
	}
};

BindingElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElementList(this);
	}
};




ECMAScriptParser.BindingElementListContext = BindingElementListContext;

ECMAScriptParser.prototype.bindingElementList = function() {

    var localctx = new BindingElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECMAScriptParser.RULE_bindingElementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.bindingElisionElement();
        this.state = 296;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 292;
                this.match(ECMAScriptParser.Comma);
                this.state = 293;
                this.bindingElisionElement(); 
            }
            this.state = 298;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElisionElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElisionElement;
    return this;
}

BindingElisionElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElisionElementContext.prototype.constructor = BindingElisionElementContext;

BindingElisionElementContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

BindingElisionElementContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

BindingElisionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElisionElement(this);
	}
};

BindingElisionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElisionElement(this);
	}
};




ECMAScriptParser.BindingElisionElementContext = BindingElisionElementContext;

ECMAScriptParser.prototype.bindingElisionElement = function() {

    var localctx = new BindingElisionElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECMAScriptParser.RULE_bindingElisionElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 299;
            this.elision();

        }
        this.state = 302;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingElement;
    return this;
}

BindingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementContext.prototype.constructor = BindingElementContext;

BindingElementContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingElementContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

BindingElementContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

BindingElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingElement(this);
	}
};

BindingElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingElement(this);
	}
};




ECMAScriptParser.BindingElementContext = BindingElementContext;

ECMAScriptParser.prototype.bindingElement = function() {

    var localctx = new BindingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECMAScriptParser.RULE_bindingElement);
    var _la = 0; // Token type
    try {
        this.state = 309;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 304;
            this.singleNameBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 305;
            this.bindingPattern();
            this.state = 307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Assign) {
                this.state = 306;
                this.initializer();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingRestElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingRestElement;
    return this;
}

BindingRestElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingRestElementContext.prototype.constructor = BindingRestElementContext;

BindingRestElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

BindingRestElementContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

BindingRestElementContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

BindingRestElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingRestElement(this);
	}
};

BindingRestElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingRestElement(this);
	}
};




ECMAScriptParser.BindingRestElementContext = BindingRestElementContext;

ECMAScriptParser.prototype.bindingRestElement = function() {

    var localctx = new BindingRestElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ECMAScriptParser.RULE_bindingRestElement);
    try {
        this.state = 315;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 311;
            this.match(ECMAScriptParser.Spread);
            this.state = 312;
            this.bindingIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 313;
            this.match(ECMAScriptParser.Spread);
            this.state = 314;
            this.bindingPattern();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleNameBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_singleNameBinding;
    return this;
}

SingleNameBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleNameBindingContext.prototype.constructor = SingleNameBindingContext;

SingleNameBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

SingleNameBindingContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

SingleNameBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSingleNameBinding(this);
	}
};

SingleNameBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSingleNameBinding(this);
	}
};




ECMAScriptParser.SingleNameBindingContext = SingleNameBindingContext;

ECMAScriptParser.prototype.singleNameBinding = function() {

    var localctx = new SingleNameBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECMAScriptParser.RULE_singleNameBinding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.bindingIdentifier();
        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Assign) {
            this.state = 318;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingPattern;
    return this;
}

BindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPatternContext.prototype.constructor = BindingPatternContext;

BindingPatternContext.prototype.objectBindingPattern = function() {
    return this.getTypedRuleContext(ObjectBindingPatternContext,0);
};

BindingPatternContext.prototype.arrayBindingPattern = function() {
    return this.getTypedRuleContext(ArrayBindingPatternContext,0);
};

BindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingPattern(this);
	}
};

BindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingPattern(this);
	}
};




ECMAScriptParser.BindingPatternContext = BindingPatternContext;

ECMAScriptParser.prototype.bindingPattern = function() {

    var localctx = new BindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECMAScriptParser.RULE_bindingPattern);
    try {
        this.state = 323;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 1);
            this.state = 321;
            this.objectBindingPattern();
            break;
        case ECMAScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 322;
            this.arrayBindingPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_objectBindingPattern;
    return this;
}

ObjectBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectBindingPatternContext.prototype.constructor = ObjectBindingPatternContext;

ObjectBindingPatternContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ObjectBindingPatternContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ObjectBindingPatternContext.prototype.bindingPropertyList = function() {
    return this.getTypedRuleContext(BindingPropertyListContext,0);
};

ObjectBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ObjectBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterObjectBindingPattern(this);
	}
};

ObjectBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitObjectBindingPattern(this);
	}
};




ECMAScriptParser.ObjectBindingPatternContext = ObjectBindingPatternContext;

ECMAScriptParser.prototype.objectBindingPattern = function() {

    var localctx = new ObjectBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECMAScriptParser.RULE_objectBindingPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 326;
            this.bindingPropertyList();
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 327;
                this.match(ECMAScriptParser.Comma);
            }


        }
        this.state = 332;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayBindingPattern;
    return this;
}

ArrayBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayBindingPatternContext.prototype.constructor = ArrayBindingPatternContext;

ArrayBindingPatternContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayBindingPatternContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayBindingPatternContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayBindingPatternContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

ArrayBindingPatternContext.prototype.bindingElementList = function() {
    return this.getTypedRuleContext(BindingElementListContext,0);
};

ArrayBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArrayBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayBindingPattern(this);
	}
};

ArrayBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayBindingPattern(this);
	}
};




ECMAScriptParser.ArrayBindingPatternContext = ArrayBindingPatternContext;

ECMAScriptParser.prototype.arrayBindingPattern = function() {

    var localctx = new ArrayBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECMAScriptParser.RULE_arrayBindingPattern);
    var _la = 0; // Token type
    try {
        this.state = 357;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 334;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 335;
                this.elision();
            }

            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 338;
                this.bindingRestElement();
            }

            this.state = 341;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 343;
            this.bindingElementList();
            this.state = 344;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 346;
            this.match(ECMAScriptParser.OpenBracket);
            this.state = 347;
            this.bindingElementList();
            this.state = 348;
            this.match(ECMAScriptParser.Comma);
            this.state = 350;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 349;
                this.elision();
            }

            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Spread) {
                this.state = 352;
                this.bindingRestElement();
            }

            this.state = 355;
            this.match(ECMAScriptParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingPropertyList;
    return this;
}

BindingPropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyListContext.prototype.constructor = BindingPropertyListContext;

BindingPropertyListContext.prototype.bindingProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingPropertyContext);
    } else {
        return this.getTypedRuleContext(BindingPropertyContext,i);
    }
};

BindingPropertyListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingPropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingPropertyList(this);
	}
};

BindingPropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingPropertyList(this);
	}
};




ECMAScriptParser.BindingPropertyListContext = BindingPropertyListContext;

ECMAScriptParser.prototype.bindingPropertyList = function() {

    var localctx = new BindingPropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ECMAScriptParser.RULE_bindingPropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.bindingProperty();
        this.state = 364;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 360;
                this.match(ECMAScriptParser.Comma);
                this.state = 361;
                this.bindingProperty(); 
            }
            this.state = 366;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingProperty;
    return this;
}

BindingPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyContext.prototype.constructor = BindingPropertyContext;

BindingPropertyContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

BindingPropertyContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

BindingPropertyContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

BindingPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingProperty(this);
	}
};

BindingPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingProperty(this);
	}
};




ECMAScriptParser.BindingPropertyContext = BindingPropertyContext;

ECMAScriptParser.prototype.bindingProperty = function() {

    var localctx = new BindingPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECMAScriptParser.RULE_bindingProperty);
    try {
        this.state = 372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 367;
            this.singleNameBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 368;
            this.propertyName();
            this.state = 369;
            this.match(ECMAScriptParser.Colon);
            this.state = 370;
            this.bindingElement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalDeclaration;
    return this;
}

LexicalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclarationContext.prototype.constructor = LexicalDeclarationContext;

LexicalDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclarationContext.prototype.bindingList = function() {
    return this.getTypedRuleContext(BindingListContext,0);
};

LexicalDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalDeclaration(this);
	}
};

LexicalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalDeclaration(this);
	}
};




ECMAScriptParser.LexicalDeclarationContext = LexicalDeclarationContext;

ECMAScriptParser.prototype.lexicalDeclaration = function() {

    var localctx = new LexicalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ECMAScriptParser.RULE_lexicalDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.letOrConst();
        this.state = 375;
        this.bindingList();
        this.state = 376;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetOrConstContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_letOrConst;
    return this;
}

LetOrConstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetOrConstContext.prototype.constructor = LetOrConstContext;

LetOrConstContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

LetOrConstContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

LetOrConstContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLetOrConst(this);
	}
};

LetOrConstContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLetOrConst(this);
	}
};




ECMAScriptParser.LetOrConstContext = LetOrConstContext;

ECMAScriptParser.prototype.letOrConst = function() {

    var localctx = new LetOrConstContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ECMAScriptParser.RULE_letOrConst);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptParser.Const || _la===ECMAScriptParser.Let)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingList;
    return this;
}

BindingListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingListContext.prototype.constructor = BindingListContext;

BindingListContext.prototype.lexicalBinding = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBindingContext);
    } else {
        return this.getTypedRuleContext(LexicalBindingContext,i);
    }
};

BindingListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


BindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingList(this);
	}
};

BindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingList(this);
	}
};




ECMAScriptParser.BindingListContext = BindingListContext;

ECMAScriptParser.prototype.bindingList = function() {

    var localctx = new BindingListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECMAScriptParser.RULE_bindingList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.lexicalBinding();
        this.state = 385;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 381;
                this.match(ECMAScriptParser.Comma);
                this.state = 382;
                this.lexicalBinding(); 
            }
            this.state = 387;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_lexicalBinding;
    return this;
}

LexicalBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBindingContext.prototype.constructor = LexicalBindingContext;

LexicalBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBindingContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

LexicalBindingContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

LexicalBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLexicalBinding(this);
	}
};

LexicalBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLexicalBinding(this);
	}
};




ECMAScriptParser.LexicalBindingContext = LexicalBindingContext;

ECMAScriptParser.prototype.lexicalBinding = function() {

    var localctx = new LexicalBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECMAScriptParser.RULE_lexicalBinding);
    try {
        this.state = 395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 388;
            this.bindingIdentifier();
            this.state = 390;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 389;
                this.initializer();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 392;
            this.bindingPattern();
            this.state = 393;
            this.initializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.hoistableDeclaration = function() {
    return this.getTypedRuleContext(HoistableDeclarationContext,0);
};

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.lexicalDeclaration = function() {
    return this.getTypedRuleContext(LexicalDeclarationContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDeclaration(this);
	}
};




ECMAScriptParser.DeclarationContext = DeclarationContext;

ECMAScriptParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECMAScriptParser.RULE_declaration);
    try {
        this.state = 400;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 397;
            this.hoistableDeclaration();
            break;
        case ECMAScriptParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 398;
            this.classDeclaration();
            break;
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Let:
            this.enterOuterAlt(localctx, 3);
            this.state = 399;
            this.lexicalDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_hoistableDeclaration;
    return this;
}

HoistableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclarationContext.prototype.constructor = HoistableDeclarationContext;

HoistableDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

HoistableDeclarationContext.prototype.generatorDeclaration = function() {
    return this.getTypedRuleContext(GeneratorDeclarationContext,0);
};

HoistableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterHoistableDeclaration(this);
	}
};

HoistableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitHoistableDeclaration(this);
	}
};




ECMAScriptParser.HoistableDeclarationContext = HoistableDeclarationContext;

ECMAScriptParser.prototype.hoistableDeclaration = function() {

    var localctx = new HoistableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECMAScriptParser.RULE_hoistableDeclaration);
    try {
        this.state = 404;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 402;
            this.functionDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.generatorDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitThrowStatement(this);
	}
};




ECMAScriptParser.ThrowStatementContext = ThrowStatementContext;

ECMAScriptParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ECMAScriptParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.match(ECMAScriptParser.Throw);
        this.state = 407;
        this.expressionList();
        this.state = 408;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchPart = function() {
    return this.getTypedRuleContext(CatchPartContext,0);
};

TryStatementContext.prototype.finallyPart = function() {
    return this.getTypedRuleContext(FinallyPartContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitTryStatement(this);
	}
};




ECMAScriptParser.TryStatementContext = TryStatementContext;

ECMAScriptParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECMAScriptParser.RULE_tryStatement);
    try {
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 410;
            this.match(ECMAScriptParser.Try);
            this.state = 411;
            this.block();
            this.state = 412;
            this.catchPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 414;
            this.match(ECMAScriptParser.Try);
            this.state = 415;
            this.block();
            this.state = 416;
            this.finallyPart();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 418;
            this.match(ECMAScriptParser.Try);
            this.state = 419;
            this.block();
            this.state = 420;
            this.catchPart();
            this.state = 421;
            this.finallyPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_catchPart;
    return this;
}

CatchPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchPartContext.prototype.constructor = CatchPartContext;

CatchPartContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

CatchPartContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

CatchPartContext.prototype.catchParameter = function() {
    return this.getTypedRuleContext(CatchParameterContext,0);
};

CatchPartContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

CatchPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCatchPart(this);
	}
};

CatchPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCatchPart(this);
	}
};




ECMAScriptParser.CatchPartContext = CatchPartContext;

ECMAScriptParser.prototype.catchPart = function() {

    var localctx = new CatchPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECMAScriptParser.RULE_catchPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this.match(ECMAScriptParser.Catch);
        this.state = 426;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 427;
        this.catchParameter();
        this.state = 428;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 429;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_finallyPart;
    return this;
}

FinallyPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyPartContext.prototype.constructor = FinallyPartContext;

FinallyPartContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

FinallyPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFinallyPart(this);
	}
};

FinallyPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFinallyPart(this);
	}
};




ECMAScriptParser.FinallyPartContext = FinallyPartContext;

ECMAScriptParser.prototype.finallyPart = function() {

    var localctx = new FinallyPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ECMAScriptParser.RULE_finallyPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(ECMAScriptParser.Finally);
        this.state = 432;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_catchParameter;
    return this;
}

CatchParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchParameterContext.prototype.constructor = CatchParameterContext;

CatchParameterContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

CatchParameterContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

CatchParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCatchParameter(this);
	}
};

CatchParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCatchParameter(this);
	}
};




ECMAScriptParser.CatchParameterContext = CatchParameterContext;

ECMAScriptParser.prototype.catchParameter = function() {

    var localctx = new CatchParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ECMAScriptParser.RULE_catchParameter);
    try {
        this.state = 436;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 434;
            this.bindingIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 435;
            this.bindingPattern();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

WithStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitWithStatement(this);
	}
};




ECMAScriptParser.WithStatementContext = WithStatementContext;

ECMAScriptParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECMAScriptParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.match(ECMAScriptParser.With);
        this.state = 439;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 440;
        this.expressionList();
        this.state = 441;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 442;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

LabelledStatementContext.prototype.labelledItem = function() {
    return this.getTypedRuleContext(LabelledItemContext,0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelledStatement(this);
	}
};




ECMAScriptParser.LabelledStatementContext = LabelledStatementContext;

ECMAScriptParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECMAScriptParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this.labelIdentifier();
        this.state = 445;
        this.match(ECMAScriptParser.Colon);
        this.state = 446;
        this.labelledItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelledItem;
    return this;
}

LabelledItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledItemContext.prototype.constructor = LabelledItemContext;

LabelledItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledItemContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

LabelledItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelledItem(this);
	}
};

LabelledItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelledItem(this);
	}
};




ECMAScriptParser.LabelledItemContext = LabelledItemContext;

ECMAScriptParser.prototype.labelledItem = function() {

    var localctx = new LabelledItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECMAScriptParser.RULE_labelledItem);
    try {
        this.state = 450;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 449;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_labelIdentifier;
    return this;
}

LabelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelIdentifierContext.prototype.constructor = LabelIdentifierContext;

LabelIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabelIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

LabelIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

LabelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLabelIdentifier(this);
	}
};




ECMAScriptParser.LabelIdentifierContext = LabelIdentifierContext;

ECMAScriptParser.prototype.labelIdentifier = function() {

    var localctx = new LabelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECMAScriptParser.RULE_labelIdentifier);
    try {
        this.state = 455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this.identifier();
            break;
        case ECMAScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 453;
            this.match(ECMAScriptParser.Yield);
            break;
        case ECMAScriptParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 454;
            this.match(ECMAScriptParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSwitchStatement(this);
	}
};




ECMAScriptParser.SwitchStatementContext = SwitchStatementContext;

ECMAScriptParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ECMAScriptParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(ECMAScriptParser.Switch);
        this.state = 458;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 459;
        this.expressionList();
        this.state = 460;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 461;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseBlock(this);
	}
};

CaseBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseBlock(this);
	}
};




ECMAScriptParser.CaseBlockContext = CaseBlockContext;

ECMAScriptParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ECMAScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.state = 478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 464;
                this.caseClauses();
            }

            this.state = 467;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 469;
                this.caseClauses();
            }

            this.state = 472;
            this.defaultClause();
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Case) {
                this.state = 473;
                this.caseClauses();
            }

            this.state = 476;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseClauses(this);
	}
};

CaseClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseClauses(this);
	}
};




ECMAScriptParser.CaseClausesContext = CaseClausesContext;

ECMAScriptParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ECMAScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 480;
            this.caseClause();
            this.state = 483; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

CaseClauseContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCaseClause(this);
	}
};

CaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCaseClause(this);
	}
};




ECMAScriptParser.CaseClauseContext = CaseClauseContext;

ECMAScriptParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECMAScriptParser.RULE_caseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.match(ECMAScriptParser.Case);
        this.state = 486;
        this.expressionList();
        this.state = 487;
        this.match(ECMAScriptParser.Colon);
        this.state = 489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 488;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterDefaultClause(this);
	}
};

DefaultClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitDefaultClause(this);
	}
};




ECMAScriptParser.DefaultClauseContext = DefaultClauseContext;

ECMAScriptParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ECMAScriptParser.RULE_defaultClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(ECMAScriptParser.Default);
        this.state = 492;
        this.match(ECMAScriptParser.Colon);
        this.state = 494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 493;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

IterationStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

IterationStatementContext.prototype.expressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionListContext);
    } else {
        return this.getTypedRuleContext(ExpressionListContext,i);
    }
};

IterationStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

IterationStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

IterationStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.SemiColon);
    } else {
        return this.getToken(ECMAScriptParser.SemiColon, i);
    }
};


IterationStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

IterationStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

IterationStatementContext.prototype.lexicalDeclaration = function() {
    return this.getTypedRuleContext(LexicalDeclarationContext,0);
};

IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

IterationStatementContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

IterationStatementContext.prototype.forDeclaration = function() {
    return this.getTypedRuleContext(ForDeclarationContext,0);
};

IterationStatementContext.prototype.Of = function() {
    return this.getToken(ECMAScriptParser.Of, 0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIterationStatement(this);
	}
};




ECMAScriptParser.IterationStatementContext = IterationStatementContext;

ECMAScriptParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ECMAScriptParser.RULE_iterationStatement);
    try {
        this.state = 605;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 496;
            this.match(ECMAScriptParser.Do);
            this.state = 497;
            this.statement();
            this.state = 498;
            this.match(ECMAScriptParser.While);
            this.state = 499;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 500;
            this.expressionList();
            this.state = 501;
            this.match(ECMAScriptParser.CloseParen);
            this.enableDoWhileEos()
            this.state = 503;
            this.eos();
            this.disableDoWhileEos()
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 506;
            this.match(ECMAScriptParser.While);
            this.state = 507;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 508;
            this.expressionList();
            this.state = 509;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 510;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 512;
            this.match(ECMAScriptParser.For);
            this.state = 513;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 515;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
            if(la_===1) {
                this.state = 514;
                this.expressionList();

            }
            this.state = 517;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 519;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 518;
                this.expressionList();

            }
            this.state = 521;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 523;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 522;
                this.expressionList();

            }
            this.state = 525;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 526;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 527;
            this.match(ECMAScriptParser.For);
            this.state = 528;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 529;
            this.match(ECMAScriptParser.Var);
            this.state = 530;
            this.variableDeclarationList();
            this.state = 531;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 533;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 532;
                this.expressionList();

            }
            this.state = 535;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 537;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
            if(la_===1) {
                this.state = 536;
                this.expressionList();

            }
            this.state = 539;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 540;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 542;
            this.match(ECMAScriptParser.For);
            this.state = 543;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 544;
            this.lexicalDeclaration();
            this.state = 546;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 545;
                this.expressionList();

            }
            this.state = 548;
            this.match(ECMAScriptParser.SemiColon);
            this.state = 550;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
            if(la_===1) {
                this.state = 549;
                this.expressionList();

            }
            this.state = 552;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 553;
            this.statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 555;
            this.match(ECMAScriptParser.For);
            this.state = 556;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 557;
            this.expression(0);
            this.state = 558;
            this.match(ECMAScriptParser.In);
            this.state = 559;
            this.expressionList();
            this.state = 560;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 561;
            this.statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 563;
            this.match(ECMAScriptParser.For);
            this.state = 564;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 565;
            this.match(ECMAScriptParser.Var);
            this.state = 566;
            this.forBinding();
            this.state = 567;
            this.match(ECMAScriptParser.In);
            this.state = 568;
            this.expressionList();
            this.state = 569;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 570;
            this.statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 572;
            this.match(ECMAScriptParser.For);
            this.state = 573;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 574;
            this.forDeclaration();
            this.state = 575;
            this.match(ECMAScriptParser.In);
            this.state = 576;
            this.expressionList();
            this.state = 577;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 578;
            this.statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 580;
            this.match(ECMAScriptParser.For);
            this.state = 581;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 582;
            this.expression(0);
            this.state = 583;
            this.match(ECMAScriptParser.Of);
            this.state = 584;
            this.expressionList();
            this.state = 585;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 586;
            this.statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 588;
            this.match(ECMAScriptParser.For);
            this.state = 589;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 590;
            this.match(ECMAScriptParser.Var);
            this.state = 591;
            this.forBinding();
            this.state = 592;
            this.match(ECMAScriptParser.Of);
            this.state = 593;
            this.expressionList();
            this.state = 594;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 595;
            this.statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 597;
            this.match(ECMAScriptParser.For);
            this.state = 598;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 599;
            this.forDeclaration();
            this.state = 600;
            this.match(ECMAScriptParser.Of);
            this.state = 601;
            this.expressionList();
            this.state = 602;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 603;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

ForDeclarationContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

ForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterForDeclaration(this);
	}
};

ForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitForDeclaration(this);
	}
};




ECMAScriptParser.ForDeclarationContext = ForDeclarationContext;

ECMAScriptParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ECMAScriptParser.RULE_forDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.letOrConst();
        this.state = 608;
        this.forBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_forBinding;
    return this;
}

ForBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForBindingContext.prototype.constructor = ForBindingContext;

ForBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ForBindingContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

ForBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterForBinding(this);
	}
};

ForBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitForBinding(this);
	}
};




ECMAScriptParser.ForBindingContext = ForBindingContext;

ECMAScriptParser.prototype.forBinding = function() {

    var localctx = new ForBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECMAScriptParser.RULE_forBinding);
    try {
        this.state = 612;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 610;
            this.bindingIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 611;
            this.bindingPattern();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

IfStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIfStatement(this);
	}
};




ECMAScriptParser.IfStatementContext = IfStatementContext;

ECMAScriptParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECMAScriptParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(ECMAScriptParser.If);
        this.state = 615;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 616;
        this.expressionList();
        this.state = 617;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 618;
        this.statement();
        this.state = 621;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 619;
            this.match(ECMAScriptParser.Else);
            this.state = 620;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_breakableStatement;
    return this;
}

BreakableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakableStatementContext.prototype.constructor = BreakableStatementContext;

BreakableStatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

BreakableStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

BreakableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBreakableStatement(this);
	}
};

BreakableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBreakableStatement(this);
	}
};




ECMAScriptParser.BreakableStatementContext = BreakableStatementContext;

ECMAScriptParser.prototype.breakableStatement = function() {

    var localctx = new BreakableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECMAScriptParser.RULE_breakableStatement);
    try {
        this.state = 625;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Do:
        case ECMAScriptParser.For:
        case ECMAScriptParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 623;
            this.iterationStatement();
            break;
        case ECMAScriptParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 624;
            this.switchStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitContinueStatement(this);
	}
};




ECMAScriptParser.ContinueStatementContext = ContinueStatementContext;

ECMAScriptParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECMAScriptParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(ECMAScriptParser.Continue);
        this.state = 630;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 628;
            if (!( this.noLineTerminatorHere())) {
                throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
            }
            this.state = 629;
            this.labelIdentifier();

        }
        this.state = 632;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBreakStatement(this);
	}
};




ECMAScriptParser.BreakStatementContext = BreakStatementContext;

ECMAScriptParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ECMAScriptParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.match(ECMAScriptParser.Break);
        this.state = 637;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 635;
            if (!( this.noLineTerminatorHere())) {
                throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
            }
            this.state = 636;
            this.labelIdentifier();

        }
        this.state = 639;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBlockStatement(this);
	}
};




ECMAScriptParser.BlockStatementContext = BlockStatementContext;

ECMAScriptParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ECMAScriptParser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBlock(this);
	}
};




ECMAScriptParser.BlockContext = BlockContext;

ECMAScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ECMAScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 645;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 644;
            this.statementList();

        }
        this.state = 647;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

VariableStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableStatement(this);
	}
};

VariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableStatement(this);
	}
};




ECMAScriptParser.VariableStatementContext = VariableStatementContext;

ECMAScriptParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECMAScriptParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this.match(ECMAScriptParser.Var);
        this.state = 650;
        this.variableDeclarationList();
        this.state = 651;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclarationList(this);
	}
};




ECMAScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;

ECMAScriptParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECMAScriptParser.RULE_variableDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.variableDeclaration();
        this.state = 658;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 654;
                this.match(ECMAScriptParser.Comma);
                this.state = 655;
                this.variableDeclaration(); 
            }
            this.state = 660;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclarationContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

VariableDeclarationContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitVariableDeclaration(this);
	}
};




ECMAScriptParser.VariableDeclarationContext = VariableDeclarationContext;

ECMAScriptParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ECMAScriptParser.RULE_variableDeclaration);
    try {
        this.state = 668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 661;
            this.bindingIdentifier();
            this.state = 663;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 662;
                this.initializer();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 665;
            this.bindingPattern();
            this.state = 666;
            this.initializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

FunctionDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ECMAScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

ECMAScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ECMAScriptParser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.match(ECMAScriptParser.Function);
        this.state = 671;
        this.bindingIdentifier();
        this.state = 672;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 673;
        this.formalParameters();
        this.state = 674;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 675;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 676;
        this.functionBody();
        this.state = 677;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ClassDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassDeclaration(this);
	}
};




ECMAScriptParser.ClassDeclarationContext = ClassDeclarationContext;

ECMAScriptParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ECMAScriptParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.match(ECMAScriptParser.Class);
        this.state = 680;
        this.bindingIdentifier();
        this.state = 681;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ClassTailContext.prototype.classHeritage = function() {
    return this.getTypedRuleContext(ClassHeritageContext,0);
};

ClassTailContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassTail(this);
	}
};

ClassTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassTail(this);
	}
};




ECMAScriptParser.ClassTailContext = ClassTailContext;

ECMAScriptParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ECMAScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Extends) {
            this.state = 683;
            this.classHeritage();
        }

        this.state = 686;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 687;
            this.classBody();

        }
        this.state = 690;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassHeritageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classHeritage;
    return this;
}

ClassHeritageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassHeritageContext.prototype.constructor = ClassHeritageContext;

ClassHeritageContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

ClassHeritageContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ClassHeritageContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassHeritage(this);
	}
};

ClassHeritageContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassHeritage(this);
	}
};




ECMAScriptParser.ClassHeritageContext = ClassHeritageContext;

ECMAScriptParser.prototype.classHeritage = function() {

    var localctx = new ClassHeritageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ECMAScriptParser.RULE_classHeritage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.match(ECMAScriptParser.Extends);
        this.state = 693;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classElementList = function() {
    return this.getTypedRuleContext(ClassElementListContext,0);
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassBody(this);
	}
};




ECMAScriptParser.ClassBodyContext = ClassBodyContext;

ECMAScriptParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ECMAScriptParser.RULE_classBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this.classElementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classElementList;
    return this;
}

ClassElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementListContext.prototype.constructor = ClassElementListContext;

ClassElementListContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassElementList(this);
	}
};

ClassElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassElementList(this);
	}
};




ECMAScriptParser.ClassElementListContext = ClassElementListContext;

ECMAScriptParser.prototype.classElementList = function() {

    var localctx = new ClassElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECMAScriptParser.RULE_classElementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 697;
        		this.classElement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 700; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,56, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.Static = function() {
    return this.getToken(ECMAScriptParser.Static, 0);
};

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptParser.SemiColon, 0);
};

ClassElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterClassElement(this);
	}
};

ClassElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitClassElement(this);
	}
};




ECMAScriptParser.ClassElementContext = ClassElementContext;

ECMAScriptParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ECMAScriptParser.RULE_classElement);
    try {
        this.state = 706;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 702;
            this.match(ECMAScriptParser.Static);
            this.state = 703;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 704;
            this.methodDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 705;
            this.match(ECMAScriptParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorDeclaration;
    return this;
}

GeneratorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorDeclarationContext.prototype.constructor = GeneratorDeclarationContext;

GeneratorDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

GeneratorDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

GeneratorDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

GeneratorDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorDeclarationContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorDeclaration(this);
	}
};

GeneratorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorDeclaration(this);
	}
};




ECMAScriptParser.GeneratorDeclarationContext = GeneratorDeclarationContext;

ECMAScriptParser.prototype.generatorDeclaration = function() {

    var localctx = new GeneratorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECMAScriptParser.RULE_generatorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.match(ECMAScriptParser.Function);
        this.state = 709;
        this.match(ECMAScriptParser.Multiply);
        this.state = 710;
        this.bindingIdentifier();
        this.state = 711;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 712;
        this.formalParameters();
        this.state = 713;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 714;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 715;
        this.generatorBody();
        this.state = 716;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueFormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_uniqueFormalParameters;
    return this;
}

UniqueFormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueFormalParametersContext.prototype.constructor = UniqueFormalParametersContext;

UniqueFormalParametersContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

UniqueFormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUniqueFormalParameters(this);
	}
};

UniqueFormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUniqueFormalParameters(this);
	}
};




ECMAScriptParser.UniqueFormalParametersContext = UniqueFormalParametersContext;

ECMAScriptParser.prototype.uniqueFormalParameters = function() {

    var localctx = new UniqueFormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECMAScriptParser.RULE_uniqueFormalParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.functionRestParameter = function() {
    return this.getTypedRuleContext(FunctionRestParameterContext,0);
};

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameters(this);
	}
};




ECMAScriptParser.FormalParametersContext = FormalParametersContext;

ECMAScriptParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECMAScriptParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.functionRestParameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 722;
            this.formalParameterList();
            this.state = 724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 723;
                this.match(ECMAScriptParser.Comma);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 726;
            this.formalParameterList();
            this.state = 727;
            this.match(ECMAScriptParser.Comma);
            this.state = 728;
            this.functionRestParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameterList(this);
	}
};




ECMAScriptParser.FormalParameterListContext = FormalParameterListContext;

ECMAScriptParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECMAScriptParser.RULE_formalParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 732;
        this.formalParameter();
        this.state = 737;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 733;
                this.match(ECMAScriptParser.Comma);
                this.state = 734;
                this.formalParameter(); 
            }
            this.state = 739;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionRestParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionRestParameter;
    return this;
}

FunctionRestParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionRestParameterContext.prototype.constructor = FunctionRestParameterContext;

FunctionRestParameterContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

FunctionRestParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionRestParameter(this);
	}
};

FunctionRestParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionRestParameter(this);
	}
};




ECMAScriptParser.FunctionRestParameterContext = FunctionRestParameterContext;

ECMAScriptParser.prototype.functionRestParameter = function() {

    var localctx = new FunctionRestParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECMAScriptParser.RULE_functionRestParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.bindingRestElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFormalParameter(this);
	}
};




ECMAScriptParser.FormalParameterContext = FormalParameterContext;

ECMAScriptParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECMAScriptParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 742;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrowParameters;
    return this;
}

ArrowParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowParametersContext.prototype.constructor = ArrowParametersContext;

ArrowParametersContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ArrowParametersContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

ArrowParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrowParameters(this);
	}
};

ArrowParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrowParameters(this);
	}
};




ECMAScriptParser.ArrowParametersContext = ArrowParametersContext;

ECMAScriptParser.prototype.arrowParameters = function() {

    var localctx = new ArrowParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECMAScriptParser.RULE_arrowParameters);
    try {
        this.state = 746;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 744;
            this.bindingIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 745;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFunctionBody(this);
	}
};




ECMAScriptParser.FunctionBodyContext = FunctionBodyContext;

ECMAScriptParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECMAScriptParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.enterFunctionBody()
        this.state = 750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        if(la_===1) {
            this.state = 749;
            this.statementList();

        }
        this.exitFunctionBody()
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorBody;
    return this;
}

GeneratorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorBodyContext.prototype.constructor = GeneratorBodyContext;

GeneratorBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

GeneratorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorBody(this);
	}
};

GeneratorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorBody(this);
	}
};




ECMAScriptParser.GeneratorBodyContext = GeneratorBodyContext;

ECMAScriptParser.prototype.generatorBody = function() {

    var localctx = new GeneratorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECMAScriptParser.RULE_generatorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.enterGeneratorBody()
        this.state = 755;
        this.functionBody();
        this.exitGeneratorBody()
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConciseBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_conciseBody;
    return this;
}

ConciseBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConciseBodyContext.prototype.constructor = ConciseBodyContext;

ConciseBodyContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ConciseBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ConciseBodyContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ConciseBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConciseBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterConciseBody(this);
	}
};

ConciseBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitConciseBody(this);
	}
};




ECMAScriptParser.ConciseBodyContext = ConciseBodyContext;

ECMAScriptParser.prototype.conciseBody = function() {

    var localctx = new ConciseBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECMAScriptParser.RULE_conciseBody);
    try {
        this.state = 763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 758;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 759;
            this.functionBody();
            this.state = 760;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 762;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.Get = function() {
    return this.getToken(ECMAScriptParser.Get, 0);
};

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Set = function() {
    return this.getToken(ECMAScriptParser.Set, 0);
};

MethodDefinitionContext.prototype.propertySetParameterList = function() {
    return this.getTypedRuleContext(PropertySetParameterListContext,0);
};

MethodDefinitionContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

MethodDefinitionContext.prototype.generatorMethod = function() {
    return this.getTypedRuleContext(GeneratorMethodContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMethodDefinition(this);
	}
};




ECMAScriptParser.MethodDefinitionContext = MethodDefinitionContext;

ECMAScriptParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECMAScriptParser.RULE_methodDefinition);
    try {
        this.state = 791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 765;
            this.match(ECMAScriptParser.Get);
            this.state = 766;
            this.propertyName();
            this.state = 767;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 768;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 769;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 770;
            this.functionBody();
            this.state = 771;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 773;
            this.match(ECMAScriptParser.Set);
            this.state = 774;
            this.propertyName();
            this.state = 775;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 776;
            this.propertySetParameterList();
            this.state = 777;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 778;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 779;
            this.functionBody();
            this.state = 780;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 782;
            this.propertyName();
            this.state = 783;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 784;
            this.uniqueFormalParameters();
            this.state = 785;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 786;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 787;
            this.functionBody();
            this.state = 788;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 790;
            this.generatorMethod();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySetParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertySetParameterList;
    return this;
}

PropertySetParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetParameterListContext.prototype.constructor = PropertySetParameterListContext;

PropertySetParameterListContext.prototype.formalParameter = function() {
    return this.getTypedRuleContext(FormalParameterContext,0);
};

PropertySetParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertySetParameterList(this);
	}
};

PropertySetParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertySetParameterList(this);
	}
};




ECMAScriptParser.PropertySetParameterListContext = PropertySetParameterListContext;

ECMAScriptParser.prototype.propertySetParameterList = function() {

    var localctx = new PropertySetParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECMAScriptParser.RULE_propertySetParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.formalParameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_generatorMethod;
    return this;
}

GeneratorMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorMethodContext.prototype.constructor = GeneratorMethodContext;

GeneratorMethodContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

GeneratorMethodContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GeneratorMethodContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

GeneratorMethodContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

GeneratorMethodContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

GeneratorMethodContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

GeneratorMethodContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorMethodContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

GeneratorMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterGeneratorMethod(this);
	}
};

GeneratorMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitGeneratorMethod(this);
	}
};




ECMAScriptParser.GeneratorMethodContext = GeneratorMethodContext;

ECMAScriptParser.prototype.generatorMethod = function() {

    var localctx = new GeneratorMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECMAScriptParser.RULE_generatorMethod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        this.match(ECMAScriptParser.Multiply);
        this.state = 796;
        this.propertyName();
        this.state = 797;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 798;
        this.uniqueFormalParameters();
        this.state = 799;
        this.match(ECMAScriptParser.CloseParen);
        this.state = 800;
        this.match(ECMAScriptParser.OpenBrace);
        this.state = 801;
        this.generatorBody();
        this.state = 802;
        this.match(ECMAScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

ScriptContext.prototype.scriptBody = function() {
    return this.getTypedRuleContext(ScriptBodyContext,0);
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitScript(this);
	}
};




ECMAScriptParser.ScriptContext = ScriptContext;

ECMAScriptParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECMAScriptParser.RULE_script);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 804;
            this.scriptBody();

        }
        this.state = 807;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_scriptBody;
    return this;
}

ScriptBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptBodyContext.prototype.constructor = ScriptBodyContext;

ScriptBodyContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

ScriptBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterScriptBody(this);
	}
};

ScriptBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitScriptBody(this);
	}
};




ECMAScriptParser.ScriptBodyContext = ScriptBodyContext;

ECMAScriptParser.prototype.scriptBody = function() {

    var localctx = new ScriptBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECMAScriptParser.RULE_scriptBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptParser.EOF, 0);
};

ModuleContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModule(this);
	}
};




ECMAScriptParser.ModuleContext = ModuleContext;

ECMAScriptParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECMAScriptParser.RULE_module);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 811;
            this.moduleBody();

        }
        this.state = 814;
        this.match(ECMAScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.moduleItemList = function() {
    return this.getTypedRuleContext(ModuleItemListContext,0);
};

ModuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleBody(this);
	}
};

ModuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleBody(this);
	}
};




ECMAScriptParser.ModuleBodyContext = ModuleBodyContext;

ECMAScriptParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECMAScriptParser.RULE_moduleBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.moduleItemList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleItemList;
    return this;
}

ModuleItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemListContext.prototype.constructor = ModuleItemListContext;

ModuleItemListContext.prototype.moduleItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleItemContext);
    } else {
        return this.getTypedRuleContext(ModuleItemContext,i);
    }
};

ModuleItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleItemList(this);
	}
};

ModuleItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleItemList(this);
	}
};




ECMAScriptParser.ModuleItemListContext = ModuleItemListContext;

ECMAScriptParser.prototype.moduleItemList = function() {

    var localctx = new ModuleItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECMAScriptParser.RULE_moduleItemList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 818;
        		this.moduleItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 821; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleItem;
    return this;
}

ModuleItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemContext.prototype.constructor = ModuleItemContext;

ModuleItemContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

ModuleItemContext.prototype.exportDeclaration = function() {
    return this.getTypedRuleContext(ExportDeclarationContext,0);
};

ModuleItemContext.prototype.statementListItem = function() {
    return this.getTypedRuleContext(StatementListItemContext,0);
};

ModuleItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleItem(this);
	}
};

ModuleItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleItem(this);
	}
};




ECMAScriptParser.ModuleItemContext = ModuleItemContext;

ECMAScriptParser.prototype.moduleItem = function() {

    var localctx = new ModuleItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECMAScriptParser.RULE_moduleItem);
    try {
        this.state = 826;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 823;
            this.importDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 824;
            this.exportDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 825;
            this.statementListItem();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

ImportDeclarationContext.prototype.importClause = function() {
    return this.getTypedRuleContext(ImportClauseContext,0);
};

ImportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ImportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ImportDeclarationContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportDeclaration(this);
	}
};




ECMAScriptParser.ImportDeclarationContext = ImportDeclarationContext;

ECMAScriptParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECMAScriptParser.RULE_importDeclaration);
    try {
        this.state = 837;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 828;
            this.match(ECMAScriptParser.Import);
            this.state = 829;
            this.importClause();
            this.state = 830;
            this.fromClause();
            this.state = 831;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 833;
            this.match(ECMAScriptParser.Import);
            this.state = 834;
            this.moduleSpecifier();
            this.state = 835;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importClause;
    return this;
}

ImportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportClauseContext.prototype.constructor = ImportClauseContext;

ImportClauseContext.prototype.importedDefaultBinding = function() {
    return this.getTypedRuleContext(ImportedDefaultBindingContext,0);
};

ImportClauseContext.prototype.nameSpaceImport = function() {
    return this.getTypedRuleContext(NameSpaceImportContext,0);
};

ImportClauseContext.prototype.namedImports = function() {
    return this.getTypedRuleContext(NamedImportsContext,0);
};

ImportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ImportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportClause(this);
	}
};

ImportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportClause(this);
	}
};




ECMAScriptParser.ImportClauseContext = ImportClauseContext;

ECMAScriptParser.prototype.importClause = function() {

    var localctx = new ImportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECMAScriptParser.RULE_importClause);
    try {
        this.state = 850;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 839;
            this.importedDefaultBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 840;
            this.nameSpaceImport();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 841;
            this.namedImports();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 842;
            this.importedDefaultBinding();
            this.state = 843;
            this.match(ECMAScriptParser.Comma);
            this.state = 844;
            this.nameSpaceImport();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 846;
            this.importedDefaultBinding();
            this.state = 847;
            this.match(ECMAScriptParser.Comma);
            this.state = 848;
            this.namedImports();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedDefaultBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importedDefaultBinding;
    return this;
}

ImportedDefaultBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedDefaultBindingContext.prototype.constructor = ImportedDefaultBindingContext;

ImportedDefaultBindingContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportedDefaultBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportedDefaultBinding(this);
	}
};

ImportedDefaultBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportedDefaultBinding(this);
	}
};




ECMAScriptParser.ImportedDefaultBindingContext = ImportedDefaultBindingContext;

ECMAScriptParser.prototype.importedDefaultBinding = function() {

    var localctx = new ImportedDefaultBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECMAScriptParser.RULE_importedDefaultBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 852;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameSpaceImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_nameSpaceImport;
    return this;
}

NameSpaceImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameSpaceImportContext.prototype.constructor = NameSpaceImportContext;

NameSpaceImportContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

NameSpaceImportContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

NameSpaceImportContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

NameSpaceImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNameSpaceImport(this);
	}
};

NameSpaceImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNameSpaceImport(this);
	}
};




ECMAScriptParser.NameSpaceImportContext = NameSpaceImportContext;

ECMAScriptParser.prototype.nameSpaceImport = function() {

    var localctx = new NameSpaceImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECMAScriptParser.RULE_nameSpaceImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 854;
        this.match(ECMAScriptParser.Multiply);
        this.state = 855;
        this.match(ECMAScriptParser.As);
        this.state = 856;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_namedImports;
    return this;
}

NamedImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedImportsContext.prototype.constructor = NamedImportsContext;

NamedImportsContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

NamedImportsContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

NamedImportsContext.prototype.importsList = function() {
    return this.getTypedRuleContext(ImportsListContext,0);
};

NamedImportsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

NamedImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterNamedImports(this);
	}
};

NamedImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitNamedImports(this);
	}
};




ECMAScriptParser.NamedImportsContext = NamedImportsContext;

ECMAScriptParser.prototype.namedImports = function() {

    var localctx = new NamedImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECMAScriptParser.RULE_namedImports);
    var _la = 0; // Token type
    try {
        this.state = 867;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 858;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 859;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 860;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 861;
            this.importsList();
            this.state = 863;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 862;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 865;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

FromClauseContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFromClause(this);
	}
};




ECMAScriptParser.FromClauseContext = FromClauseContext;

ECMAScriptParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECMAScriptParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 869;
        this.match(ECMAScriptParser.From);
        this.state = 870;
        this.moduleSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importsList;
    return this;
}

ImportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsListContext.prototype.constructor = ImportsListContext;

ImportsListContext.prototype.importSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ImportSpecifierContext,i);
    }
};

ImportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ImportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportsList(this);
	}
};

ImportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportsList(this);
	}
};




ECMAScriptParser.ImportsListContext = ImportsListContext;

ECMAScriptParser.prototype.importsList = function() {

    var localctx = new ImportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECMAScriptParser.RULE_importsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        this.importSpecifier();
        this.state = 877;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 873;
                this.match(ECMAScriptParser.Comma);
                this.state = 874;
                this.importSpecifier(); 
            }
            this.state = 879;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importSpecifier;
    return this;
}

ImportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportSpecifierContext.prototype.constructor = ImportSpecifierContext;

ImportSpecifierContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportSpecifierContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ImportSpecifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

ImportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportSpecifier(this);
	}
};

ImportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportSpecifier(this);
	}
};




ECMAScriptParser.ImportSpecifierContext = ImportSpecifierContext;

ECMAScriptParser.prototype.importSpecifier = function() {

    var localctx = new ImportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECMAScriptParser.RULE_importSpecifier);
    try {
        this.state = 885;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            this.importedBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 881;
            this.identifierName();
            this.state = 882;
            this.match(ECMAScriptParser.As);
            this.state = 883;
            this.importedBinding();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_moduleSpecifier;
    return this;
}

ModuleSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSpecifierContext.prototype.constructor = ModuleSpecifierContext;

ModuleSpecifierContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

ModuleSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterModuleSpecifier(this);
	}
};

ModuleSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitModuleSpecifier(this);
	}
};




ECMAScriptParser.ModuleSpecifierContext = ModuleSpecifierContext;

ECMAScriptParser.prototype.moduleSpecifier = function() {

    var localctx = new ModuleSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECMAScriptParser.RULE_moduleSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this.match(ECMAScriptParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_importedBinding;
    return this;
}

ImportedBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedBindingContext.prototype.constructor = ImportedBindingContext;

ImportedBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ImportedBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterImportedBinding(this);
	}
};

ImportedBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitImportedBinding(this);
	}
};




ECMAScriptParser.ImportedBindingContext = ImportedBindingContext;

ECMAScriptParser.prototype.importedBinding = function() {

    var localctx = new ImportedBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECMAScriptParser.RULE_importedBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 889;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportDeclaration;
    return this;
}

ExportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

ExportDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

ExportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ExportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDeclarationContext.prototype.exportClause = function() {
    return this.getTypedRuleContext(ExportClauseContext,0);
};

ExportDeclarationContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

ExportDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExportDeclarationContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

ExportDeclarationContext.prototype.hoistableDeclaration = function() {
    return this.getTypedRuleContext(HoistableDeclarationContext,0);
};

ExportDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ExportDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportDeclaration(this);
	}
};

ExportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportDeclaration(this);
	}
};




ECMAScriptParser.ExportDeclarationContext = ExportDeclarationContext;

ECMAScriptParser.prototype.exportDeclaration = function() {

    var localctx = new ExportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECMAScriptParser.RULE_exportDeclaration);
    try {
        this.state = 920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.match(ECMAScriptParser.Export);
            this.state = 892;
            this.match(ECMAScriptParser.Multiply);
            this.state = 893;
            this.fromClause();
            this.state = 894;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 896;
            this.match(ECMAScriptParser.Export);
            this.state = 897;
            this.exportClause();
            this.state = 898;
            this.fromClause();
            this.state = 899;
            this.eos();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 901;
            this.match(ECMAScriptParser.Export);
            this.state = 902;
            this.exportClause();
            this.state = 903;
            this.eos();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 905;
            this.match(ECMAScriptParser.Export);
            this.state = 906;
            this.variableStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 907;
            this.match(ECMAScriptParser.Export);
            this.state = 908;
            this.declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 909;
            this.match(ECMAScriptParser.Export);
            this.state = 910;
            this.match(ECMAScriptParser.Default);
            this.state = 911;
            this.hoistableDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 912;
            this.match(ECMAScriptParser.Export);
            this.state = 913;
            this.match(ECMAScriptParser.Default);
            this.state = 914;
            this.classDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 915;
            this.match(ECMAScriptParser.Export);
            this.state = 916;
            this.match(ECMAScriptParser.Default);
            this.state = 917;
            this.expression(0);
            this.state = 918;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportClause;
    return this;
}

ExportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportClauseContext.prototype.constructor = ExportClauseContext;

ExportClauseContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ExportClauseContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ExportClauseContext.prototype.exportsList = function() {
    return this.getTypedRuleContext(ExportsListContext,0);
};

ExportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ExportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportClause(this);
	}
};

ExportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportClause(this);
	}
};




ECMAScriptParser.ExportClauseContext = ExportClauseContext;

ECMAScriptParser.prototype.exportClause = function() {

    var localctx = new ExportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECMAScriptParser.RULE_exportClause);
    var _la = 0; // Token type
    try {
        this.state = 931;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 922;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 923;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 924;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 925;
            this.exportsList();
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 926;
                this.match(ECMAScriptParser.Comma);
            }

            this.state = 929;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportsList;
    return this;
}

ExportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsListContext.prototype.constructor = ExportsListContext;

ExportsListContext.prototype.exportSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ExportSpecifierContext,i);
    }
};

ExportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ExportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportsList(this);
	}
};

ExportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportsList(this);
	}
};




ECMAScriptParser.ExportsListContext = ExportsListContext;

ECMAScriptParser.prototype.exportsList = function() {

    var localctx = new ExportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECMAScriptParser.RULE_exportsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.exportSpecifier();
        this.state = 938;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 934;
                this.match(ECMAScriptParser.Comma);
                this.state = 935;
                this.exportSpecifier(); 
            }
            this.state = 940;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_exportSpecifier;
    return this;
}

ExportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportSpecifierContext.prototype.constructor = ExportSpecifierContext;

ExportSpecifierContext.prototype.identifierName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
        return this.getTypedRuleContext(IdentifierNameContext,i);
    }
};

ExportSpecifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

ExportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExportSpecifier(this);
	}
};

ExportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExportSpecifier(this);
	}
};




ECMAScriptParser.ExportSpecifierContext = ExportSpecifierContext;

ECMAScriptParser.prototype.exportSpecifier = function() {

    var localctx = new ExportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ECMAScriptParser.RULE_exportSpecifier);
    try {
        this.state = 946;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 941;
            this.identifierName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 942;
            this.identifierName();
            this.state = 943;
            this.match(ECMAScriptParser.As);
            this.state = 944;
            this.identifierName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierReference;
    return this;
}

IdentifierReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReferenceContext.prototype.constructor = IdentifierReferenceContext;

IdentifierReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReferenceContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

IdentifierReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifierReference(this);
	}
};

IdentifierReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifierReference(this);
	}
};




ECMAScriptParser.IdentifierReferenceContext = IdentifierReferenceContext;

ECMAScriptParser.prototype.identifierReference = function() {

    var localctx = new IdentifierReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ECMAScriptParser.RULE_identifierReference);
    try {
        this.state = 951;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 948;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 949;
            if (!( !this.canYield())) {
                throw new antlr4.error.FailedPredicateException(this, "!this.canYield()");
            }
            this.state = 950;
            this.match(ECMAScriptParser.Yield);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_bindingIdentifier;
    return this;
}

BindingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifierContext.prototype.constructor = BindingIdentifierContext;

BindingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

BindingIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterBindingIdentifier(this);
	}
};

BindingIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitBindingIdentifier(this);
	}
};




ECMAScriptParser.BindingIdentifierContext = BindingIdentifierContext;

ECMAScriptParser.prototype.bindingIdentifier = function() {

    var localctx = new BindingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECMAScriptParser.RULE_bindingIdentifier);
    try {
        this.state = 956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 953;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 954;
            if (!( !this.canYield())) {
                throw new antlr4.error.FailedPredicateException(this, "!this.canYield()");
            }
            this.state = 955;
            this.match(ECMAScriptParser.Yield);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptParser.IdentifierName, 0);
};

IdentifierContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifier(this);
	}
};




ECMAScriptParser.IdentifierContext = IdentifierContext;

ECMAScriptParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ECMAScriptParser.RULE_identifier);
    try {
        this.state = 960;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 958;
            this.match(ECMAScriptParser.IdentifierName);
            break;
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
            this.enterOuterAlt(localctx, 2);
            this.state = 959;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverParenthesizedExpressionAndArrowParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList;
    return this;
}

CoverParenthesizedExpressionAndArrowParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverParenthesizedExpressionAndArrowParameterListContext.prototype.constructor = CoverParenthesizedExpressionAndArrowParameterListContext;

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};




ECMAScriptParser.CoverParenthesizedExpressionAndArrowParameterListContext = CoverParenthesizedExpressionAndArrowParameterListContext;

ECMAScriptParser.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {

    var localctx = new CoverParenthesizedExpressionAndArrowParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ECMAScriptParser.RULE_coverParenthesizedExpressionAndArrowParameterList);
    var _la = 0; // Token type
    try {
        this.state = 982;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 962;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 967;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 963;
                this.expressionList();
                this.state = 965;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptParser.Comma) {
                    this.state = 964;
                    this.match(ECMAScriptParser.Comma);
                }


            }
            this.state = 969;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 970;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 971;
            this.match(ECMAScriptParser.Spread);
            this.state = 972;
            this.bindingIdentifier();
            this.state = 973;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 975;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 976;
            this.expressionList();
            this.state = 977;
            this.match(ECMAScriptParser.Comma);
            this.state = 978;
            this.match(ECMAScriptParser.Spread);
            this.state = 979;
            this.bindingIdentifier();
            this.state = 980;
            this.match(ECMAScriptParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.elision = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElisionContext);
    } else {
        return this.getTypedRuleContext(ElisionContext,i);
    }
};

ArrayLiteralContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayLiteralContext.prototype.spreadElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SpreadElementContext);
    } else {
        return this.getTypedRuleContext(SpreadElementContext,i);
    }
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArrayLiteral(this);
	}
};




ECMAScriptParser.ArrayLiteralContext = ArrayLiteralContext;

ECMAScriptParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ECMAScriptParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.match(ECMAScriptParser.OpenBracket);
        this.state = 986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 985;
            this.elision();

        }
        this.state = 1002;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        if(la_===1) {
            this.state = 990;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            switch(la_) {
            case 1:
                this.state = 988;
                this.expression(0);
                break;

            case 2:
                this.state = 989;
                this.spreadElement();
                break;

            }
            this.state = 999;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 992;
                    this.elision();
                    this.state = 995;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 993;
                        this.expression(0);
                        break;

                    case 2:
                        this.state = 994;
                        this.spreadElement();
                        break;

                    } 
                }
                this.state = 1001;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
            }


        }
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptParser.Comma) {
            this.state = 1004;
            this.elision();
        }

        this.state = 1007;
        this.match(ECMAScriptParser.CloseBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_elision;
    return this;
}

ElisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElisionContext.prototype.constructor = ElisionContext;

ElisionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ElisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterElision(this);
	}
};

ElisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitElision(this);
	}
};




ECMAScriptParser.ElisionContext = ElisionContext;

ECMAScriptParser.prototype.elision = function() {

    var localctx = new ElisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ECMAScriptParser.RULE_elision);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1010; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1009;
        		this.match(ECMAScriptParser.Comma);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1012; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,92, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpreadElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_spreadElement;
    return this;
}

SpreadElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadElementContext.prototype.constructor = SpreadElementContext;

SpreadElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptParser.Spread, 0);
};

SpreadElementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SpreadElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterSpreadElement(this);
	}
};

SpreadElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitSpreadElement(this);
	}
};




ECMAScriptParser.SpreadElementContext = SpreadElementContext;

ECMAScriptParser.prototype.spreadElement = function() {

    var localctx = new SpreadElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ECMAScriptParser.RULE_spreadElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.match(ECMAScriptParser.Spread);
        this.state = 1015;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyDefinitionList;
    return this;
}

PropertyDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionListContext.prototype.constructor = PropertyDefinitionListContext;

PropertyDefinitionListContext.prototype.propertyDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefinitionContext);
    } else {
        return this.getTypedRuleContext(PropertyDefinitionContext,i);
    }
};

PropertyDefinitionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


PropertyDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyDefinitionList(this);
	}
};

PropertyDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyDefinitionList(this);
	}
};




ECMAScriptParser.PropertyDefinitionListContext = PropertyDefinitionListContext;

ECMAScriptParser.prototype.propertyDefinitionList = function() {

    var localctx = new PropertyDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ECMAScriptParser.RULE_propertyDefinitionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1017;
        this.propertyDefinition();
        this.state = 1022;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1018;
                this.match(ECMAScriptParser.Comma);
                this.state = 1019;
                this.propertyDefinition(); 
            }
            this.state = 1024;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyDefinition;
    return this;
}

PropertyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionContext.prototype.constructor = PropertyDefinitionContext;

PropertyDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

PropertyDefinitionContext.prototype.coverInitializedName = function() {
    return this.getTypedRuleContext(CoverInitializedNameContext,0);
};

PropertyDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyDefinitionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

PropertyDefinitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PropertyDefinitionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PropertyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyDefinition(this);
	}
};

PropertyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyDefinition(this);
	}
};




ECMAScriptParser.PropertyDefinitionContext = PropertyDefinitionContext;

ECMAScriptParser.prototype.propertyDefinition = function() {

    var localctx = new PropertyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ECMAScriptParser.RULE_propertyDefinition);
    try {
        this.state = 1032;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1026;
            this.coverInitializedName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1027;
            this.propertyName();
            this.state = 1028;
            this.match(ECMAScriptParser.Colon);
            this.state = 1029;
            this.expression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1031;
            this.identifierReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.literalPropertyName = function() {
    return this.getTypedRuleContext(LiteralPropertyNameContext,0);
};

PropertyNameContext.prototype.computedPropertyName = function() {
    return this.getTypedRuleContext(ComputedPropertyNameContext,0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitPropertyName(this);
	}
};




ECMAScriptParser.PropertyNameContext = PropertyNameContext;

ECMAScriptParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ECMAScriptParser.RULE_propertyName);
    try {
        this.state = 1036;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1034;
            this.literalPropertyName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1035;
            this.computedPropertyName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_literalPropertyName;
    return this;
}

LiteralPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralPropertyNameContext.prototype.constructor = LiteralPropertyNameContext;

LiteralPropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

LiteralPropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

LiteralPropertyNameContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};

LiteralPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterLiteralPropertyName(this);
	}
};

LiteralPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitLiteralPropertyName(this);
	}
};




ECMAScriptParser.LiteralPropertyNameContext = LiteralPropertyNameContext;

ECMAScriptParser.prototype.literalPropertyName = function() {

    var localctx = new LiteralPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ECMAScriptParser.RULE_literalPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1041;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Enum:
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
        case ECMAScriptParser.IdentifierName:
            this.state = 1038;
            this.identifierName();
            break;
        case ECMAScriptParser.StringLiteral:
            this.state = 1039;
            this.match(ECMAScriptParser.StringLiteral);
            break;
        case ECMAScriptParser.NumericLiteral:
            this.state = 1040;
            this.match(ECMAScriptParser.NumericLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComputedPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_computedPropertyName;
    return this;
}

ComputedPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedPropertyNameContext.prototype.constructor = ComputedPropertyNameContext;

ComputedPropertyNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ComputedPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterComputedPropertyName(this);
	}
};

ComputedPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitComputedPropertyName(this);
	}
};




ECMAScriptParser.ComputedPropertyNameContext = ComputedPropertyNameContext;

ECMAScriptParser.prototype.computedPropertyName = function() {

    var localctx = new ComputedPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ECMAScriptParser.RULE_computedPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1043;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverInitializedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_coverInitializedName;
    return this;
}

CoverInitializedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverInitializedNameContext.prototype.constructor = CoverInitializedNameContext;

CoverInitializedNameContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

CoverInitializedNameContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

CoverInitializedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterCoverInitializedName(this);
	}
};

CoverInitializedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitCoverInitializedName(this);
	}
};




ECMAScriptParser.CoverInitializedNameContext = CoverInitializedNameContext;

ECMAScriptParser.prototype.coverInitializedName = function() {

    var localctx = new CoverInitializedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ECMAScriptParser.RULE_coverInitializedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.identifierReference();
        this.state = 1046;
        this.initializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ArgumentsContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ArgumentsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArguments(this);
	}
};




ECMAScriptParser.ArgumentsContext = ArgumentsContext;

ECMAScriptParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ECMAScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        this.match(ECMAScriptParser.OpenParen);
        this.state = 1053;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 1049;
            this.argumentList();
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptParser.Comma) {
                this.state = 1050;
                this.match(ECMAScriptParser.Comma);
            }


        }
        this.state = 1055;
        this.match(ECMAScriptParser.CloseParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.expressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionListContext);
    } else {
        return this.getTypedRuleContext(ExpressionListContext,i);
    }
};

ArgumentListContext.prototype.Spread = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Spread);
    } else {
        return this.getToken(ECMAScriptParser.Spread, i);
    }
};


ArgumentListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitArgumentList(this);
	}
};




ECMAScriptParser.ArgumentListContext = ArgumentListContext;

ECMAScriptParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ECMAScriptParser.RULE_argumentList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 1057;
            this.match(ECMAScriptParser.Spread);

        }
        this.state = 1060;
        this.expressionList();
        this.state = 1066;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1061;
                this.match(ECMAScriptParser.Comma);
                this.state = 1062;
                this.match(ECMAScriptParser.Spread);
                this.state = 1063;
                this.expressionList(); 
            }
            this.state = 1068;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

InitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitInitializer(this);
	}
};




ECMAScriptParser.InitializerContext = InitializerContext;

ECMAScriptParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ECMAScriptParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069;
        this.match(ECMAScriptParser.Assign);
        this.state = 1070;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptParser.Comma);
    } else {
        return this.getToken(ECMAScriptParser.Comma, i);
    }
};


ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpressionList(this);
	}
};




ECMAScriptParser.ExpressionListContext = ExpressionListContext;

ECMAScriptParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ECMAScriptParser.RULE_expressionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1072;
        this.expression(0);
        this.state = 1077;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1073;
                this.match(ECMAScriptParser.Comma);
                this.state = 1074;
                this.expression(0); 
            }
            this.state = 1079;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};

ExpressionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

ExpressionContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

ExpressionContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

ExpressionContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptParser.NumericLiteral, 0);
};

ExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptParser.StringLiteral, 0);
};

ExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

ExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptParser.OpenBrace, 0);
};

ExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptParser.CloseBrace, 0);
};

ExpressionContext.prototype.propertyDefinitionList = function() {
    return this.getTypedRuleContext(PropertyDefinitionListContext,0);
};

ExpressionContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptParser.Comma, 0);
};

ExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

ExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptParser.OpenParen, 0);
};

ExpressionContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptParser.CloseParen, 0);
};

ExpressionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ExpressionContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

ExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ExpressionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

ExpressionContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

ExpressionContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

ExpressionContext.prototype.arrowParameters = function() {
    return this.getTypedRuleContext(ArrowParametersContext,0);
};

ExpressionContext.prototype.FatArrow = function() {
    return this.getToken(ECMAScriptParser.FatArrow, 0);
};

ExpressionContext.prototype.conciseBody = function() {
    return this.getTypedRuleContext(ConciseBodyContext,0);
};

ExpressionContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

ExpressionContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};

ExpressionContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};

ExpressionContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};

ExpressionContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};

ExpressionContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

ExpressionContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};

ExpressionContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};

ExpressionContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptParser.BitAnd, 0);
};

ExpressionContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptParser.BitXor, 0);
};

ExpressionContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptParser.BitOr, 0);
};

ExpressionContext.prototype.And = function() {
    return this.getToken(ECMAScriptParser.And, 0);
};

ExpressionContext.prototype.Or = function() {
    return this.getToken(ECMAScriptParser.Or, 0);
};

ExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptParser.QuestionMark, 0);
};

ExpressionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptParser.Colon, 0);
};

ExpressionContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptParser.Assign, 0);
};

ExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

ExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptParser.OpenBracket, 0);
};

ExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptParser.CloseBracket, 0);
};

ExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptParser.Dot, 0);
};

ExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

ExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitExpression(this);
	}
};



ECMAScriptParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 216;
    this.enterRecursionRule(localctx, 216, ECMAScriptParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1081;
            this.match(ECMAScriptParser.This);
            break;

        case 2:
            this.state = 1082;
            this.identifierReference();
            break;

        case 3:
            this.state = 1083;
            this.match(ECMAScriptParser.NullLiteral);
            break;

        case 4:
            this.state = 1084;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;

        case 5:
            this.state = 1085;
            this.match(ECMAScriptParser.NumericLiteral);
            break;

        case 6:
            this.state = 1086;
            this.match(ECMAScriptParser.StringLiteral);
            break;

        case 7:
            this.state = 1087;
            this.arrayLiteral();
            break;

        case 8:
            this.state = 1088;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1093;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 1089;
                this.propertyDefinitionList();
                this.state = 1091;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptParser.Comma) {
                    this.state = 1090;
                    this.match(ECMAScriptParser.Comma);
                }


            }
            this.state = 1095;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 9:
            this.state = 1096;
            this.match(ECMAScriptParser.Function);
            this.state = 1098;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 1097;
                this.bindingIdentifier();

            }
            this.state = 1100;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1101;
            this.formalParameters();
            this.state = 1102;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1103;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1104;
            this.functionBody();
            this.state = 1105;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 10:
            this.state = 1107;
            this.match(ECMAScriptParser.Class);
            this.state = 1109;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
            if(la_===1) {
                this.state = 1108;
                this.bindingIdentifier();

            }
            this.state = 1111;
            this.classTail();
            break;

        case 11:
            this.state = 1112;
            this.match(ECMAScriptParser.Function);
            this.state = 1113;
            this.match(ECMAScriptParser.Multiply);
            this.state = 1115;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
            if(la_===1) {
                this.state = 1114;
                this.bindingIdentifier();

            }
            this.state = 1117;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1118;
            this.formalParameters();
            this.state = 1119;
            this.match(ECMAScriptParser.CloseParen);
            this.state = 1120;
            this.match(ECMAScriptParser.OpenBrace);
            this.state = 1121;
            this.generatorBody();
            this.state = 1122;
            this.match(ECMAScriptParser.CloseBrace);
            break;

        case 12:
            this.state = 1124;
            this.match(ECMAScriptParser.RegularExpressionLiteral);
            break;

        case 13:
            this.state = 1125;
            this.match(ECMAScriptParser.OpenParen);
            this.state = 1126;
            this.expressionList();
            this.state = 1127;
            this.match(ECMAScriptParser.CloseParen);
            break;

        case 14:
            this.state = 1129;
            this.match(ECMAScriptParser.New);
            this.state = 1130;
            this.expression(0);
            this.state = 1132;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
            if(la_===1) {
                this.state = 1131;
                this.arguments();

            }
            break;

        case 15:
            this.state = 1134;
            this.unaryOperator();
            this.state = 1135;
            this.expression(18);
            break;

        case 16:
            this.state = 1137;
            this.arrowParameters();
            this.state = 1138;
            if (!( this.noLineTerminatorHere())) {
                throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
            }
            this.state = 1139;
            this.match(ECMAScriptParser.FatArrow);
            this.state = 1140;
            this.conciseBody();
            break;

        case 17:
            this.canYield()
            this.state = 1143;
            this.match(ECMAScriptParser.Yield);
            this.state = 1149;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 1144;
                if (!( this.noLineTerminatorHere())) {
                    throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
                }
                this.state = 1146;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
                if(la_===1) {
                    this.state = 1145;
                    this.match(ECMAScriptParser.Multiply);

                }
                this.state = 1148;
                this.expression(0);

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1222;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1220;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1153;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1154;
                    this.multiplicativeOperator();
                    this.state = 1155;
                    this.expression(18);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1157;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1158;
                    this.additiveOperator();
                    this.state = 1159;
                    this.expression(17);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1161;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1162;
                    this.shiftOperator();
                    this.state = 1163;
                    this.expression(16);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1165;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1166;
                    this.relationalOperator();
                    this.state = 1167;
                    this.expression(15);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1169;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1170;
                    this.match(ECMAScriptParser.In);
                    this.state = 1171;
                    this.expression(14);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1172;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1173;
                    this.match(ECMAScriptParser.Instanceof);
                    this.state = 1174;
                    this.expression(13);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1175;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1176;
                    this.equalityOperator();
                    this.state = 1177;
                    this.expression(12);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1179;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1180;
                    this.match(ECMAScriptParser.BitAnd);
                    this.state = 1181;
                    this.expression(11);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1182;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1183;
                    this.match(ECMAScriptParser.BitXor);
                    this.state = 1184;
                    this.expression(10);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1185;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1186;
                    this.match(ECMAScriptParser.BitOr);
                    this.state = 1187;
                    this.expression(9);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1188;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1189;
                    this.match(ECMAScriptParser.And);
                    this.state = 1190;
                    this.expression(8);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1191;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1192;
                    this.match(ECMAScriptParser.Or);
                    this.state = 1193;
                    this.expression(7);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1194;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1195;
                    this.match(ECMAScriptParser.QuestionMark);
                    this.state = 1196;
                    this.expression(0);
                    this.state = 1197;
                    this.match(ECMAScriptParser.Colon);
                    this.state = 1198;
                    this.expression(6);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1200;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1201;
                    this.match(ECMAScriptParser.Assign);
                    this.state = 1202;
                    this.expression(3);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1203;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1204;
                    this.assignmentOperator();
                    this.state = 1205;
                    this.expression(2);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1207;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1208;
                    this.arguments();
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1209;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1210;
                    this.match(ECMAScriptParser.OpenBracket);
                    this.state = 1211;
                    this.expressionList();
                    this.state = 1212;
                    this.match(ECMAScriptParser.CloseBracket);
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1214;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1215;
                    this.match(ECMAScriptParser.Dot);
                    this.state = 1216;
                    this.identifierName();
                    break;

                case 19:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_expression);
                    this.state = 1217;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1218;
                    if (!( this.noLineTerminatorHere())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.noLineTerminatorHere()");
                    }
                    this.state = 1219;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptParser.PlusPlus || _la===ECMAScriptParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 1224;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

UnaryOperatorContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

UnaryOperatorContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

UnaryOperatorContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptParser.PlusPlus, 0);
};

UnaryOperatorContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptParser.MinusMinus, 0);
};

UnaryOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

UnaryOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};

UnaryOperatorContext.prototype.BitNot = function() {
    return this.getToken(ECMAScriptParser.BitNot, 0);
};

UnaryOperatorContext.prototype.Not = function() {
    return this.getToken(ECMAScriptParser.Not, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitUnaryOperator(this);
	}
};




ECMAScriptParser.UnaryOperatorContext = UnaryOperatorContext;

ECMAScriptParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ECMAScriptParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1225;
        _la = this._input.LA(1);
        if(!(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (ECMAScriptParser.Plus - 28)) | (1 << (ECMAScriptParser.Minus - 28)) | (1 << (ECMAScriptParser.PlusPlus - 28)) | (1 << (ECMAScriptParser.MinusMinus - 28)) | (1 << (ECMAScriptParser.Not - 28)) | (1 << (ECMAScriptParser.BitNot - 28)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ECMAScriptParser.Delete - 73)) | (1 << (ECMAScriptParser.Typeof - 73)) | (1 << (ECMAScriptParser.Void - 73)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_multiplicativeOperator;
    return this;
}

MultiplicativeOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeOperatorContext.prototype.constructor = MultiplicativeOperatorContext;

MultiplicativeOperatorContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptParser.Multiply, 0);
};

MultiplicativeOperatorContext.prototype.Divide = function() {
    return this.getToken(ECMAScriptParser.Divide, 0);
};

MultiplicativeOperatorContext.prototype.Modulo = function() {
    return this.getToken(ECMAScriptParser.Modulo, 0);
};

MultiplicativeOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMultiplicativeOperator(this);
	}
};

MultiplicativeOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMultiplicativeOperator(this);
	}
};




ECMAScriptParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext;

ECMAScriptParser.prototype.multiplicativeOperator = function() {

    var localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ECMAScriptParser.RULE_multiplicativeOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1227;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ECMAScriptParser.Multiply - 30)) | (1 << (ECMAScriptParser.Modulo - 30)) | (1 << (ECMAScriptParser.Divide - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_additiveOperator;
    return this;
}

AdditiveOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveOperatorContext.prototype.constructor = AdditiveOperatorContext;

AdditiveOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptParser.Plus, 0);
};

AdditiveOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptParser.Minus, 0);
};

AdditiveOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAdditiveOperator(this);
	}
};

AdditiveOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAdditiveOperator(this);
	}
};




ECMAScriptParser.AdditiveOperatorContext = AdditiveOperatorContext;

ECMAScriptParser.prototype.additiveOperator = function() {

    var localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ECMAScriptParser.RULE_additiveOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptParser.Plus || _la===ECMAScriptParser.Minus)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShiftOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_shiftOperator;
    return this;
}

ShiftOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftOperatorContext.prototype.constructor = ShiftOperatorContext;

ShiftOperatorContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftLogical = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogical, 0);
};

ShiftOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterShiftOperator(this);
	}
};

ShiftOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitShiftOperator(this);
	}
};




ECMAScriptParser.ShiftOperatorContext = ShiftOperatorContext;

ECMAScriptParser.prototype.shiftOperator = function() {

    var localctx = new ShiftOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ECMAScriptParser.RULE_shiftOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1231;
        _la = this._input.LA(1);
        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptParser.LeftShiftArithmetic - 35)) | (1 << (ECMAScriptParser.RightShiftArithmetic - 35)) | (1 << (ECMAScriptParser.RightShiftLogical - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_relationalOperator;
    return this;
}

RelationalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalOperatorContext.prototype.constructor = RelationalOperatorContext;

RelationalOperatorContext.prototype.LessThan = function() {
    return this.getToken(ECMAScriptParser.LessThan, 0);
};

RelationalOperatorContext.prototype.GreaterThan = function() {
    return this.getToken(ECMAScriptParser.GreaterThan, 0);
};

RelationalOperatorContext.prototype.LessThanEquals = function() {
    return this.getToken(ECMAScriptParser.LessThanEquals, 0);
};

RelationalOperatorContext.prototype.GreaterThanEquals = function() {
    return this.getToken(ECMAScriptParser.GreaterThanEquals, 0);
};

RelationalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterRelationalOperator(this);
	}
};

RelationalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitRelationalOperator(this);
	}
};




ECMAScriptParser.RelationalOperatorContext = RelationalOperatorContext;

ECMAScriptParser.prototype.relationalOperator = function() {

    var localctx = new RelationalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ECMAScriptParser.RULE_relationalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.LessThan) | (1 << ECMAScriptParser.GreaterThan) | (1 << ECMAScriptParser.LessThanEquals) | (1 << ECMAScriptParser.GreaterThanEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_equalityOperator;
    return this;
}

EqualityOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityOperatorContext.prototype.constructor = EqualityOperatorContext;

EqualityOperatorContext.prototype.Equals = function() {
    return this.getToken(ECMAScriptParser.Equals, 0);
};

EqualityOperatorContext.prototype.NotEquals = function() {
    return this.getToken(ECMAScriptParser.NotEquals, 0);
};

EqualityOperatorContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityEquals, 0);
};

EqualityOperatorContext.prototype.IdentityNotEquals = function() {
    return this.getToken(ECMAScriptParser.IdentityNotEquals, 0);
};

EqualityOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterEqualityOperator(this);
	}
};

EqualityOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitEqualityOperator(this);
	}
};




ECMAScriptParser.EqualityOperatorContext = EqualityOperatorContext;

ECMAScriptParser.prototype.equalityOperator = function() {

    var localctx = new EqualityOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ECMAScriptParser.RULE_equalityOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1235;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.Equals) | (1 << ECMAScriptParser.NotEquals) | (1 << ECMAScriptParser.IdentityEquals) | (1 << ECMAScriptParser.IdentityNotEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(ECMAScriptParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(ECMAScriptParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(ECMAScriptParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(ECMAScriptParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModuloAssign = function() {
    return this.getToken(ECMAScriptParser.ModuloAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(ECMAScriptParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(ECMAScriptParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(ECMAScriptParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(ECMAScriptParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(ECMAScriptParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ECMAScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;

ECMAScriptParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ECMAScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (ECMAScriptParser.PlusAssign - 48)) | (1 << (ECMAScriptParser.MinusAssign - 48)) | (1 << (ECMAScriptParser.MultiplyAssign - 48)) | (1 << (ECMAScriptParser.ModuloAssign - 48)) | (1 << (ECMAScriptParser.PowerAssign - 48)) | (1 << (ECMAScriptParser.LeftShiftArithmeticAssign - 48)) | (1 << (ECMAScriptParser.RightShiftArithmeticAssign - 48)) | (1 << (ECMAScriptParser.RightShiftLogicalAssign - 48)) | (1 << (ECMAScriptParser.BitAndAssign - 48)) | (1 << (ECMAScriptParser.BitOrAssign - 48)) | (1 << (ECMAScriptParser.BitXorAssign - 48)) | (1 << (ECMAScriptParser.DivideAssign - 48)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptParser.IdentifierName, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterIdentifierName(this);
	}
};

IdentifierNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitIdentifierName(this);
	}
};




ECMAScriptParser.IdentifierNameContext = IdentifierNameContext;

ECMAScriptParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ECMAScriptParser.RULE_identifierName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1242;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.IdentifierName:
            this.state = 1239;
            this.match(ECMAScriptParser.IdentifierName);
            break;
        case ECMAScriptParser.NullLiteral:
        case ECMAScriptParser.BooleanLiteral:
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
        case ECMAScriptParser.Enum:
            this.state = 1240;
            this.reservedWord();
            break;
        case ECMAScriptParser.As:
        case ECMAScriptParser.Async:
        case ECMAScriptParser.From:
        case ECMAScriptParser.Get:
        case ECMAScriptParser.Let:
        case ECMAScriptParser.Of:
        case ECMAScriptParser.Set:
        case ECMAScriptParser.Static:
        case ECMAScriptParser.Target:
            this.state = 1241;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.futureReservedWord = function() {
    return this.getTypedRuleContext(FutureReservedWordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitReservedWord(this);
	}
};




ECMAScriptParser.ReservedWordContext = ReservedWordContext;

ECMAScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ECMAScriptParser.RULE_reservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1248;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptParser.Await:
        case ECMAScriptParser.Break:
        case ECMAScriptParser.Case:
        case ECMAScriptParser.Catch:
        case ECMAScriptParser.Class:
        case ECMAScriptParser.Const:
        case ECMAScriptParser.Continue:
        case ECMAScriptParser.Debugger:
        case ECMAScriptParser.Default:
        case ECMAScriptParser.Delete:
        case ECMAScriptParser.Do:
        case ECMAScriptParser.Else:
        case ECMAScriptParser.Export:
        case ECMAScriptParser.Extends:
        case ECMAScriptParser.Finally:
        case ECMAScriptParser.For:
        case ECMAScriptParser.Function:
        case ECMAScriptParser.If:
        case ECMAScriptParser.Import:
        case ECMAScriptParser.In:
        case ECMAScriptParser.Instanceof:
        case ECMAScriptParser.New:
        case ECMAScriptParser.Return:
        case ECMAScriptParser.Super:
        case ECMAScriptParser.Switch:
        case ECMAScriptParser.This:
        case ECMAScriptParser.Throw:
        case ECMAScriptParser.Try:
        case ECMAScriptParser.Typeof:
        case ECMAScriptParser.Var:
        case ECMAScriptParser.Void:
        case ECMAScriptParser.While:
        case ECMAScriptParser.With:
        case ECMAScriptParser.Yield:
            this.state = 1244;
            this.keyword();
            break;
        case ECMAScriptParser.Enum:
            this.state = 1245;
            this.futureReservedWord();
            break;
        case ECMAScriptParser.NullLiteral:
            this.state = 1246;
            this.match(ECMAScriptParser.NullLiteral);
            break;
        case ECMAScriptParser.BooleanLiteral:
            this.state = 1247;
            this.match(ECMAScriptParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Await = function() {
    return this.getToken(ECMAScriptParser.Await, 0);
};

KeywordContext.prototype.Break = function() {
    return this.getToken(ECMAScriptParser.Break, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(ECMAScriptParser.Case, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptParser.Catch, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(ECMAScriptParser.Class, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(ECMAScriptParser.Const, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptParser.Continue, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptParser.Debugger, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(ECMAScriptParser.Default, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptParser.Delete, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(ECMAScriptParser.Do, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(ECMAScriptParser.Else, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(ECMAScriptParser.Export, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptParser.Extends, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptParser.Finally, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(ECMAScriptParser.For, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(ECMAScriptParser.Function, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(ECMAScriptParser.If, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(ECMAScriptParser.Import, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(ECMAScriptParser.In, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptParser.Instanceof, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(ECMAScriptParser.New, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(ECMAScriptParser.Return, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(ECMAScriptParser.Super, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptParser.Switch, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(ECMAScriptParser.This, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptParser.Throw, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(ECMAScriptParser.Try, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptParser.Typeof, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(ECMAScriptParser.Var, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(ECMAScriptParser.Void, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(ECMAScriptParser.While, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(ECMAScriptParser.With, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptParser.Yield, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitKeyword(this);
	}
};




ECMAScriptParser.KeywordContext = KeywordContext;

ECMAScriptParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ECMAScriptParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        _la = this._input.LA(1);
        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ECMAScriptParser.Await - 64)) | (1 << (ECMAScriptParser.Break - 64)) | (1 << (ECMAScriptParser.Case - 64)) | (1 << (ECMAScriptParser.Catch - 64)) | (1 << (ECMAScriptParser.Class - 64)) | (1 << (ECMAScriptParser.Const - 64)) | (1 << (ECMAScriptParser.Continue - 64)) | (1 << (ECMAScriptParser.Debugger - 64)) | (1 << (ECMAScriptParser.Default - 64)) | (1 << (ECMAScriptParser.Delete - 64)) | (1 << (ECMAScriptParser.Do - 64)) | (1 << (ECMAScriptParser.Else - 64)) | (1 << (ECMAScriptParser.Export - 64)) | (1 << (ECMAScriptParser.Extends - 64)) | (1 << (ECMAScriptParser.Finally - 64)) | (1 << (ECMAScriptParser.For - 64)) | (1 << (ECMAScriptParser.Function - 64)) | (1 << (ECMAScriptParser.If - 64)) | (1 << (ECMAScriptParser.Import - 64)) | (1 << (ECMAScriptParser.In - 64)) | (1 << (ECMAScriptParser.Instanceof - 64)) | (1 << (ECMAScriptParser.New - 64)) | (1 << (ECMAScriptParser.Return - 64)) | (1 << (ECMAScriptParser.Super - 64)) | (1 << (ECMAScriptParser.Switch - 64)) | (1 << (ECMAScriptParser.This - 64)) | (1 << (ECMAScriptParser.Throw - 64)) | (1 << (ECMAScriptParser.Try - 64)) | (1 << (ECMAScriptParser.Typeof - 64)) | (1 << (ECMAScriptParser.Var - 64)) | (1 << (ECMAScriptParser.Void - 64)) | (1 << (ECMAScriptParser.While - 64)))) !== 0) || _la===ECMAScriptParser.With || _la===ECMAScriptParser.Yield)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FutureReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_futureReservedWord;
    return this;
}

FutureReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FutureReservedWordContext.prototype.constructor = FutureReservedWordContext;

FutureReservedWordContext.prototype.Enum = function() {
    return this.getToken(ECMAScriptParser.Enum, 0);
};

FutureReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterFutureReservedWord(this);
	}
};

FutureReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitFutureReservedWord(this);
	}
};




ECMAScriptParser.FutureReservedWordContext = FutureReservedWordContext;

ECMAScriptParser.prototype.futureReservedWord = function() {

    var localctx = new FutureReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ECMAScriptParser.RULE_futureReservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252;
        this.match(ECMAScriptParser.Enum);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MiscIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptParser.RULE_miscIdentifier;
    return this;
}

MiscIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MiscIdentifierContext.prototype.constructor = MiscIdentifierContext;

MiscIdentifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptParser.As, 0);
};

MiscIdentifierContext.prototype.Async = function() {
    return this.getToken(ECMAScriptParser.Async, 0);
};

MiscIdentifierContext.prototype.From = function() {
    return this.getToken(ECMAScriptParser.From, 0);
};

MiscIdentifierContext.prototype.Get = function() {
    return this.getToken(ECMAScriptParser.Get, 0);
};

MiscIdentifierContext.prototype.Let = function() {
    return this.getToken(ECMAScriptParser.Let, 0);
};

MiscIdentifierContext.prototype.Of = function() {
    return this.getToken(ECMAScriptParser.Of, 0);
};

MiscIdentifierContext.prototype.Set = function() {
    return this.getToken(ECMAScriptParser.Set, 0);
};

MiscIdentifierContext.prototype.Static = function() {
    return this.getToken(ECMAScriptParser.Static, 0);
};

MiscIdentifierContext.prototype.Target = function() {
    return this.getToken(ECMAScriptParser.Target, 0);
};

MiscIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.enterMiscIdentifier(this);
	}
};

MiscIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptListener ) {
        listener.exitMiscIdentifier(this);
	}
};




ECMAScriptParser.MiscIdentifierContext = MiscIdentifierContext;

ECMAScriptParser.prototype.miscIdentifier = function() {

    var localctx = new MiscIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ECMAScriptParser.RULE_miscIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1254;
        _la = this._input.LA(1);
        if(!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (ECMAScriptParser.As - 102)) | (1 << (ECMAScriptParser.Async - 102)) | (1 << (ECMAScriptParser.From - 102)) | (1 << (ECMAScriptParser.Get - 102)) | (1 << (ECMAScriptParser.Let - 102)) | (1 << (ECMAScriptParser.Of - 102)) | (1 << (ECMAScriptParser.Set - 102)) | (1 << (ECMAScriptParser.Static - 102)) | (1 << (ECMAScriptParser.Target - 102)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ECMAScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.eos_sempred(localctx, predIndex);
	case 2:
			return this.statement_sempred(localctx, predIndex);
	case 6:
			return this.returnStatement_sempred(localctx, predIndex);
	case 8:
			return this.expressionStatement_sempred(localctx, predIndex);
	case 44:
			return this.continueStatement_sempred(localctx, predIndex);
	case 45:
			return this.breakStatement_sempred(localctx, predIndex);
	case 91:
			return this.identifierReference_sempred(localctx, predIndex);
	case 92:
			return this.bindingIdentifier_sempred(localctx, predIndex);
	case 108:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ECMAScriptParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.isSemiColonEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.statement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.canReturn();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.returnStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.noLineTerminatorHere();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.isValidExpressionStatement();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.continueStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.noLineTerminatorHere();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.breakStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.noLineTerminatorHere();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.identifierReference_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return !this.canYield();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.bindingIdentifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return !this.canYield();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.noLineTerminatorHere();
		case 9:
			return this.noLineTerminatorHere();
		case 10:
			return this.precpred(this._ctx, 17);
		case 11:
			return this.precpred(this._ctx, 16);
		case 12:
			return this.precpred(this._ctx, 15);
		case 13:
			return this.precpred(this._ctx, 14);
		case 14:
			return this.precpred(this._ctx, 13);
		case 15:
			return this.precpred(this._ctx, 12);
		case 16:
			return this.precpred(this._ctx, 11);
		case 17:
			return this.precpred(this._ctx, 10);
		case 18:
			return this.precpred(this._ctx, 9);
		case 19:
			return this.precpred(this._ctx, 8);
		case 20:
			return this.precpred(this._ctx, 7);
		case 21:
			return this.precpred(this._ctx, 6);
		case 22:
			return this.precpred(this._ctx, 5);
		case 23:
			return this.precpred(this._ctx, 2);
		case 24:
			return this.precpred(this._ctx, 1);
		case 25:
			return this.precpred(this._ctx, 23);
		case 26:
			return this.precpred(this._ctx, 22);
		case 27:
			return this.precpred(this._ctx, 21);
		case 28:
			return this.precpred(this._ctx, 19);
		case 29:
			return this.noLineTerminatorHere();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ECMAScriptParser = ECMAScriptParser;
