// Generated from /home/jason/Projets/ecmascript-parser/src/static/antlr4/grammars/ECMAScriptPass.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ECMAScriptPassListener = require('./ECMAScriptPassListener').ECMAScriptPassListener;
var grammarFileName = "ECMAScriptPass.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003p\u03bd\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0003\u0002\u0005\u0002\u00c0\n\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u00c8\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004",
    "\u00cd\n\u0004\f\u0004\u000e\u0004\u00d0\u000b\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u00d5\n\u0005\f\u0005\u000e\u0005\u00d8",
    "\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u00de\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00e3",
    "\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u00ef\n\t\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0005\u000b\u00f6\n\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u00fc\n\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0005\r\u0103\n\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u010e\n\r\u0003\r\u0003",
    "\r\u0005\r\u0112\n\r\u0003\u000e\u0003\u000e\u0005\u000e\u0116\n\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u011a\n\u000e\u0003\u000e\u0005",
    "\u000e\u011d\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u0122\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u0128\n\u000e\u0003\u000e\u0007\u000e\u012b\n\u000e\f\u000e\u000e",
    "\u000e\u012e\u000b\u000e\u0003\u000f\u0006\u000f\u0131\n\u000f\r\u000f",
    "\u000e\u000f\u0132\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u013d\n\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0141\n\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u0146\n\u0012\f\u0012\u000e\u0012\u0149",
    "\u000b\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0151\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0158\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0007\u0016\u0162\n\u0016\f\u0016\u000e\u0016\u0165\u000b",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u016c\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0170\n\u0017",
    "\u0003\u0018\u0005\u0018\u0173\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u0178\n\u0018\u0003\u0018\u0007\u0018\u017b\n\u0018",
    "\f\u0018\u000e\u0018\u017e\u000b\u0018\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0182\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0187\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u018f\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u0199\n\u001b\f\u001b\u000e\u001b\u019c\u000b\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u01b1\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01e4\n",
    "\u001e\f\u001e\u000e\u001e\u01e7\u000b\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u01f6\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u022c\n\u001f\f\u001f\u000e\u001f\u022f\u000b\u001f\u0003 \u0003",
    " \u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003",
    "%\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0005\'\u0249\n\'\u0003(\u0003(\u0005(\u024d",
    "\n(\u0003)\u0006)\u0250\n)\r)\u000e)\u0251\u0003*\u0006*\u0255\n*\r",
    "*\u000e*\u0256\u0003+\u0003+\u0005+\u025b\n+\u0003,\u0003,\u0005,\u025f",
    "\n,\u0003-\u0003-\u0003.\u0003.\u0005.\u0265\n.\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00051\u0270\n1\u00032\u0003",
    "2\u00032\u00032\u00033\u00033\u00033\u00033\u00034\u00034\u00035\u0003",
    "5\u00035\u00075\u027f\n5\f5\u000e5\u0282\u000b5\u00036\u00036\u0003",
    "6\u00076\u0287\n6\f6\u000e6\u028a\u000b6\u00037\u00037\u00057\u028e",
    "\n7\u00038\u00038\u00058\u0292\n8\u00039\u00039\u00059\u0296\n9\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0005=\u02a6\n=\u0003>\u0003>\u0003>\u0005>\u02ab",
    "\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0005@\u02b5",
    "\n@\u0003@\u0003@\u0003@\u0005@\u02ba\n@\u0003@\u0003@\u0005@\u02be",
    "\n@\u0003@\u0003@\u0005@\u02c2\n@\u0003A\u0006A\u02c5\nA\rA\u000eA\u02c6",
    "\u0003B\u0003B\u0003B\u0003B\u0005B\u02cd\nB\u0003C\u0003C\u0003C\u0005",
    "C\u02d2\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u02e5",
    "\nD\u0003D\u0003D\u0005D\u02e9\nD\u0003D\u0003D\u0005D\u02ed\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u02f7\nD\u0003",
    "D\u0003D\u0005D\u02fb\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u0304\nD\u0003D\u0003D\u0005D\u0308\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u031e\nD\u0003",
    "E\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0005G\u032c\nG\u0003H\u0003H\u0005H\u0330\nH\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0005I\u0338\nI\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0005J\u0340\nJ\u0003K\u0003K\u0003L\u0003L\u0005L\u0346",
    "\nL\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0007",
    "N\u0351\nN\fN\u000eN\u0354\u000bN\u0003O\u0003O\u0003O\u0007O\u0359",
    "\nO\fO\u000eO\u035c\u000bO\u0003P\u0003P\u0005P\u0360\nP\u0003Q\u0003",
    "Q\u0005Q\u0364\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003S\u0003S\u0005S\u0371\nS\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003T\u0003T\u0003U\u0003U\u0003U\u0005U\u037f\nU\u0005",
    "U\u0381\nU\u0003V\u0003V\u0003V\u0007V\u0386\nV\fV\u000eV\u0389\u000b",
    "V\u0003W\u0003W\u0003X\u0003X\u0003Y\u0005Y\u0390\nY\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0005Z\u03ab\nZ\u0003[\u0003[\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0005\\\u03b3\n\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003",
    "_\u0005_\u03bb\n_\u0003_\u0002\u0007\u001a*4:<`\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u0002\r\u0005\u0002\u0005\u0005=>gg\u0003\u0002\u001d\u001e",
    "\b\u0002\u0018\u0019\u001d\u001e%&HH[[]]\u0004\u0002\u001a\u001b99\u0003",
    "\u0002\u0018\u0019\u0003\u0002\u001f!\u0003\u0002\u0010\u0013\u0003",
    "\u0002\u0014\u0017\u0004\u0002,6::\u0004\u0002DDff\u0003\u0002?`\u0002",
    "\u03f3\u0002\u00bf\u0003\u0002\u0002\u0002\u0004\u00c7\u0003\u0002\u0002",
    "\u0002\u0006\u00c9\u0003\u0002\u0002\u0002\b\u00d1\u0003\u0002\u0002",
    "\u0002\n\u00dd\u0003\u0002\u0002\u0002\f\u00e2\u0003\u0002\u0002\u0002",
    "\u000e\u00e4\u0003\u0002\u0002\u0002\u0010\u00ee\u0003\u0002\u0002\u0002",
    "\u0012\u00f0\u0003\u0002\u0002\u0002\u0014\u00fb\u0003\u0002\u0002\u0002",
    "\u0016\u00fd\u0003\u0002\u0002\u0002\u0018\u0111\u0003\u0002\u0002\u0002",
    "\u001a\u011c\u0003\u0002\u0002\u0002\u001c\u0130\u0003\u0002\u0002\u0002",
    "\u001e\u0134\u0003\u0002\u0002\u0002 \u0140\u0003\u0002\u0002\u0002",
    "\"\u0142\u0003\u0002\u0002\u0002$\u0150\u0003\u0002\u0002\u0002&\u0152",
    "\u0003\u0002\u0002\u0002(\u0157\u0003\u0002\u0002\u0002*\u0159\u0003",
    "\u0002\u0002\u0002,\u016f\u0003\u0002\u0002\u0002.\u0172\u0003\u0002",
    "\u0002\u00020\u0181\u0003\u0002\u0002\u00022\u0186\u0003\u0002\u0002",
    "\u00024\u018e\u0003\u0002\u0002\u00026\u019d\u0003\u0002\u0002\u0002",
    "8\u01a0\u0003\u0002\u0002\u0002:\u01b0\u0003\u0002\u0002\u0002<\u01f5",
    "\u0003\u0002\u0002\u0002>\u0230\u0003\u0002\u0002\u0002@\u0232\u0003",
    "\u0002\u0002\u0002B\u0234\u0003\u0002\u0002\u0002D\u0236\u0003\u0002",
    "\u0002\u0002F\u0238\u0003\u0002\u0002\u0002H\u023a\u0003\u0002\u0002",
    "\u0002J\u023c\u0003\u0002\u0002\u0002L\u0248\u0003\u0002\u0002\u0002",
    "N\u024c\u0003\u0002\u0002\u0002P\u024f\u0003\u0002\u0002\u0002R\u0254",
    "\u0003\u0002\u0002\u0002T\u025a\u0003\u0002\u0002\u0002V\u025e\u0003",
    "\u0002\u0002\u0002X\u0260\u0003\u0002\u0002\u0002Z\u0262\u0003\u0002",
    "\u0002\u0002\\\u0268\u0003\u0002\u0002\u0002^\u026b\u0003\u0002\u0002",
    "\u0002`\u026d\u0003\u0002\u0002\u0002b\u0271\u0003\u0002\u0002\u0002",
    "d\u0275\u0003\u0002\u0002\u0002f\u0279\u0003\u0002\u0002\u0002h\u027b",
    "\u0003\u0002\u0002\u0002j\u0283\u0003\u0002\u0002\u0002l\u028b\u0003",
    "\u0002\u0002\u0002n\u028f\u0003\u0002\u0002\u0002p\u0295\u0003\u0002",
    "\u0002\u0002r\u0297\u0003\u0002\u0002\u0002t\u0299\u0003\u0002\u0002",
    "\u0002v\u029f\u0003\u0002\u0002\u0002x\u02a5\u0003\u0002\u0002\u0002",
    "z\u02aa\u0003\u0002\u0002\u0002|\u02ac\u0003\u0002\u0002\u0002~\u02c1",
    "\u0003\u0002\u0002\u0002\u0080\u02c4\u0003\u0002\u0002\u0002\u0082\u02c8",
    "\u0003\u0002\u0002\u0002\u0084\u02ce\u0003\u0002\u0002\u0002\u0086\u031d",
    "\u0003\u0002\u0002\u0002\u0088\u031f\u0003\u0002\u0002\u0002\u008a\u0322",
    "\u0003\u0002\u0002\u0002\u008c\u0324\u0003\u0002\u0002\u0002\u008e\u032f",
    "\u0003\u0002\u0002\u0002\u0090\u0337\u0003\u0002\u0002\u0002\u0092\u033f",
    "\u0003\u0002\u0002\u0002\u0094\u0341\u0003\u0002\u0002\u0002\u0096\u0343",
    "\u0003\u0002\u0002\u0002\u0098\u0349\u0003\u0002\u0002\u0002\u009a\u034d",
    "\u0003\u0002\u0002\u0002\u009c\u0355\u0003\u0002\u0002\u0002\u009e\u035d",
    "\u0003\u0002\u0002\u0002\u00a0\u0361\u0003\u0002\u0002\u0002\u00a2\u0365",
    "\u0003\u0002\u0002\u0002\u00a4\u036e\u0003\u0002\u0002\u0002\u00a6\u0379",
    "\u0003\u0002\u0002\u0002\u00a8\u0380\u0003\u0002\u0002\u0002\u00aa\u0382",
    "\u0003\u0002\u0002\u0002\u00ac\u038a\u0003\u0002\u0002\u0002\u00ae\u038c",
    "\u0003\u0002\u0002\u0002\u00b0\u038f\u0003\u0002\u0002\u0002\u00b2\u03aa",
    "\u0003\u0002\u0002\u0002\u00b4\u03ac\u0003\u0002\u0002\u0002\u00b6\u03b2",
    "\u0003\u0002\u0002\u0002\u00b8\u03b4\u0003\u0002\u0002\u0002\u00ba\u03b6",
    "\u0003\u0002\u0002\u0002\u00bc\u03ba\u0003\u0002\u0002\u0002\u00be\u00c0",
    "\u0005P)\u0002\u00bf\u00be\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003",
    "\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007",
    "\u0002\u0002\u0003\u00c2\u0003\u0003\u0002\u0002\u0002\u00c3\u00c8\u0007",
    "\u000e\u0002\u0002\u00c4\u00c8\u0006\u0003\u0002\u0002\u00c5\u00c8\u0006",
    "\u0003\u0003\u0002\u00c6\u00c8\u0006\u0003\u0004\u0002\u00c7\u00c3\u0003",
    "\u0002\u0002\u0002\u00c7\u00c4\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003",
    "\u0002\u0002\u0002\u00c7\u00c6\u0003\u0002\u0002\u0002\u00c8\u0005\u0003",
    "\u0002\u0002\u0002\u00c9\u00ce\u0005:\u001e\u0002\u00ca\u00cb\u0007",
    "\u000f\u0002\u0002\u00cb\u00cd\u0005:\u001e\u0002\u00cc\u00ca\u0003",
    "\u0002\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce\u00cc\u0003",
    "\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf\u0007\u0003",
    "\u0002\u0002\u0002\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d1\u00d6\u0005",
    "<\u001f\u0002\u00d2\u00d3\u0007\u000f\u0002\u0002\u00d3\u00d5\u0005",
    "<\u001f\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003",
    "\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003",
    "\u0002\u0002\u0002\u00d7\t\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003",
    "\u0002\u0002\u0002\u00d9\u00de\u0005\u000e\b\u0002\u00da\u00de\u0007",
    "`\u0002\u0002\u00db\u00dc\u0007?\u0002\u0002\u00dc\u00de\u0007\u001a",
    "\u0002\u0002\u00dd\u00d9\u0003\u0002\u0002\u0002\u00dd\u00da\u0003\u0002",
    "\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u000b\u0003\u0002",
    "\u0002\u0002\u00df\u00e3\u0005\u000e\b\u0002\u00e0\u00e3\u0007`\u0002",
    "\u0002\u00e1\u00e3\u0007?\u0002\u0002\u00e2\u00df\u0003\u0002\u0002",
    "\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e1\u0003\u0002\u0002",
    "\u0002\u00e3\r\u0003\u0002\u0002\u0002\u00e4\u00e5\u0007k\u0002\u0002",
    "\u00e5\u000f\u0003\u0002\u0002\u0002\u00e6\u00ef\u0007X\u0002\u0002",
    "\u00e7\u00ef\u0005\n\u0006\u0002\u00e8\u00ef\u0005\u0012\n\u0002\u00e9",
    "\u00ef\u0005\u0018\r\u0002\u00ea\u00ef\u0005 \u0011\u0002\u00eb\u00ef",
    "\u0005\u00a4S\u0002\u00ec\u00ef\u0007\u0006\u0002\u0002\u00ed\u00ef",
    "\u0005\u0014\u000b\u0002\u00ee\u00e6\u0003\u0002\u0002\u0002\u00ee\u00e7",
    "\u0003\u0002\u0002\u0002\u00ee\u00e8\u0003\u0002\u0002\u0002\u00ee\u00e9",
    "\u0003\u0002\u0002\u0002\u00ee\u00ea\u0003\u0002\u0002\u0002\u00ee\u00eb",
    "\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ed",
    "\u0003\u0002\u0002\u0002\u00ef\u0011\u0003\u0002\u0002\u0002\u00f0\u00f1",
    "\t\u0002\u0002\u0002\u00f1\u0013\u0003\u0002\u0002\u0002\u00f2\u00f3",
    "\u0007\b\u0002\u0002\u00f3\u00f5\u0005\b\u0005\u0002\u00f4\u00f6\u0007",
    "\u000f\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003",
    "\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0007",
    "\t\u0002\u0002\u00f8\u00fc\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007",
    "\b\u0002\u0002\u00fa\u00fc\u0007\t\u0002\u0002\u00fb\u00f2\u0003\u0002",
    "\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002\u00fc\u0015\u0003\u0002",
    "\u0002\u0002\u00fd\u00fe\u00054\u001b\u0002\u00fe\u00ff\u0005,\u0017",
    "\u0002\u00ff\u0017\u0003\u0002\u0002\u0002\u0100\u0102\u0007\n\u0002",
    "\u0002\u0101\u0103\u0005\u001c\u000f\u0002\u0102\u0101\u0003\u0002\u0002",
    "\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002",
    "\u0002\u0104\u0112\u0007\u000b\u0002\u0002\u0105\u0106\u0007\n\u0002",
    "\u0002\u0106\u0107\u0005\u001a\u000e\u0002\u0107\u0108\u0007\u000b\u0002",
    "\u0002\u0108\u0112\u0003\u0002\u0002\u0002\u0109\u010a\u0007\n\u0002",
    "\u0002\u010a\u010b\u0005\u001a\u000e\u0002\u010b\u010d\u0007\u000f\u0002",
    "\u0002\u010c\u010e\u0005\u001c\u000f\u0002\u010d\u010c\u0003\u0002\u0002",
    "\u0002\u010d\u010e\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002",
    "\u0002\u010f\u0110\u0007\u000b\u0002\u0002\u0110\u0112\u0003\u0002\u0002",
    "\u0002\u0111\u0100\u0003\u0002\u0002\u0002\u0111\u0105\u0003\u0002\u0002",
    "\u0002\u0111\u0109\u0003\u0002\u0002\u0002\u0112\u0019\u0003\u0002\u0002",
    "\u0002\u0113\u0115\b\u000e\u0001\u0002\u0114\u0116\u0005\u001c\u000f",
    "\u0002\u0115\u0114\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002",
    "\u0002\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u011d\u0005<\u001f",
    "\u0002\u0118\u011a\u0005\u001c\u000f\u0002\u0119\u0118\u0003\u0002\u0002",
    "\u0002\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002",
    "\u0002\u011b\u011d\u0005\u001e\u0010\u0002\u011c\u0113\u0003\u0002\u0002",
    "\u0002\u011c\u0119\u0003\u0002\u0002\u0002\u011d\u012c\u0003\u0002\u0002",
    "\u0002\u011e\u011f\f\u0004\u0002\u0002\u011f\u0121\u0007\u000f\u0002",
    "\u0002\u0120\u0122\u0005\u001c\u000f\u0002\u0121\u0120\u0003\u0002\u0002",
    "\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002",
    "\u0002\u0123\u012b\u0005<\u001f\u0002\u0124\u0125\f\u0003\u0002\u0002",
    "\u0125\u0127\u0007\u000f\u0002\u0002\u0126\u0128\u0005\u001c\u000f\u0002",
    "\u0127\u0126\u0003\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002",
    "\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u012b\u0005\u001e\u0010\u0002",
    "\u012a\u011e\u0003\u0002\u0002\u0002\u012a\u0124\u0003\u0002\u0002\u0002",
    "\u012b\u012e\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002",
    "\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u001b\u0003\u0002\u0002\u0002",
    "\u012e\u012c\u0003\u0002\u0002\u0002\u012f\u0131\u0007\u000f\u0002\u0002",
    "\u0130\u012f\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002",
    "\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002",
    "\u0133\u001d\u0003\u0002\u0002\u0002\u0134\u0135\u0007\r\u0002\u0002",
    "\u0135\u0136\u0005<\u001f\u0002\u0136\u001f\u0003\u0002\u0002\u0002",
    "\u0137\u0138\u0007\u0007\u0002\u0002\u0138\u0141\u0007<\u0002\u0002",
    "\u0139\u013a\u0007\u0007\u0002\u0002\u013a\u013c\u0005\"\u0012\u0002",
    "\u013b\u013d\u0007\u000f\u0002\u0002\u013c\u013b\u0003\u0002\u0002\u0002",
    "\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0007<\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002",
    "\u0140\u0137\u0003\u0002\u0002\u0002\u0140\u0139\u0003\u0002\u0002\u0002",
    "\u0141!\u0003\u0002\u0002\u0002\u0142\u0147\u0005$\u0013\u0002\u0143",
    "\u0144\u0007\u000f\u0002\u0002\u0144\u0146\u0005$\u0013\u0002\u0145",
    "\u0143\u0003\u0002\u0002\u0002\u0146\u0149\u0003\u0002\u0002\u0002\u0147",
    "\u0145\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148",
    "#\u0003\u0002\u0002\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u014a",
    "\u0151\u0005\n\u0006\u0002\u014b\u014c\u0005&\u0014\u0002\u014c\u014d",
    "\u0007*\u0002\u0002\u014d\u014e\u0005<\u001f\u0002\u014e\u0151\u0003",
    "\u0002\u0002\u0002\u014f\u0151\u0005\u00b2Z\u0002\u0150\u014a\u0003",
    "\u0002\u0002\u0002\u0150\u014b\u0003\u0002\u0002\u0002\u0150\u014f\u0003",
    "\u0002\u0002\u0002\u0151%\u0003\u0002\u0002\u0002\u0152\u0153\u0005",
    "(\u0015\u0002\u0153\'\u0003\u0002\u0002\u0002\u0154\u0158\u0005\u00bc",
    "_\u0002\u0155\u0158\u0007g\u0002\u0002\u0156\u0158\u0007\u0005\u0002",
    "\u0002\u0157\u0154\u0003\u0002\u0002\u0002\u0157\u0155\u0003\u0002\u0002",
    "\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0158)\u0003\u0002\u0002",
    "\u0002\u0159\u015a\b\u0016\u0001\u0002\u015a\u015b\u0005\u0016\f\u0002",
    "\u015b\u0163\u0003\u0002\u0002\u0002\u015c\u015d\f\u0004\u0002\u0002",
    "\u015d\u0162\u0005,\u0017\u0002\u015e\u015f\f\u0003\u0002\u0002\u015f",
    "\u0160\u0007\f\u0002\u0002\u0160\u0162\u0005\u00bc_\u0002\u0161\u015c",
    "\u0003\u0002\u0002\u0002\u0161\u015e\u0003\u0002\u0002\u0002\u0162\u0165",
    "\u0003\u0002\u0002\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0003\u0002\u0002\u0002\u0164+\u0003\u0002\u0002\u0002\u0165\u0163",
    "\u0003\u0002\u0002\u0002\u0166\u0167\u0007\b\u0002\u0002\u0167\u0170",
    "\u0007\t\u0002\u0002\u0168\u0169\u0007\b\u0002\u0002\u0169\u016b\u0005",
    ".\u0018\u0002\u016a\u016c\u0007\u000f\u0002\u0002\u016b\u016a\u0003",
    "\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u016d\u0003",
    "\u0002\u0002\u0002\u016d\u016e\u0007\t\u0002\u0002\u016e\u0170\u0003",
    "\u0002\u0002\u0002\u016f\u0166\u0003\u0002\u0002\u0002\u016f\u0168\u0003",
    "\u0002\u0002\u0002\u0170-\u0003\u0002\u0002\u0002\u0171\u0173\u0007",
    "\r\u0002\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0172\u0173\u0003",
    "\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u017c\u0005",
    "<\u001f\u0002\u0175\u0177\u0007\u000f\u0002\u0002\u0176\u0178\u0007",
    "\r\u0002\u0002\u0177\u0176\u0003\u0002\u0002\u0002\u0177\u0178\u0003",
    "\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017b\u0005",
    "<\u001f\u0002\u017a\u0175\u0003\u0002\u0002\u0002\u017b\u017e\u0003",
    "\u0002\u0002\u0002\u017c\u017a\u0003\u0002\u0002\u0002\u017c\u017d\u0003",
    "\u0002\u0002\u0002\u017d/\u0003\u0002\u0002\u0002\u017e\u017c\u0003",
    "\u0002\u0002\u0002\u017f\u0182\u0005*\u0016\u0002\u0180\u0182\u0005",
    "2\u001a\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0180\u0003",
    "\u0002\u0002\u0002\u01821\u0003\u0002\u0002\u0002\u0183\u0187\u0005",
    "4\u001b\u0002\u0184\u0185\u0007T\u0002\u0002\u0185\u0187\u00052\u001a",
    "\u0002\u0186\u0183\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002\u0002",
    "\u0002\u01873\u0003\u0002\u0002\u0002\u0188\u0189\b\u001b\u0001\u0002",
    "\u0189\u018f\u0005\u0010\t\u0002\u018a\u018b\u0007T\u0002\u0002\u018b",
    "\u018c\u00054\u001b\u0002\u018c\u018d\u0005,\u0017\u0002\u018d\u018f",
    "\u0003\u0002\u0002\u0002\u018e\u0188\u0003\u0002\u0002\u0002\u018e\u018a",
    "\u0003\u0002\u0002\u0002\u018f\u019a\u0003\u0002\u0002\u0002\u0190\u0191",
    "\f\u0005\u0002\u0002\u0191\u0192\u0007\n\u0002\u0002\u0192\u0193\u0005",
    "\b\u0005\u0002\u0193\u0194\u0007\u000b\u0002\u0002\u0194\u0199\u0003",
    "\u0002\u0002\u0002\u0195\u0196\f\u0004\u0002\u0002\u0196\u0197\u0007",
    "\f\u0002\u0002\u0197\u0199\u0005\u00bc_\u0002\u0198\u0190\u0003\u0002",
    "\u0002\u0002\u0198\u0195\u0003\u0002\u0002\u0002\u0199\u019c\u0003\u0002",
    "\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002",
    "\u0002\u0002\u019b5\u0003\u0002\u0002\u0002\u019c\u019a\u0003\u0002",
    "\u0002\u0002\u019d\u019e\u0007+\u0002\u0002\u019e\u019f\u0005:\u001e",
    "\u0002\u019f7\u0003\u0002\u0002\u0002\u01a0\u01a1\u0007+\u0002\u0002",
    "\u01a1\u01a2\u0005<\u001f\u0002\u01a29\u0003\u0002\u0002\u0002\u01a3",
    "\u01a4\b\u001e\u0001\u0002\u01a4\u01a5\u0005> \u0002\u01a5\u01a6\u0005",
    ":\u001e\u0013\u01a6\u01b1\u0003\u0002\u0002\u0002\u01a7\u01a8\u0005",
    "0\u0019\u0002\u01a8\u01a9\u0007+\u0002\u0002\u01a9\u01aa\u0005:\u001e",
    "\u0005\u01aa\u01b1\u0003\u0002\u0002\u0002\u01ab\u01ac\u00050\u0019",
    "\u0002\u01ac\u01ad\u0005J&\u0002\u01ad\u01ae\u0005:\u001e\u0004\u01ae",
    "\u01b1\u0003\u0002\u0002\u0002\u01af\u01b1\u00050\u0019\u0002\u01b0",
    "\u01a3\u0003\u0002\u0002\u0002\u01b0\u01a7\u0003\u0002\u0002\u0002\u01b0",
    "\u01ab\u0003\u0002\u0002\u0002\u01b0\u01af\u0003\u0002\u0002\u0002\u01b1",
    "\u01e5\u0003\u0002\u0002\u0002\u01b2\u01b3\f\u0012\u0002\u0002\u01b3",
    "\u01b4\u0007\u001c\u0002\u0002\u01b4\u01e4\u0005:\u001e\u0013\u01b5",
    "\u01b6\f\u0011\u0002\u0002\u01b6\u01b7\u0005@!\u0002\u01b7\u01b8\u0005",
    ":\u001e\u0012\u01b8\u01e4\u0003\u0002\u0002\u0002\u01b9\u01ba\f\u0010",
    "\u0002\u0002\u01ba\u01bb\u0005B\"\u0002\u01bb\u01bc\u0005:\u001e\u0011",
    "\u01bc\u01e4\u0003\u0002\u0002\u0002\u01bd\u01be\f\u000f\u0002\u0002",
    "\u01be\u01bf\u0005D#\u0002\u01bf\u01c0\u0005:\u001e\u0010\u01c0\u01e4",
    "\u0003\u0002\u0002\u0002\u01c1\u01c2\f\u000e\u0002\u0002\u01c2\u01c3",
    "\u0005F$\u0002\u01c3\u01c4\u0005:\u001e\u000f\u01c4\u01e4\u0003\u0002",
    "\u0002\u0002\u01c5\u01c6\f\r\u0002\u0002\u01c6\u01c7\u0007S\u0002\u0002",
    "\u01c7\u01e4\u0005:\u001e\u000e\u01c8\u01c9\f\f\u0002\u0002\u01c9\u01ca",
    "\u0005H%\u0002\u01ca\u01cb\u0005:\u001e\r\u01cb\u01e4\u0003\u0002\u0002",
    "\u0002\u01cc\u01cd\f\u000b\u0002\u0002\u01cd\u01ce\u0007\"\u0002\u0002",
    "\u01ce\u01e4\u0005:\u001e\f\u01cf\u01d0\f\n\u0002\u0002\u01d0\u01d1",
    "\u0007$\u0002\u0002\u01d1\u01e4\u0005:\u001e\u000b\u01d2\u01d3\f\t\u0002",
    "\u0002\u01d3\u01d4\u0007#\u0002\u0002\u01d4\u01e4\u0005:\u001e\n\u01d5",
    "\u01d6\f\b\u0002\u0002\u01d6\u01d7\u0007\'\u0002\u0002\u01d7\u01e4\u0005",
    ":\u001e\t\u01d8\u01d9\f\u0007\u0002\u0002\u01d9\u01da\u0007(\u0002\u0002",
    "\u01da\u01e4\u0005:\u001e\b\u01db\u01dc\f\u0006\u0002\u0002\u01dc\u01dd",
    "\u0007)\u0002\u0002\u01dd\u01de\u0005:\u001e\u0002\u01de\u01df\u0007",
    "*\u0002\u0002\u01df\u01e0\u0005:\u001e\u0007\u01e0\u01e4\u0003\u0002",
    "\u0002\u0002\u01e1\u01e2\f\u0014\u0002\u0002\u01e2\u01e4\t\u0003\u0002",
    "\u0002\u01e3\u01b2\u0003\u0002\u0002\u0002\u01e3\u01b5\u0003\u0002\u0002",
    "\u0002\u01e3\u01b9\u0003\u0002\u0002\u0002\u01e3\u01bd\u0003\u0002\u0002",
    "\u0002\u01e3\u01c1\u0003\u0002\u0002\u0002\u01e3\u01c5\u0003\u0002\u0002",
    "\u0002\u01e3\u01c8\u0003\u0002\u0002\u0002\u01e3\u01cc\u0003\u0002\u0002",
    "\u0002\u01e3\u01cf\u0003\u0002\u0002\u0002\u01e3\u01d2\u0003\u0002\u0002",
    "\u0002\u01e3\u01d5\u0003\u0002\u0002\u0002\u01e3\u01d8\u0003\u0002\u0002",
    "\u0002\u01e3\u01db\u0003\u0002\u0002\u0002\u01e3\u01e1\u0003\u0002\u0002",
    "\u0002\u01e4\u01e7\u0003\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002",
    "\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6;\u0003\u0002\u0002",
    "\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e8\u01e9\b\u001f\u0001",
    "\u0002\u01e9\u01ea\u0005> \u0002\u01ea\u01eb\u0005<\u001f\u0014\u01eb",
    "\u01f6\u0003\u0002\u0002\u0002\u01ec\u01ed\u00050\u0019\u0002\u01ed",
    "\u01ee\u0007+\u0002\u0002\u01ee\u01ef\u0005<\u001f\u0005\u01ef\u01f6",
    "\u0003\u0002\u0002\u0002\u01f0\u01f1\u00050\u0019\u0002\u01f1\u01f2",
    "\u0005J&\u0002\u01f2\u01f3\u0005<\u001f\u0004\u01f3\u01f6\u0003\u0002",
    "\u0002\u0002\u01f4\u01f6\u00050\u0019\u0002\u01f5\u01e8\u0003\u0002",
    "\u0002\u0002\u01f5\u01ec\u0003\u0002\u0002\u0002\u01f5\u01f0\u0003\u0002",
    "\u0002\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f6\u022d\u0003\u0002",
    "\u0002\u0002\u01f7\u01f8\f\u0013\u0002\u0002\u01f8\u01f9\u0007\u001c",
    "\u0002\u0002\u01f9\u022c\u0005<\u001f\u0014\u01fa\u01fb\f\u0012\u0002",
    "\u0002\u01fb\u01fc\u0005@!\u0002\u01fc\u01fd\u0005<\u001f\u0013\u01fd",
    "\u022c\u0003\u0002\u0002\u0002\u01fe\u01ff\f\u0011\u0002\u0002\u01ff",
    "\u0200\u0005B\"\u0002\u0200\u0201\u0005<\u001f\u0012\u0201\u022c\u0003",
    "\u0002\u0002\u0002\u0202\u0203\f\u0010\u0002\u0002\u0203\u0204\u0005",
    "D#\u0002\u0204\u0205\u0005<\u001f\u0011\u0205\u022c\u0003\u0002\u0002",
    "\u0002\u0206\u0207\f\u000f\u0002\u0002\u0207\u0208\u0005F$\u0002\u0208",
    "\u0209\u0005<\u001f\u0010\u0209\u022c\u0003\u0002\u0002\u0002\u020a",
    "\u020b\f\u000e\u0002\u0002\u020b\u020c\u0007R\u0002\u0002\u020c\u022c",
    "\u0005<\u001f\u000f\u020d\u020e\f\r\u0002\u0002\u020e\u020f\u0007S\u0002",
    "\u0002\u020f\u022c\u0005<\u001f\u000e\u0210\u0211\f\f\u0002\u0002\u0211",
    "\u0212\u0005H%\u0002\u0212\u0213\u0005<\u001f\r\u0213\u022c\u0003\u0002",
    "\u0002\u0002\u0214\u0215\f\u000b\u0002\u0002\u0215\u0216\u0007\"\u0002",
    "\u0002\u0216\u022c\u0005<\u001f\f\u0217\u0218\f\n\u0002\u0002\u0218",
    "\u0219\u0007$\u0002\u0002\u0219\u022c\u0005<\u001f\u000b\u021a\u021b",
    "\f\t\u0002\u0002\u021b\u021c\u0007#\u0002\u0002\u021c\u022c\u0005<\u001f",
    "\n\u021d\u021e\f\b\u0002\u0002\u021e\u021f\u0007\'\u0002\u0002\u021f",
    "\u022c\u0005<\u001f\t\u0220\u0221\f\u0007\u0002\u0002\u0221\u0222\u0007",
    "(\u0002\u0002\u0222\u022c\u0005<\u001f\b\u0223\u0224\f\u0006\u0002\u0002",
    "\u0224\u0225\u0007)\u0002\u0002\u0225\u0226\u0005<\u001f\u0002\u0226",
    "\u0227\u0007*\u0002\u0002\u0227\u0228\u0005<\u001f\u0007\u0228\u022c",
    "\u0003\u0002\u0002\u0002\u0229\u022a\f\u0015\u0002\u0002\u022a\u022c",
    "\t\u0003\u0002\u0002\u022b\u01f7\u0003\u0002\u0002\u0002\u022b\u01fa",
    "\u0003\u0002\u0002\u0002\u022b\u01fe\u0003\u0002\u0002\u0002\u022b\u0202",
    "\u0003\u0002\u0002\u0002\u022b\u0206\u0003\u0002\u0002\u0002\u022b\u020a",
    "\u0003\u0002\u0002\u0002\u022b\u020d\u0003\u0002\u0002\u0002\u022b\u0210",
    "\u0003\u0002\u0002\u0002\u022b\u0214\u0003\u0002\u0002\u0002\u022b\u0217",
    "\u0003\u0002\u0002\u0002\u022b\u021a\u0003\u0002\u0002\u0002\u022b\u021d",
    "\u0003\u0002\u0002\u0002\u022b\u0220\u0003\u0002\u0002\u0002\u022b\u0223",
    "\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022c\u022f",
    "\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u0003\u0002\u0002\u0002\u022e=\u0003\u0002\u0002\u0002\u022f\u022d",
    "\u0003\u0002\u0002\u0002\u0230\u0231\t\u0004\u0002\u0002\u0231?\u0003",
    "\u0002\u0002\u0002\u0232\u0233\t\u0005\u0002\u0002\u0233A\u0003\u0002",
    "\u0002\u0002\u0234\u0235\t\u0006\u0002\u0002\u0235C\u0003\u0002\u0002",
    "\u0002\u0236\u0237\t\u0007\u0002\u0002\u0237E\u0003\u0002\u0002\u0002",
    "\u0238\u0239\t\b\u0002\u0002\u0239G\u0003\u0002\u0002\u0002\u023a\u023b",
    "\t\t\u0002\u0002\u023bI\u0003\u0002\u0002\u0002\u023c\u023d\t\n\u0002",
    "\u0002\u023dK\u0003\u0002\u0002\u0002\u023e\u0249\u0005\u0094K\u0002",
    "\u023f\u0249\u0005\u0098M\u0002\u0240\u0249\u0005X-\u0002\u0241\u0249",
    "\u0005\\/\u0002\u0242\u0249\u0005\u008cG\u0002\u0243\u0249\u0005\u008e",
    "H\u0002\u0244\u0249\u0005\u0090I\u0002\u0245\u0249\u0005\u0092J\u0002",
    "\u0246\u0249\u0005t;\u0002\u0247\u0249\u0005v<\u0002\u0248\u023e\u0003",
    "\u0002\u0002\u0002\u0248\u023f\u0003\u0002\u0002\u0002\u0248\u0240\u0003",
    "\u0002\u0002\u0002\u0248\u0241\u0003\u0002\u0002\u0002\u0248\u0242\u0003",
    "\u0002\u0002\u0002\u0248\u0243\u0003\u0002\u0002\u0002\u0248\u0244\u0003",
    "\u0002\u0002\u0002\u0248\u0245\u0003\u0002\u0002\u0002\u0248\u0246\u0003",
    "\u0002\u0002\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0249M\u0003",
    "\u0002\u0002\u0002\u024a\u024d\u0005\\/\u0002\u024b\u024d\u0005Z.\u0002",
    "\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024b\u0003\u0002\u0002\u0002",
    "\u024dO\u0003\u0002\u0002\u0002\u024e\u0250\u0005T+\u0002\u024f\u024e",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u024f",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252Q",
    "\u0003\u0002\u0002\u0002\u0253\u0255\u0005V,\u0002\u0254\u0253\u0003",
    "\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0254\u0003",
    "\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257S\u0003",
    "\u0002\u0002\u0002\u0258\u025b\u0005L\'\u0002\u0259\u025b\u0005p9\u0002",
    "\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u0259\u0003\u0002\u0002\u0002",
    "\u025bU\u0003\u0002\u0002\u0002\u025c\u025f\u0005N(\u0002\u025d\u025f",
    "\u0005p9\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025d\u0003",
    "\u0002\u0002\u0002\u025fW\u0003\u0002\u0002\u0002\u0260\u0261\u0007",
    "\u000e\u0002\u0002\u0261Y\u0003\u0002\u0002\u0002\u0262\u0264\u0007",
    "U\u0002\u0002\u0263\u0265\u0005\b\u0005\u0002\u0264\u0263\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002",
    "\u0002\u0002\u0266\u0267\u0005\u0004\u0003\u0002\u0267[\u0003\u0002",
    "\u0002\u0002\u0268\u0269\u0005\b\u0005\u0002\u0269\u026a\u0005\u0004",
    "\u0003\u0002\u026a]\u0003\u0002\u0002\u0002\u026b\u026c\u0005`1\u0002",
    "\u026c_\u0003\u0002\u0002\u0002\u026d\u026f\u0005\f\u0007\u0002\u026e",
    "\u0270\u00058\u001d\u0002\u026f\u026e\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270a\u0003\u0002\u0002\u0002\u0271",
    "\u0272\u0005f4\u0002\u0272\u0273\u0005h5\u0002\u0273\u0274\u0007\u000e",
    "\u0002\u0002\u0274c\u0003\u0002\u0002\u0002\u0275\u0276\u0005f4\u0002",
    "\u0276\u0277\u0005j6\u0002\u0277\u0278\u0007\u000e\u0002\u0002\u0278",
    "e\u0003\u0002\u0002\u0002\u0279\u027a\t\u000b\u0002\u0002\u027ag\u0003",
    "\u0002\u0002\u0002\u027b\u0280\u0005l7\u0002\u027c\u027d\u0007\u000f",
    "\u0002\u0002\u027d\u027f\u0005l7\u0002\u027e\u027c\u0003\u0002\u0002",
    "\u0002\u027f\u0282\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002",
    "\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281i\u0003\u0002\u0002",
    "\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0283\u0288\u0005n8\u0002",
    "\u0284\u0285\u0007\u000f\u0002\u0002\u0285\u0287\u0005n8\u0002\u0286",
    "\u0284\u0003\u0002\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002\u0288",
    "\u0286\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289",
    "k\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028b",
    "\u028d\u0005\f\u0007\u0002\u028c\u028e\u00056\u001c\u0002\u028d\u028c",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028em",
    "\u0003\u0002\u0002\u0002\u028f\u0291\u0005\f\u0007\u0002\u0290\u0292",
    "\u00058\u001d\u0002\u0291\u0290\u0003\u0002\u0002\u0002\u0291\u0292",
    "\u0003\u0002\u0002\u0002\u0292o\u0003\u0002\u0002\u0002\u0293\u0296",
    "\u0005r:\u0002\u0294\u0296\u0005d3\u0002\u0295\u0293\u0003\u0002\u0002",
    "\u0002\u0295\u0294\u0003\u0002\u0002\u0002\u0296q\u0003\u0002\u0002",
    "\u0002\u0297\u0298\u0005\u00a2R\u0002\u0298s\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0007_\u0002\u0002\u029a\u029b\u0007\b\u0002\u0002\u029b",
    "\u029c\u0005\b\u0005\u0002\u029c\u029d\u0007\t\u0002\u0002\u029d\u029e",
    "\u0005L\'\u0002\u029eu\u0003\u0002\u0002\u0002\u029f\u02a0\u0005z>\u0002",
    "\u02a0\u02a1\u0007*\u0002\u0002\u02a1\u02a2\u0005x=\u0002\u02a2w\u0003",
    "\u0002\u0002\u0002\u02a3\u02a6\u0005L\'\u0002\u02a4\u02a6\u0005\u00a2",
    "R\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a4\u0003\u0002",
    "\u0002\u0002\u02a6y\u0003\u0002\u0002\u0002\u02a7\u02ab\u0005\u000e",
    "\b\u0002\u02a8\u02ab\u0007`\u0002\u0002\u02a9\u02ab\u0007?\u0002\u0002",
    "\u02aa\u02a7\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002",
    "\u02aa\u02a9\u0003\u0002\u0002\u0002\u02ab{\u0003\u0002\u0002\u0002",
    "\u02ac\u02ad\u0007W\u0002\u0002\u02ad\u02ae\u0007\b\u0002\u0002\u02ae",
    "\u02af\u0005\b\u0005\u0002\u02af\u02b0\u0007\t\u0002\u0002\u02b0\u02b1",
    "\u0005~@\u0002\u02b1}\u0003\u0002\u0002\u0002\u02b2\u02b4\u0007\u0007",
    "\u0002\u0002\u02b3\u02b5\u0005\u0080A\u0002\u02b4\u02b3\u0003\u0002",
    "\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002",
    "\u0002\u0002\u02b6\u02c2\u0007<\u0002\u0002\u02b7\u02b9\u0007\u0007",
    "\u0002\u0002\u02b8\u02ba\u0005\u0080A\u0002\u02b9\u02b8\u0003\u0002",
    "\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002",
    "\u0002\u0002\u02bb\u02bd\u0005\u0084C\u0002\u02bc\u02be\u0005\u0080",
    "A\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002",
    "\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c0\u0007<",
    "\u0002\u0002\u02c0\u02c2\u0003\u0002\u0002\u0002\u02c1\u02b2\u0003\u0002",
    "\u0002\u0002\u02c1\u02b7\u0003\u0002\u0002\u0002\u02c2\u007f\u0003\u0002",
    "\u0002\u0002\u02c3\u02c5\u0005\u0082B\u0002\u02c4\u02c3\u0003\u0002",
    "\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002",
    "\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u0081\u0003\u0002",
    "\u0002\u0002\u02c8\u02c9\u0007A\u0002\u0002\u02c9\u02ca\u0005\b\u0005",
    "\u0002\u02ca\u02cc\u0007*\u0002\u0002\u02cb\u02cd\u0005P)\u0002\u02cc",
    "\u02cb\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd",
    "\u0083\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007G\u0002\u0002\u02cf",
    "\u02d1\u0007*\u0002\u0002\u02d0\u02d2\u0005P)\u0002\u02d1\u02d0\u0003",
    "\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u0085\u0003",
    "\u0002\u0002\u0002\u02d3\u02d4\u0007I\u0002\u0002\u02d4\u02d5\u0005",
    "L\'\u0002\u02d5\u02d6\u0007^\u0002\u0002\u02d6\u02d7\u0007\b\u0002\u0002",
    "\u02d7\u02d8\u0005\b\u0005\u0002\u02d8\u02d9\u0007\t\u0002\u0002\u02d9",
    "\u02da\u0005\u0004\u0003\u0002\u02da\u031e\u0003\u0002\u0002\u0002\u02db",
    "\u02dc\u0007^\u0002\u0002\u02dc\u02dd\u0007\b\u0002\u0002\u02dd\u02de",
    "\u0005\b\u0005\u0002\u02de\u02df\u0007\t\u0002\u0002\u02df\u02e0\u0005",
    "L\'\u0002\u02e0\u031e\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007N\u0002",
    "\u0002\u02e2\u02e4\u0007\b\u0002\u0002\u02e3\u02e5\u0005\u0006\u0004",
    "\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002",
    "\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e8\u0007\u000e\u0002",
    "\u0002\u02e7\u02e9\u0005\b\u0005\u0002\u02e8\u02e7\u0003\u0002\u0002",
    "\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002",
    "\u0002\u02ea\u02ec\u0007\u000e\u0002\u0002\u02eb\u02ed\u0005\b\u0005",
    "\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002",
    "\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007\t\u0002",
    "\u0002\u02ef\u031e\u0005L\'\u0002\u02f0\u02f1\u0007N\u0002\u0002\u02f1",
    "\u02f2\u0007\b\u0002\u0002\u02f2\u02f3\u0007\\\u0002\u0002\u02f3\u02f4",
    "\u0005\u009aN\u0002\u02f4\u02f6\u0007\u000e\u0002\u0002\u02f5\u02f7",
    "\u0005\b\u0005\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02fa",
    "\u0007\u000e\u0002\u0002\u02f9\u02fb\u0005\b\u0005\u0002\u02fa\u02f9",
    "\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02fc",
    "\u0003\u0002\u0002\u0002\u02fc\u02fd\u0007\t\u0002\u0002\u02fd\u02fe",
    "\u0005L\'\u0002\u02fe\u031e\u0003\u0002\u0002\u0002\u02ff\u0300\u0007",
    "N\u0002\u0002\u0300\u0301\u0007\b\u0002\u0002\u0301\u0303\u0005b2\u0002",
    "\u0302\u0304\u0005\b\u0005\u0002\u0303\u0302\u0003\u0002\u0002\u0002",
    "\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002",
    "\u0305\u0307\u0007\u000e\u0002\u0002\u0306\u0308\u0005\b\u0005\u0002",
    "\u0307\u0306\u0003\u0002\u0002\u0002\u0307\u0308\u0003\u0002\u0002\u0002",
    "\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a\u0007\t\u0002\u0002",
    "\u030a\u030b\u0005L\'\u0002\u030b\u031e\u0003\u0002\u0002\u0002\u030c",
    "\u030d\u0007N\u0002\u0002\u030d\u030e\u0007\b\u0002\u0002\u030e\u030f",
    "\u00050\u0019\u0002\u030f\u0310\u0007R\u0002\u0002\u0310\u0311\u0005",
    "\b\u0005\u0002\u0311\u0312\u0007\t\u0002\u0002\u0312\u0313\u0005L\'",
    "\u0002\u0313\u031e\u0003\u0002\u0002\u0002\u0314\u0315\u0007N\u0002",
    "\u0002\u0315\u0316\u0007\b\u0002\u0002\u0316\u0317\u0007\\\u0002\u0002",
    "\u0317\u0318\u0005\u008aF\u0002\u0318\u0319\u0007R\u0002\u0002\u0319",
    "\u031a\u0005\b\u0005\u0002\u031a\u031b\u0007\t\u0002\u0002\u031b\u031c",
    "\u0005L\'\u0002\u031c\u031e\u0003\u0002\u0002\u0002\u031d\u02d3\u0003",
    "\u0002\u0002\u0002\u031d\u02db\u0003\u0002\u0002\u0002\u031d\u02e1\u0003",
    "\u0002\u0002\u0002\u031d\u02f0\u0003\u0002\u0002\u0002\u031d\u02ff\u0003",
    "\u0002\u0002\u0002\u031d\u030c\u0003\u0002\u0002\u0002\u031d\u0314\u0003",
    "\u0002\u0002\u0002\u031e\u0087\u0003\u0002\u0002\u0002\u031f\u0320\u0005",
    "f4\u0002\u0320\u0321\u0005\u008aF\u0002\u0321\u0089\u0003\u0002\u0002",
    "\u0002\u0322\u0323\u0005\f\u0007\u0002\u0323\u008b\u0003\u0002\u0002",
    "\u0002\u0324\u0325\u0007P\u0002\u0002\u0325\u0326\u0007\b\u0002\u0002",
    "\u0326\u0327\u0005\b\u0005\u0002\u0327\u0328\u0007\t\u0002\u0002\u0328",
    "\u032b\u0005L\'\u0002\u0329\u032a\u0007J\u0002\u0002\u032a\u032c\u0005",
    "L\'\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002",
    "\u0002\u0002\u032c\u008d\u0003\u0002\u0002\u0002\u032d\u0330\u0005\u0086",
    "D\u0002\u032e\u0330\u0005|?\u0002\u032f\u032d\u0003\u0002\u0002\u0002",
    "\u032f\u032e\u0003\u0002\u0002\u0002\u0330\u008f\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0007E\u0002\u0002\u0332\u0333\u0005z>\u0002\u0333\u0334",
    "\u0005\u0004\u0003\u0002\u0334\u0338\u0003\u0002\u0002\u0002\u0335\u0336",
    "\u0007E\u0002\u0002\u0336\u0338\u0005\u0004\u0003\u0002\u0337\u0331",
    "\u0003\u0002\u0002\u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0338\u0091",
    "\u0003\u0002\u0002\u0002\u0339\u033a\u0007@\u0002\u0002\u033a\u033b",
    "\u0005z>\u0002\u033b\u033c\u0005\u0004\u0003\u0002\u033c\u0340\u0003",
    "\u0002\u0002\u0002\u033d\u033e\u0007@\u0002\u0002\u033e\u0340\u0005",
    "\u0004\u0003\u0002\u033f\u0339\u0003\u0002\u0002\u0002\u033f\u033d\u0003",
    "\u0002\u0002\u0002\u0340\u0093\u0003\u0002\u0002\u0002\u0341\u0342\u0005",
    "\u0096L\u0002\u0342\u0095\u0003\u0002\u0002\u0002\u0343\u0345\u0007",
    "\u0007\u0002\u0002\u0344\u0346\u0005P)\u0002\u0345\u0344\u0003\u0002",
    "\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002",
    "\u0002\u0002\u0347\u0348\u0007<\u0002\u0002\u0348\u0097\u0003\u0002",
    "\u0002\u0002\u0349\u034a\u0007\\\u0002\u0002\u034a\u034b\u0005\u009c",
    "O\u0002\u034b\u034c\u0005\u0004\u0003\u0002\u034c\u0099\u0003\u0002",
    "\u0002\u0002\u034d\u0352\u0005\u009eP\u0002\u034e\u034f\u0007\u000f",
    "\u0002\u0002\u034f\u0351\u0005\u009eP\u0002\u0350\u034e\u0003\u0002",
    "\u0002\u0002\u0351\u0354\u0003\u0002\u0002\u0002\u0352\u0350\u0003\u0002",
    "\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u009b\u0003\u0002",
    "\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0355\u035a\u0005\u00a0",
    "Q\u0002\u0356\u0357\u0007\u000f\u0002\u0002\u0357\u0359\u0005\u00a0",
    "Q\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0359\u035c\u0003\u0002",
    "\u0002\u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002",
    "\u0002\u0002\u035b\u009d\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002",
    "\u0002\u0002\u035d\u035f\u0005\f\u0007\u0002\u035e\u0360\u00056\u001c",
    "\u0002\u035f\u035e\u0003\u0002\u0002\u0002\u035f\u0360\u0003\u0002\u0002",
    "\u0002\u0360\u009f\u0003\u0002\u0002\u0002\u0361\u0363\u0005\f\u0007",
    "\u0002\u0362\u0364\u00058\u001d\u0002\u0363\u0362\u0003\u0002\u0002",
    "\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u00a1\u0003\u0002\u0002",
    "\u0002\u0365\u0366\u0007O\u0002\u0002\u0366\u0367\u0005\f\u0007\u0002",
    "\u0367\u0368\u0007\b\u0002\u0002\u0368\u0369\u0005\u00a8U\u0002\u0369",
    "\u036a\u0007\t\u0002\u0002\u036a\u036b\u0007\u0007\u0002\u0002\u036b",
    "\u036c\u0005\u00aeX\u0002\u036c\u036d\u0007<\u0002\u0002\u036d\u00a3",
    "\u0003\u0002\u0002\u0002\u036e\u0370\u0007O\u0002\u0002\u036f\u0371",
    "\u0005\f\u0007\u0002\u0370\u036f\u0003\u0002\u0002\u0002\u0370\u0371",
    "\u0003\u0002\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0373",
    "\u0007\b\u0002\u0002\u0373\u0374\u0005\u00a8U\u0002\u0374\u0375\u0007",
    "\t\u0002\u0002\u0375\u0376\u0007\u0007\u0002\u0002\u0376\u0377\u0005",
    "\u00aeX\u0002\u0377\u0378\u0007<\u0002\u0002\u0378\u00a5\u0003\u0002",
    "\u0002\u0002\u0379\u037a\u0005\u00a8U\u0002\u037a\u00a7\u0003\u0002",
    "\u0002\u0002\u037b\u0381\u0003\u0002\u0002\u0002\u037c\u037e\u0005\u00aa",
    "V\u0002\u037d\u037f\u0007\u000f\u0002\u0002\u037e\u037d\u0003\u0002",
    "\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0381\u0003\u0002",
    "\u0002\u0002\u0380\u037b\u0003\u0002\u0002\u0002\u0380\u037c\u0003\u0002",
    "\u0002\u0002\u0381\u00a9\u0003\u0002\u0002\u0002\u0382\u0387\u0005\u00ac",
    "W\u0002\u0383\u0384\u0007\u000f\u0002\u0002\u0384\u0386\u0005\u00ac",
    "W\u0002\u0385\u0383\u0003\u0002\u0002\u0002\u0386\u0389\u0003\u0002",
    "\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002",
    "\u0002\u0002\u0388\u00ab\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002",
    "\u0002\u0002\u038a\u038b\u0005^0\u0002\u038b\u00ad\u0003\u0002\u0002",
    "\u0002\u038c\u038d\u0005\u00b0Y\u0002\u038d\u00af\u0003\u0002\u0002",
    "\u0002\u038e\u0390\u0005R*\u0002\u038f\u038e\u0003\u0002\u0002\u0002",
    "\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u00b1\u0003\u0002\u0002\u0002",
    "\u0391\u0392\u0005&\u0014\u0002\u0392\u0393\u0007\b\u0002\u0002\u0393",
    "\u0394\u0005\u00a6T\u0002\u0394\u0395\u0007\t\u0002\u0002\u0395\u0396",
    "\u0007\u0007\u0002\u0002\u0396\u0397\u0005\u00aeX\u0002\u0397\u0398",
    "\u0007<\u0002\u0002\u0398\u03ab\u0003\u0002\u0002\u0002\u0399\u039a",
    "\u0007\u0003\u0002\u0002\u039a\u039b\u0005&\u0014\u0002\u039b\u039c",
    "\u0007\b\u0002\u0002\u039c\u039d\u0007\t\u0002\u0002\u039d\u039e\u0007",
    "\u0007\u0002\u0002\u039e\u039f\u0005\u00aeX\u0002\u039f\u03a0\u0007",
    "<\u0002\u0002\u03a0\u03ab\u0003\u0002\u0002\u0002\u03a1\u03a2\u0007",
    "\u0004\u0002\u0002\u03a2\u03a3\u0005&\u0014\u0002\u03a3\u03a4\u0007",
    "\b\u0002\u0002\u03a4\u03a5\u0005\u00b4[\u0002\u03a5\u03a6\u0007\t\u0002",
    "\u0002\u03a6\u03a7\u0007\u0007\u0002\u0002\u03a7\u03a8\u0005\u00aeX",
    "\u0002\u03a8\u03a9\u0007<\u0002\u0002\u03a9\u03ab\u0003\u0002\u0002",
    "\u0002\u03aa\u0391\u0003\u0002\u0002\u0002\u03aa\u0399\u0003\u0002\u0002",
    "\u0002\u03aa\u03a1\u0003\u0002\u0002\u0002\u03ab\u00b3\u0003\u0002\u0002",
    "\u0002\u03ac\u03ad\u0005\u00acW\u0002\u03ad\u00b5\u0003\u0002\u0002",
    "\u0002\u03ae\u03b3\u0005\u00b8]\u0002\u03af\u03b3\u0005\u00ba^\u0002",
    "\u03b0\u03b3\u0007=\u0002\u0002\u03b1\u03b3\u0007>\u0002\u0002\u03b2",
    "\u03ae\u0003\u0002\u0002\u0002\u03b2\u03af\u0003\u0002\u0002\u0002\u03b2",
    "\u03b0\u0003\u0002\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002\u03b3",
    "\u00b7\u0003\u0002\u0002\u0002\u03b4\u03b5\t\f\u0002\u0002\u03b5\u00b9",
    "\u0003\u0002\u0002\u0002\u03b6\u03b7\u0007a\u0002\u0002\u03b7\u00bb",
    "\u0003\u0002\u0002\u0002\u03b8\u03bb\u0007k\u0002\u0002\u03b9\u03bb",
    "\u0005\u00b6\\\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03ba\u03b9",
    "\u0003\u0002\u0002\u0002\u03bb\u00bd\u0003\u0002\u0002\u0002\\\u00bf",
    "\u00c7\u00ce\u00d6\u00dd\u00e2\u00ee\u00f5\u00fb\u0102\u010d\u0111\u0115",
    "\u0119\u011c\u0121\u0127\u012a\u012c\u0132\u013c\u0140\u0147\u0150\u0157",
    "\u0161\u0163\u016b\u016f\u0172\u0177\u017c\u0181\u0186\u018e\u0198\u019a",
    "\u01b0\u01e3\u01e5\u01f5\u022b\u022d\u0248\u024c\u0251\u0256\u025a\u025e",
    "\u0264\u026f\u0280\u0288\u028d\u0291\u0295\u02a5\u02aa\u02b4\u02b9\u02bd",
    "\u02c1\u02c6\u02cc\u02d1\u02e4\u02e8\u02ec\u02f6\u02fa\u0303\u0307\u031d",
    "\u032b\u032f\u0337\u033f\u0345\u0352\u035a\u035f\u0363\u0370\u037e\u0380",
    "\u0387\u038f\u03aa\u03b2\u03ba"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'get'", "'set'", null, null, "'{'", "'('", "')'", 
                     "'['", "']'", "'.'", "'...'", "';'", "','", "'<'", 
                     "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", 
                     "'+'", "'-'", "'*'", "'%'", "'**'", "'++'", "'--'", 
                     "'<<'", "'>>'", "'>>>'", "'&'", "'|'", "'^'", "'!'", 
                     "'~'", "'&&'", "'||'", "'?'", "':'", "'='", "'+='", 
                     "'-='", "'*='", "'%='", "'**='", "'<<='", "'>>='", 
                     "'>>>='", "'&='", "'|='", "'^='", "'=>'", null, "'/'", 
                     "'/='", null, "'}'", null, null, "'await'", "'break'", 
                     "'case'", "'catch'", "'class'", "'const'", "'continue'", 
                     "'debugger'", "'default'", "'delete'", "'do'", "'else'", 
                     "'export'", "'extends'", "'finally'", "'for'", "'function'", 
                     "'if'", "'import'", "'in'", "'instanceof'", "'new'", 
                     "'return'", "'super'", "'switch'", "'this'", "'throw'", 
                     "'try'", "'typeof'", "'var'", "'void'", "'while'", 
                     "'with'", "'yield'", "'enum'", "'null'", "'true'", 
                     "'false'", "'async'", "'let'" ];

var symbolicNames = [ null, null, null, "NumericLiteral", "RegularExpressionLiteral", 
                      "OpenBrace", "OpenParen", "CloseParen", "OpenBracket", 
                      "CloseBracket", "Dot", "Spread", "SemiColon", "Comma", 
                      "LessThan", "GreaterThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "Plus", "Minus", "Multiply", "Modulo", "Power", "PlusPlus", 
                      "MinusMinus", "LeftShiftArithmetic", "RightShiftArithmetic", 
                      "RightShiftLogical", "BitAnd", "BitOr", "BitXor", 
                      "Not", "BitNot", "And", "Or", "QuestionMark", "Colon", 
                      "Assign", "PlusAssign", "MinusAssign", "MultiplyAssign", 
                      "ModuloAssign", "PowerAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitOrAssign", "BitXorAssign", "FatArrow", 
                      "Punctuator", "Divide", "DivideAssign", "DivPunctuator", 
                      "CloseBrace", "NullLiteral", "BooleanLiteral", "Await", 
                      "Break", "Case", "Catch", "Class", "Const", "Continue", 
                      "Debugger", "Default", "Delete", "Do", "Else", "Export", 
                      "Extends", "Finally", "For", "Function", "If", "Import", 
                      "In", "Instanceof", "New", "Return", "Super", "Switch", 
                      "This", "Throw", "Try", "Typeof", "Var", "Void", "While", 
                      "With", "Yield", "Enum", "Null", "True", "False", 
                      "Async", "Let", "StringLiteral", "BinaryIntegerLiteral", 
                      "OctalIntegerLiteral", "HexIntegerLiteral", "IdentifierName", 
                      "MultiLineComment", "SingleLineComment", "WhiteSpace", 
                      "LineTerminator", "LineTerminatorSequence" ];

var ruleNames =  [ "file", "eos", "expression", "expression_In", "identifierReference", 
                   "bindingIdentifier", "identifier", "primaryExpression", 
                   "literal", "coverParenthesizedExpressionAndArrowParameterList", 
                   "coverCallExpressionAndAsyncArrowHead", "arrayLiteral", 
                   "elementList", "elision", "spreadElement", "objectLiteral", 
                   "propertyDefinitionList", "propertyDefinition", "propertyName", 
                   "literalPropertyName", "callExpression", "arguments", 
                   "argumentList", "leftHandSideExpression", "newExpression", 
                   "memberExpression", "initializer", "initializer_In", 
                   "assignmentExpression", "assignmentExpression_In", "unaryOperator", 
                   "multiplicativeOperator", "additiveOperator", "shiftOperator", 
                   "relationalOperator", "equalityOperator", "assignmentOperator", 
                   "statement", "statement_Return", "statementList", "statementList_Return", 
                   "statementListItem", "statementListItem_Return", "emptyStatement", 
                   "returnStatement", "expressionStatement", "bindingElement", 
                   "singleNameBinding", "lexicalDeclaration", "lexicalDeclaration_In", 
                   "letOrConst", "bindingList", "bindingList_In", "lexicalBinding", 
                   "lexicalBinding_In", "declaration", "hoistableDeclaration", 
                   "withStatement", "labelledStatement", "labelledItem", 
                   "labelIdentifier", "switchStatement", "caseBlock", "caseClauses", 
                   "caseClause", "defaultClause", "iterationStatement", 
                   "forDeclaration", "forBinding", "ifStatement", "breakableStatement", 
                   "continueStatement", "breakStatement", "blockStatement", 
                   "block", "variableStatement", "variableDeclarationList", 
                   "variableDeclarationList_In", "variableDeclaration", 
                   "variableDeclaration_In", "functionDeclaration", "functionExpression", 
                   "uniqueFormalParameters", "formalParameters", "formalParameterList", 
                   "formalParameter", "functionBody", "functionStatementList", 
                   "methodDefinition", "propertySetParameterList", "reservedWord", 
                   "keyword", "futureReservedWord", "identifierName" ];

function ECMAScriptPassParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	ECMAScriptPassParser.prototype.getHiddenToken = function () {
	  var previousTokenIndex = antlr4.Parser.prototype.getCurrentToken
	    .call(this).tokenIndex - 1;
	  var previousToken = this._input.get(previousTokenIndex);

	  return (previousToken &&
	    previousToken.channel === antlr4.Lexer.HIDDEN) ? previousToken : null;
	};

	ECMAScriptPassParser.prototype.isEndOfStatementToken = function (token) {
	  if (token === null)
	    return false;

	  var text = token.text;
	  var type = token.type;

	  return (
	    type === ECMAScriptPassParser.MultiLineComment &&
	    text.indexOf('\r') !== -1 ||
	    text.indexOf('\n') !== -1 ||
	    text.indexOf('\u2028') !== -1 ||
	    text.indexOf('\u2029') !== -1
	  ) || (type === ECMAScriptPassParser.LineTerminator);
	}

	ECMAScriptPassParser.prototype.isLineTerminatorEquivalent = function () {
	// ECMAScript® 2018 Language Specification - Section 5.1.2
	// Simple white space and single-line comments are discarded and do not appear
	// in the stream of input elements for the syntactic grammar. A MultiLineComment
	// (that is, a comment of the form /*…*/ regardless of whether it spans more
	// than one line) is likewise simply discarded if it contains no line
	// terminator; but if a MultiLineComment contains one or more line terminators,
	// then it is replaced by a single line terminator, which becomes part of the
	// stream of input elements for the syntactic grammar.
	  return this.isEndOfStatementToken(this.getHiddenToken());
	};

    return this;
}

ECMAScriptPassParser.prototype = Object.create(antlr4.Parser.prototype);
ECMAScriptPassParser.prototype.constructor = ECMAScriptPassParser;

Object.defineProperty(ECMAScriptPassParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ECMAScriptPassParser.EOF = antlr4.Token.EOF;
ECMAScriptPassParser.T__0 = 1;
ECMAScriptPassParser.T__1 = 2;
ECMAScriptPassParser.NumericLiteral = 3;
ECMAScriptPassParser.RegularExpressionLiteral = 4;
ECMAScriptPassParser.OpenBrace = 5;
ECMAScriptPassParser.OpenParen = 6;
ECMAScriptPassParser.CloseParen = 7;
ECMAScriptPassParser.OpenBracket = 8;
ECMAScriptPassParser.CloseBracket = 9;
ECMAScriptPassParser.Dot = 10;
ECMAScriptPassParser.Spread = 11;
ECMAScriptPassParser.SemiColon = 12;
ECMAScriptPassParser.Comma = 13;
ECMAScriptPassParser.LessThan = 14;
ECMAScriptPassParser.GreaterThan = 15;
ECMAScriptPassParser.LessThanEquals = 16;
ECMAScriptPassParser.GreaterThanEquals = 17;
ECMAScriptPassParser.Equals = 18;
ECMAScriptPassParser.NotEquals = 19;
ECMAScriptPassParser.IdentityEquals = 20;
ECMAScriptPassParser.IdentityNotEquals = 21;
ECMAScriptPassParser.Plus = 22;
ECMAScriptPassParser.Minus = 23;
ECMAScriptPassParser.Multiply = 24;
ECMAScriptPassParser.Modulo = 25;
ECMAScriptPassParser.Power = 26;
ECMAScriptPassParser.PlusPlus = 27;
ECMAScriptPassParser.MinusMinus = 28;
ECMAScriptPassParser.LeftShiftArithmetic = 29;
ECMAScriptPassParser.RightShiftArithmetic = 30;
ECMAScriptPassParser.RightShiftLogical = 31;
ECMAScriptPassParser.BitAnd = 32;
ECMAScriptPassParser.BitOr = 33;
ECMAScriptPassParser.BitXor = 34;
ECMAScriptPassParser.Not = 35;
ECMAScriptPassParser.BitNot = 36;
ECMAScriptPassParser.And = 37;
ECMAScriptPassParser.Or = 38;
ECMAScriptPassParser.QuestionMark = 39;
ECMAScriptPassParser.Colon = 40;
ECMAScriptPassParser.Assign = 41;
ECMAScriptPassParser.PlusAssign = 42;
ECMAScriptPassParser.MinusAssign = 43;
ECMAScriptPassParser.MultiplyAssign = 44;
ECMAScriptPassParser.ModuloAssign = 45;
ECMAScriptPassParser.PowerAssign = 46;
ECMAScriptPassParser.LeftShiftArithmeticAssign = 47;
ECMAScriptPassParser.RightShiftArithmeticAssign = 48;
ECMAScriptPassParser.RightShiftLogicalAssign = 49;
ECMAScriptPassParser.BitAndAssign = 50;
ECMAScriptPassParser.BitOrAssign = 51;
ECMAScriptPassParser.BitXorAssign = 52;
ECMAScriptPassParser.FatArrow = 53;
ECMAScriptPassParser.Punctuator = 54;
ECMAScriptPassParser.Divide = 55;
ECMAScriptPassParser.DivideAssign = 56;
ECMAScriptPassParser.DivPunctuator = 57;
ECMAScriptPassParser.CloseBrace = 58;
ECMAScriptPassParser.NullLiteral = 59;
ECMAScriptPassParser.BooleanLiteral = 60;
ECMAScriptPassParser.Await = 61;
ECMAScriptPassParser.Break = 62;
ECMAScriptPassParser.Case = 63;
ECMAScriptPassParser.Catch = 64;
ECMAScriptPassParser.Class = 65;
ECMAScriptPassParser.Const = 66;
ECMAScriptPassParser.Continue = 67;
ECMAScriptPassParser.Debugger = 68;
ECMAScriptPassParser.Default = 69;
ECMAScriptPassParser.Delete = 70;
ECMAScriptPassParser.Do = 71;
ECMAScriptPassParser.Else = 72;
ECMAScriptPassParser.Export = 73;
ECMAScriptPassParser.Extends = 74;
ECMAScriptPassParser.Finally = 75;
ECMAScriptPassParser.For = 76;
ECMAScriptPassParser.Function = 77;
ECMAScriptPassParser.If = 78;
ECMAScriptPassParser.Import = 79;
ECMAScriptPassParser.In = 80;
ECMAScriptPassParser.Instanceof = 81;
ECMAScriptPassParser.New = 82;
ECMAScriptPassParser.Return = 83;
ECMAScriptPassParser.Super = 84;
ECMAScriptPassParser.Switch = 85;
ECMAScriptPassParser.This = 86;
ECMAScriptPassParser.Throw = 87;
ECMAScriptPassParser.Try = 88;
ECMAScriptPassParser.Typeof = 89;
ECMAScriptPassParser.Var = 90;
ECMAScriptPassParser.Void = 91;
ECMAScriptPassParser.While = 92;
ECMAScriptPassParser.With = 93;
ECMAScriptPassParser.Yield = 94;
ECMAScriptPassParser.Enum = 95;
ECMAScriptPassParser.Null = 96;
ECMAScriptPassParser.True = 97;
ECMAScriptPassParser.False = 98;
ECMAScriptPassParser.Async = 99;
ECMAScriptPassParser.Let = 100;
ECMAScriptPassParser.StringLiteral = 101;
ECMAScriptPassParser.BinaryIntegerLiteral = 102;
ECMAScriptPassParser.OctalIntegerLiteral = 103;
ECMAScriptPassParser.HexIntegerLiteral = 104;
ECMAScriptPassParser.IdentifierName = 105;
ECMAScriptPassParser.MultiLineComment = 106;
ECMAScriptPassParser.SingleLineComment = 107;
ECMAScriptPassParser.WhiteSpace = 108;
ECMAScriptPassParser.LineTerminator = 109;
ECMAScriptPassParser.LineTerminatorSequence = 110;

ECMAScriptPassParser.RULE_file = 0;
ECMAScriptPassParser.RULE_eos = 1;
ECMAScriptPassParser.RULE_expression = 2;
ECMAScriptPassParser.RULE_expression_In = 3;
ECMAScriptPassParser.RULE_identifierReference = 4;
ECMAScriptPassParser.RULE_bindingIdentifier = 5;
ECMAScriptPassParser.RULE_identifier = 6;
ECMAScriptPassParser.RULE_primaryExpression = 7;
ECMAScriptPassParser.RULE_literal = 8;
ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList = 9;
ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead = 10;
ECMAScriptPassParser.RULE_arrayLiteral = 11;
ECMAScriptPassParser.RULE_elementList = 12;
ECMAScriptPassParser.RULE_elision = 13;
ECMAScriptPassParser.RULE_spreadElement = 14;
ECMAScriptPassParser.RULE_objectLiteral = 15;
ECMAScriptPassParser.RULE_propertyDefinitionList = 16;
ECMAScriptPassParser.RULE_propertyDefinition = 17;
ECMAScriptPassParser.RULE_propertyName = 18;
ECMAScriptPassParser.RULE_literalPropertyName = 19;
ECMAScriptPassParser.RULE_callExpression = 20;
ECMAScriptPassParser.RULE_arguments = 21;
ECMAScriptPassParser.RULE_argumentList = 22;
ECMAScriptPassParser.RULE_leftHandSideExpression = 23;
ECMAScriptPassParser.RULE_newExpression = 24;
ECMAScriptPassParser.RULE_memberExpression = 25;
ECMAScriptPassParser.RULE_initializer = 26;
ECMAScriptPassParser.RULE_initializer_In = 27;
ECMAScriptPassParser.RULE_assignmentExpression = 28;
ECMAScriptPassParser.RULE_assignmentExpression_In = 29;
ECMAScriptPassParser.RULE_unaryOperator = 30;
ECMAScriptPassParser.RULE_multiplicativeOperator = 31;
ECMAScriptPassParser.RULE_additiveOperator = 32;
ECMAScriptPassParser.RULE_shiftOperator = 33;
ECMAScriptPassParser.RULE_relationalOperator = 34;
ECMAScriptPassParser.RULE_equalityOperator = 35;
ECMAScriptPassParser.RULE_assignmentOperator = 36;
ECMAScriptPassParser.RULE_statement = 37;
ECMAScriptPassParser.RULE_statement_Return = 38;
ECMAScriptPassParser.RULE_statementList = 39;
ECMAScriptPassParser.RULE_statementList_Return = 40;
ECMAScriptPassParser.RULE_statementListItem = 41;
ECMAScriptPassParser.RULE_statementListItem_Return = 42;
ECMAScriptPassParser.RULE_emptyStatement = 43;
ECMAScriptPassParser.RULE_returnStatement = 44;
ECMAScriptPassParser.RULE_expressionStatement = 45;
ECMAScriptPassParser.RULE_bindingElement = 46;
ECMAScriptPassParser.RULE_singleNameBinding = 47;
ECMAScriptPassParser.RULE_lexicalDeclaration = 48;
ECMAScriptPassParser.RULE_lexicalDeclaration_In = 49;
ECMAScriptPassParser.RULE_letOrConst = 50;
ECMAScriptPassParser.RULE_bindingList = 51;
ECMAScriptPassParser.RULE_bindingList_In = 52;
ECMAScriptPassParser.RULE_lexicalBinding = 53;
ECMAScriptPassParser.RULE_lexicalBinding_In = 54;
ECMAScriptPassParser.RULE_declaration = 55;
ECMAScriptPassParser.RULE_hoistableDeclaration = 56;
ECMAScriptPassParser.RULE_withStatement = 57;
ECMAScriptPassParser.RULE_labelledStatement = 58;
ECMAScriptPassParser.RULE_labelledItem = 59;
ECMAScriptPassParser.RULE_labelIdentifier = 60;
ECMAScriptPassParser.RULE_switchStatement = 61;
ECMAScriptPassParser.RULE_caseBlock = 62;
ECMAScriptPassParser.RULE_caseClauses = 63;
ECMAScriptPassParser.RULE_caseClause = 64;
ECMAScriptPassParser.RULE_defaultClause = 65;
ECMAScriptPassParser.RULE_iterationStatement = 66;
ECMAScriptPassParser.RULE_forDeclaration = 67;
ECMAScriptPassParser.RULE_forBinding = 68;
ECMAScriptPassParser.RULE_ifStatement = 69;
ECMAScriptPassParser.RULE_breakableStatement = 70;
ECMAScriptPassParser.RULE_continueStatement = 71;
ECMAScriptPassParser.RULE_breakStatement = 72;
ECMAScriptPassParser.RULE_blockStatement = 73;
ECMAScriptPassParser.RULE_block = 74;
ECMAScriptPassParser.RULE_variableStatement = 75;
ECMAScriptPassParser.RULE_variableDeclarationList = 76;
ECMAScriptPassParser.RULE_variableDeclarationList_In = 77;
ECMAScriptPassParser.RULE_variableDeclaration = 78;
ECMAScriptPassParser.RULE_variableDeclaration_In = 79;
ECMAScriptPassParser.RULE_functionDeclaration = 80;
ECMAScriptPassParser.RULE_functionExpression = 81;
ECMAScriptPassParser.RULE_uniqueFormalParameters = 82;
ECMAScriptPassParser.RULE_formalParameters = 83;
ECMAScriptPassParser.RULE_formalParameterList = 84;
ECMAScriptPassParser.RULE_formalParameter = 85;
ECMAScriptPassParser.RULE_functionBody = 86;
ECMAScriptPassParser.RULE_functionStatementList = 87;
ECMAScriptPassParser.RULE_methodDefinition = 88;
ECMAScriptPassParser.RULE_propertySetParameterList = 89;
ECMAScriptPassParser.RULE_reservedWord = 90;
ECMAScriptPassParser.RULE_keyword = 91;
ECMAScriptPassParser.RULE_futureReservedWord = 92;
ECMAScriptPassParser.RULE_identifierName = 93;

function FileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_file;
    return this;
}

FileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileContext.prototype.constructor = FileContext;

FileContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptPassParser.EOF, 0);
};

FileContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

FileContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFile(this);
	}
};

FileContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFile(this);
	}
};




ECMAScriptPassParser.FileContext = FileContext;

ECMAScriptPassParser.prototype.file = function() {

    var localctx = new FileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECMAScriptPassParser.RULE_file);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Break - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)) | (1 << (ECMAScriptPassParser.With - 67)) | (1 << (ECMAScriptPassParser.Yield - 67)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.StringLiteral - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 188;
            this.statementList();
        }

        this.state = 191;
        this.match(ECMAScriptPassParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEos(this);
	}
};




ECMAScriptPassParser.EosContext = EosContext;

ECMAScriptPassParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ECMAScriptPassParser.RULE_eos);
    try {
        this.state = 197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 193;
            this.match(ECMAScriptPassParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 194;
            if (!( this.isLineTerminatorEquivalent())) {
                throw new antlr4.error.FailedPredicateException(this, "this.isLineTerminatorEquivalent()");
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 195;
            if (!( this._input.LT(1).type === ECMAScriptPassParser.CloseBrace)) {
                throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).type === ECMAScriptPassParser.CloseBrace");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 196;
            if (!( this._input.LT(1).type === ECMAScriptPassParser.EOF)) {
                throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).type === ECMAScriptPassParser.EOF");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpression(this);
	}
};




ECMAScriptPassParser.ExpressionContext = ExpressionContext;

ECMAScriptPassParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ECMAScriptPassParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        this.assignmentExpression(0);
        this.state = 204;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 200;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 201;
            this.assignmentExpression(0);
            this.state = 206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expression_In;
    return this;
}

Expression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_InContext.prototype.constructor = Expression_InContext;

Expression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

Expression_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


Expression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpression_In(this);
	}
};

Expression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpression_In(this);
	}
};




ECMAScriptPassParser.Expression_InContext = Expression_InContext;

ECMAScriptPassParser.prototype.expression_In = function() {

    var localctx = new Expression_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ECMAScriptPassParser.RULE_expression_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 207;
        this.assignmentExpression_In(0);
        this.state = 212;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 208;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 209;
                this.assignmentExpression_In(0); 
            }
            this.state = 214;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifierReference;
    return this;
}

IdentifierReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReferenceContext.prototype.constructor = IdentifierReferenceContext;

IdentifierReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReferenceContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

IdentifierReferenceContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

IdentifierReferenceContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

IdentifierReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifierReference(this);
	}
};

IdentifierReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifierReference(this);
	}
};




ECMAScriptPassParser.IdentifierReferenceContext = IdentifierReferenceContext;

ECMAScriptPassParser.prototype.identifierReference = function() {

    var localctx = new IdentifierReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ECMAScriptPassParser.RULE_identifierReference);
    try {
        this.state = 219;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 215;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 216;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 217;
            this.match(ECMAScriptPassParser.Await);
            this.state = 218;
            this.match(ECMAScriptPassParser.Multiply);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingIdentifier;
    return this;
}

BindingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifierContext.prototype.constructor = BindingIdentifierContext;

BindingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

BindingIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

BindingIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingIdentifier(this);
	}
};

BindingIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingIdentifier(this);
	}
};




ECMAScriptPassParser.BindingIdentifierContext = BindingIdentifierContext;

ECMAScriptPassParser.prototype.bindingIdentifier = function() {

    var localctx = new BindingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ECMAScriptPassParser.RULE_bindingIdentifier);
    try {
        this.state = 224;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 221;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 222;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 223;
            this.match(ECMAScriptPassParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptPassParser.IdentifierName, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifier(this);
	}
};




ECMAScriptPassParser.IdentifierContext = IdentifierContext;

ECMAScriptPassParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ECMAScriptPassParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        this.match(ECMAScriptPassParser.IdentifierName);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptPassParser.This, 0);
};

PrimaryExpressionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

PrimaryExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

PrimaryExpressionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};

PrimaryExpressionContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptPassParser.RegularExpressionLiteral, 0);
};

PrimaryExpressionContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPrimaryExpression(this);
	}
};




ECMAScriptPassParser.PrimaryExpressionContext = PrimaryExpressionContext;

ECMAScriptPassParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ECMAScriptPassParser.RULE_primaryExpression);
    try {
        this.state = 236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.This:
            this.enterOuterAlt(localctx, 1);
            this.state = 228;
            this.match(ECMAScriptPassParser.This);
            break;
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 2);
            this.state = 229;
            this.identifierReference();
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 230;
            this.literal();
            break;
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 4);
            this.state = 231;
            this.arrayLiteral();
            break;
        case ECMAScriptPassParser.OpenBrace:
            this.enterOuterAlt(localctx, 5);
            this.state = 232;
            this.objectLiteral();
            break;
        case ECMAScriptPassParser.Function:
            this.enterOuterAlt(localctx, 6);
            this.state = 233;
            this.functionExpression();
            break;
        case ECMAScriptPassParser.RegularExpressionLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 234;
            this.match(ECMAScriptPassParser.RegularExpressionLiteral);
            break;
        case ECMAScriptPassParser.OpenParen:
            this.enterOuterAlt(localctx, 8);
            this.state = 235;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptPassParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NumericLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptPassParser.StringLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLiteral(this);
	}
};




ECMAScriptPassParser.LiteralContext = LiteralContext;

ECMAScriptPassParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ECMAScriptPassParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.NumericLiteral || _la===ECMAScriptPassParser.NullLiteral || _la===ECMAScriptPassParser.BooleanLiteral || _la===ECMAScriptPassParser.StringLiteral)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverParenthesizedExpressionAndArrowParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList;
    return this;
}

CoverParenthesizedExpressionAndArrowParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverParenthesizedExpressionAndArrowParameterListContext.prototype.constructor = CoverParenthesizedExpressionAndArrowParameterListContext;

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};




ECMAScriptPassParser.CoverParenthesizedExpressionAndArrowParameterListContext = CoverParenthesizedExpressionAndArrowParameterListContext;

ECMAScriptPassParser.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {

    var localctx = new CoverParenthesizedExpressionAndArrowParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList);
    var _la = 0; // Token type
    try {
        this.state = 249;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 240;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 241;
            this.expression_In();
            this.state = 243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 242;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 245;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 247;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 248;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverCallExpressionAndAsyncArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead;
    return this;
}

CoverCallExpressionAndAsyncArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverCallExpressionAndAsyncArrowHeadContext.prototype.constructor = CoverCallExpressionAndAsyncArrowHeadContext;

CoverCallExpressionAndAsyncArrowHeadContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverCallExpressionAndAsyncArrowHead(this);
	}
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverCallExpressionAndAsyncArrowHead(this);
	}
};




ECMAScriptPassParser.CoverCallExpressionAndAsyncArrowHeadContext = CoverCallExpressionAndAsyncArrowHeadContext;

ECMAScriptPassParser.prototype.coverCallExpressionAndAsyncArrowHead = function() {

    var localctx = new CoverCallExpressionAndAsyncArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 251;
        this.memberExpression(0);
        this.state = 252;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrayLiteral(this);
	}
};




ECMAScriptPassParser.ArrayLiteralContext = ArrayLiteralContext;

ECMAScriptPassParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECMAScriptPassParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.state = 271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 254;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 255;
                this.elision();
            }

            this.state = 258;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 259;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 260;
            this.elementList(0);
            this.state = 261;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 263;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 264;
            this.elementList(0);
            this.state = 265;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 266;
                this.elision();
            }

            this.state = 269;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ElementListContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ElementListContext.prototype.spreadElement = function() {
    return this.getTypedRuleContext(SpreadElementContext,0);
};

ElementListContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ElementListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitElementList(this);
	}
};



ECMAScriptPassParser.prototype.elementList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ElementListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, ECMAScriptPassParser.RULE_elementList, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 274;
                this.elision();
            }

            this.state = 277;
            this.assignmentExpression_In(0);
            break;

        case 2:
            this.state = 279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 278;
                this.elision();
            }

            this.state = 281;
            this.spreadElement();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 298;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 296;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList);
                    this.state = 284;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 285;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 287;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 286;
                        this.elision();
                    }

                    this.state = 289;
                    this.assignmentExpression_In(0);
                    break;

                case 2:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList);
                    this.state = 290;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 291;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 293;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 292;
                        this.elision();
                    }

                    this.state = 295;
                    this.spreadElement();
                    break;

                } 
            }
            this.state = 300;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ElisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_elision;
    return this;
}

ElisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElisionContext.prototype.constructor = ElisionContext;

ElisionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ElisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterElision(this);
	}
};

ElisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitElision(this);
	}
};




ECMAScriptPassParser.ElisionContext = ElisionContext;

ECMAScriptPassParser.prototype.elision = function() {

    var localctx = new ElisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECMAScriptPassParser.RULE_elision);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 301;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 304; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptPassParser.Comma);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpreadElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_spreadElement;
    return this;
}

SpreadElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadElementContext.prototype.constructor = SpreadElementContext;

SpreadElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptPassParser.Spread, 0);
};

SpreadElementContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

SpreadElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSpreadElement(this);
	}
};

SpreadElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSpreadElement(this);
	}
};




ECMAScriptPassParser.SpreadElementContext = SpreadElementContext;

ECMAScriptPassParser.prototype.spreadElement = function() {

    var localctx = new SpreadElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECMAScriptPassParser.RULE_spreadElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.match(ECMAScriptPassParser.Spread);
        this.state = 307;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyDefinitionList = function() {
    return this.getTypedRuleContext(PropertyDefinitionListContext,0);
};

ObjectLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ObjectLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitObjectLiteral(this);
	}
};




ECMAScriptPassParser.ObjectLiteralContext = ObjectLiteralContext;

ECMAScriptPassParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECMAScriptPassParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.state = 318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 309;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 310;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 311;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 312;
            this.propertyDefinitionList();
            this.state = 314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 313;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 316;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinitionList;
    return this;
}

PropertyDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionListContext.prototype.constructor = PropertyDefinitionListContext;

PropertyDefinitionListContext.prototype.propertyDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefinitionContext);
    } else {
        return this.getTypedRuleContext(PropertyDefinitionContext,i);
    }
};

PropertyDefinitionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


PropertyDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinitionList(this);
	}
};

PropertyDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinitionList(this);
	}
};




ECMAScriptPassParser.PropertyDefinitionListContext = PropertyDefinitionListContext;

ECMAScriptPassParser.prototype.propertyDefinitionList = function() {

    var localctx = new PropertyDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECMAScriptPassParser.RULE_propertyDefinitionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 320;
        this.propertyDefinition();
        this.state = 325;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 321;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 322;
                this.propertyDefinition(); 
            }
            this.state = 327;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinition;
    return this;
}

PropertyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionContext.prototype.constructor = PropertyDefinitionContext;

PropertyDefinitionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PropertyDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyDefinitionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

PropertyDefinitionContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

PropertyDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

PropertyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinition(this);
	}
};

PropertyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinition(this);
	}
};




ECMAScriptPassParser.PropertyDefinitionContext = PropertyDefinitionContext;

ECMAScriptPassParser.prototype.propertyDefinition = function() {

    var localctx = new PropertyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ECMAScriptPassParser.RULE_propertyDefinition);
    try {
        this.state = 334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 328;
            this.identifierReference();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 329;
            this.propertyName();
            this.state = 330;
            this.match(ECMAScriptPassParser.Colon);
            this.state = 331;
            this.assignmentExpression_In(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 333;
            this.methodDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.literalPropertyName = function() {
    return this.getTypedRuleContext(LiteralPropertyNameContext,0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyName(this);
	}
};




ECMAScriptPassParser.PropertyNameContext = PropertyNameContext;

ECMAScriptPassParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECMAScriptPassParser.RULE_propertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.literalPropertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_literalPropertyName;
    return this;
}

LiteralPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralPropertyNameContext.prototype.constructor = LiteralPropertyNameContext;

LiteralPropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

LiteralPropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptPassParser.StringLiteral, 0);
};

LiteralPropertyNameContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NumericLiteral, 0);
};

LiteralPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLiteralPropertyName(this);
	}
};

LiteralPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLiteralPropertyName(this);
	}
};




ECMAScriptPassParser.LiteralPropertyNameContext = LiteralPropertyNameContext;

ECMAScriptPassParser.prototype.literalPropertyName = function() {

    var localctx = new LiteralPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ECMAScriptPassParser.RULE_literalPropertyName);
    try {
        this.state = 341;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.Enum:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 338;
            this.identifierName();
            break;
        case ECMAScriptPassParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 339;
            this.match(ECMAScriptPassParser.StringLiteral);
            break;
        case ECMAScriptPassParser.NumericLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 340;
            this.match(ECMAScriptPassParser.NumericLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_callExpression;
    return this;
}

CallExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallExpressionContext.prototype.constructor = CallExpressionContext;

CallExpressionContext.prototype.coverCallExpressionAndAsyncArrowHead = function() {
    return this.getTypedRuleContext(CoverCallExpressionAndAsyncArrowHeadContext,0);
};

CallExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

CallExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

CallExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

CallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCallExpression(this);
	}
};

CallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCallExpression(this);
	}
};



ECMAScriptPassParser.prototype.callExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, ECMAScriptPassParser.RULE_callExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.coverCallExpressionAndAsyncArrowHead();
        this._ctx.stop = this._input.LT(-1);
        this.state = 353;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 351;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression);
                    this.state = 346;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 347;
                    this.arguments();
                    break;

                case 2:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression);
                    this.state = 348;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 349;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 350;
                    this.identifierName();
                    break;

                } 
            }
            this.state = 355;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

ArgumentsContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ArgumentsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArguments(this);
	}
};




ECMAScriptPassParser.ArgumentsContext = ArgumentsContext;

ECMAScriptPassParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECMAScriptPassParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 356;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 357;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 358;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 359;
            this.argumentList();
            this.state = 361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 360;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 363;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ArgumentListContext.prototype.Spread = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Spread);
    } else {
        return this.getToken(ECMAScriptPassParser.Spread, i);
    }
};


ArgumentListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArgumentList(this);
	}
};




ECMAScriptPassParser.ArgumentListContext = ArgumentListContext;

ECMAScriptPassParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECMAScriptPassParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Spread) {
            this.state = 367;
            this.match(ECMAScriptPassParser.Spread);
        }

        this.state = 370;
        this.assignmentExpression_In(0);
        this.state = 378;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 371;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptPassParser.Spread) {
                    this.state = 372;
                    this.match(ECMAScriptPassParser.Spread);
                }

                this.state = 375;
                this.assignmentExpression_In(0); 
            }
            this.state = 380;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftHandSideExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_leftHandSideExpression;
    return this;
}

LeftHandSideExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftHandSideExpressionContext.prototype.constructor = LeftHandSideExpressionContext;

LeftHandSideExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLeftHandSideExpression(this);
	}
};

LeftHandSideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLeftHandSideExpression(this);
	}
};




ECMAScriptPassParser.LeftHandSideExpressionContext = LeftHandSideExpressionContext;

ECMAScriptPassParser.prototype.leftHandSideExpression = function() {

    var localctx = new LeftHandSideExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECMAScriptPassParser.RULE_leftHandSideExpression);
    try {
        this.state = 383;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 381;
            this.callExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 382;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_newExpression;
    return this;
}

NewExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

NewExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

NewExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

NewExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitNewExpression(this);
	}
};




ECMAScriptPassParser.NewExpressionContext = NewExpressionContext;

ECMAScriptPassParser.prototype.newExpression = function() {

    var localctx = new NewExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECMAScriptPassParser.RULE_newExpression);
    try {
        this.state = 388;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 385;
            this.memberExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 386;
            this.match(ECMAScriptPassParser.New);
            this.state = 387;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_memberExpression;
    return this;
}

MemberExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberExpressionContext.prototype.constructor = MemberExpressionContext;

MemberExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

MemberExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

MemberExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

MemberExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MemberExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

MemberExpressionContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

MemberExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

MemberExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

MemberExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMemberExpression(this);
	}
};

MemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMemberExpression(this);
	}
};



ECMAScriptPassParser.prototype.memberExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 50;
    this.enterRecursionRule(localctx, 50, ECMAScriptPassParser.RULE_memberExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 396;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.state = 391;
            this.primaryExpression();
            break;
        case ECMAScriptPassParser.New:
            this.state = 392;
            this.match(ECMAScriptPassParser.New);
            this.state = 393;
            this.memberExpression(0);
            this.state = 394;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 408;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 406;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression);
                    this.state = 398;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 399;
                    this.match(ECMAScriptPassParser.OpenBracket);
                    this.state = 400;
                    this.expression_In();
                    this.state = 401;
                    this.match(ECMAScriptPassParser.CloseBracket);
                    break;

                case 2:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression);
                    this.state = 403;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 404;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 405;
                    this.identifierName();
                    break;

                } 
            }
            this.state = 410;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer(this);
	}
};




ECMAScriptPassParser.InitializerContext = InitializerContext;

ECMAScriptPassParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECMAScriptPassParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 412;
        this.assignmentExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer_In;
    return this;
}

Initializer_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_InContext.prototype.constructor = Initializer_InContext;

Initializer_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

Initializer_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

Initializer_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer_In(this);
	}
};

Initializer_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer_In(this);
	}
};




ECMAScriptPassParser.Initializer_InContext = Initializer_InContext;

ECMAScriptPassParser.prototype.initializer_In = function() {

    var localctx = new Initializer_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECMAScriptPassParser.RULE_initializer_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 415;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;


 
AssignmentExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BitwiseANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseANDExpressionContext.prototype.constructor = BitwiseANDExpressionContext;

ECMAScriptPassParser.BitwiseANDExpressionContext = BitwiseANDExpressionContext;

BitwiseANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseANDExpressionContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression(this);
	}
};

BitwiseANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression(this);
	}
};


function ShiftExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ECMAScriptPassParser.ShiftExpressionContext = ShiftExpressionContext;

ShiftExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ShiftExpressionContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression(this);
	}
};


function BitwiseORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseORExpressionContext.prototype.constructor = BitwiseORExpressionContext;

ECMAScriptPassParser.BitwiseORExpressionContext = BitwiseORExpressionContext;

BitwiseORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseORExpressionContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression(this);
	}
};

BitwiseORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression(this);
	}
};


function AdditiveExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

ECMAScriptPassParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression(this);
	}
};


function RelationalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

ECMAScriptPassParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression(this);
	}
};


function ConditionalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ECMAScriptPassParser.ConditionalExpressionContext = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ConditionalExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpressionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression(this);
	}
};


function AssignExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignExpressionContext.prototype.constructor = AssignExpressionContext;

ECMAScriptPassParser.AssignExpressionContext = AssignExpressionContext;

AssignExpressionContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

AssignExpressionContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

AssignExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
AssignExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression(this);
	}
};

AssignExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression(this);
	}
};


function MultiplicativeExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

ECMAScriptPassParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};


function LhsExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LhsExpressionContext.prototype.constructor = LhsExpressionContext;

ECMAScriptPassParser.LhsExpressionContext = LhsExpressionContext;

LhsExpressionContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression(this);
	}
};

LhsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression(this);
	}
};


function BitwiseXORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseXORExpressionContext.prototype.constructor = BitwiseXORExpressionContext;

ECMAScriptPassParser.BitwiseXORExpressionContext = BitwiseXORExpressionContext;

BitwiseXORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseXORExpressionContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression(this);
	}
};

BitwiseXORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression(this);
	}
};


function LogicalANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalANDExpressionContext.prototype.constructor = LogicalANDExpressionContext;

ECMAScriptPassParser.LogicalANDExpressionContext = LogicalANDExpressionContext;

LogicalANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalANDExpressionContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression(this);
	}
};

LogicalANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression(this);
	}
};


function EqualityExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ECMAScriptPassParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression(this);
	}
};


function UpdateExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UpdateExpressionContext.prototype.constructor = UpdateExpressionContext;

ECMAScriptPassParser.UpdateExpressionContext = UpdateExpressionContext;

UpdateExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

UpdateExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression(this);
	}
};

UpdateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression(this);
	}
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

ECMAScriptPassParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentOperatorExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression(this);
	}
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression(this);
	}
};


function ExponentiationExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ExponentiationExpressionContext.prototype.constructor = ExponentiationExpressionContext;

ECMAScriptPassParser.ExponentiationExpressionContext = ExponentiationExpressionContext;

ExponentiationExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExponentiationExpressionContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression(this);
	}
};

ExponentiationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression(this);
	}
};


function UnaryExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

ECMAScriptPassParser.UnaryExpressionContext = UnaryExpressionContext;

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression(this);
	}
};


function LogicalORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalORExpressionContext.prototype.constructor = LogicalORExpressionContext;

ECMAScriptPassParser.LogicalORExpressionContext = LogicalORExpressionContext;

LogicalORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalORExpressionContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression(this);
	}
};

LogicalORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression(this);
	}
};


function InstanceOfExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
InstanceOfExpressionContext.prototype.constructor = InstanceOfExpressionContext;

ECMAScriptPassParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

InstanceOfExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

InstanceOfExpressionContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression(this);
	}
};

InstanceOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 56;
    this.enterRecursionRule(localctx, 56, ECMAScriptPassParser.RULE_assignmentExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 418;
            this.unaryOperator();
            this.state = 419;
            this.assignmentExpression(17);
            break;

        case 2:
            localctx = new AssignExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 421;
            this.leftHandSideExpression();
            this.state = 422;
            this.match(ECMAScriptPassParser.Assign);
            this.state = 423;
            this.assignmentExpression(3);
            break;

        case 3:
            localctx = new AssignmentOperatorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 425;
            this.leftHandSideExpression();
            this.state = 426;
            this.assignmentOperator();
            this.state = 427;
            this.assignmentExpression(2);
            break;

        case 4:
            localctx = new LhsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 429;
            this.leftHandSideExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 483;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 481;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 432;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 433;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 434;
                    this.assignmentExpression(17);
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 435;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 436;
                    this.multiplicativeOperator();
                    this.state = 437;
                    this.assignmentExpression(16);
                    break;

                case 3:
                    localctx = new AdditiveExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 439;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 440;
                    this.additiveOperator();
                    this.state = 441;
                    this.assignmentExpression(15);
                    break;

                case 4:
                    localctx = new ShiftExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 443;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 444;
                    this.shiftOperator();
                    this.state = 445;
                    this.assignmentExpression(14);
                    break;

                case 5:
                    localctx = new RelationalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 447;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 448;
                    this.relationalOperator();
                    this.state = 449;
                    this.assignmentExpression(13);
                    break;

                case 6:
                    localctx = new InstanceOfExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 451;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 452;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 453;
                    this.assignmentExpression(12);
                    break;

                case 7:
                    localctx = new EqualityExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 454;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 455;
                    this.equalityOperator();
                    this.state = 456;
                    this.assignmentExpression(11);
                    break;

                case 8:
                    localctx = new BitwiseANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 458;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 459;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 460;
                    this.assignmentExpression(10);
                    break;

                case 9:
                    localctx = new BitwiseXORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 461;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 462;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 463;
                    this.assignmentExpression(9);
                    break;

                case 10:
                    localctx = new BitwiseORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 464;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 465;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 466;
                    this.assignmentExpression(8);
                    break;

                case 11:
                    localctx = new LogicalANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 467;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 468;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 469;
                    this.assignmentExpression(7);
                    break;

                case 12:
                    localctx = new LogicalORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 470;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 471;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 472;
                    this.assignmentExpression(6);
                    break;

                case 13:
                    localctx = new ConditionalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 473;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 474;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 475;
                    this.assignmentExpression(0);
                    this.state = 476;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 477;
                    this.assignmentExpression(5);
                    break;

                case 14:
                    localctx = new UpdateExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 479;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 480;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 485;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AssignmentExpression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression_In;
    return this;
}

AssignmentExpression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpression_InContext.prototype.constructor = AssignmentExpression_InContext;


 
AssignmentExpression_InContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalANDExpression_InContext.prototype.constructor = LogicalANDExpression_InContext;

ECMAScriptPassParser.LogicalANDExpression_InContext = LogicalANDExpression_InContext;

LogicalANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalANDExpression_InContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression_In(this);
	}
};

LogicalANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression_In(this);
	}
};


function LhsExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LhsExpression_InContext.prototype.constructor = LhsExpression_InContext;

ECMAScriptPassParser.LhsExpression_InContext = LhsExpression_InContext;

LhsExpression_InContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression_In(this);
	}
};

LhsExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression_In(this);
	}
};


function BitwiseANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseANDExpression_InContext.prototype.constructor = BitwiseANDExpression_InContext;

ECMAScriptPassParser.BitwiseANDExpression_InContext = BitwiseANDExpression_InContext;

BitwiseANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseANDExpression_InContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression_In(this);
	}
};

BitwiseANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression_In(this);
	}
};


function UpdateExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UpdateExpression_InContext.prototype.constructor = UpdateExpression_InContext;

ECMAScriptPassParser.UpdateExpression_InContext = UpdateExpression_InContext;

UpdateExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

UpdateExpression_InContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpression_InContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression_In(this);
	}
};

UpdateExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression_In(this);
	}
};


function EqualityExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
EqualityExpression_InContext.prototype.constructor = EqualityExpression_InContext;

ECMAScriptPassParser.EqualityExpression_InContext = EqualityExpression_InContext;

EqualityExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

EqualityExpression_InContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression_In(this);
	}
};

EqualityExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression_In(this);
	}
};


function MultiplicativeExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
MultiplicativeExpression_InContext.prototype.constructor = MultiplicativeExpression_InContext;

ECMAScriptPassParser.MultiplicativeExpression_InContext = MultiplicativeExpression_InContext;

MultiplicativeExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

MultiplicativeExpression_InContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression_In(this);
	}
};

MultiplicativeExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression_In(this);
	}
};


function BitwiseORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseORExpression_InContext.prototype.constructor = BitwiseORExpression_InContext;

ECMAScriptPassParser.BitwiseORExpression_InContext = BitwiseORExpression_InContext;

BitwiseORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseORExpression_InContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression_In(this);
	}
};

BitwiseORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression_In(this);
	}
};


function ConditionalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ConditionalExpression_InContext.prototype.constructor = ConditionalExpression_InContext;

ECMAScriptPassParser.ConditionalExpression_InContext = ConditionalExpression_InContext;

ConditionalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ConditionalExpression_InContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpression_InContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression_In(this);
	}
};

ConditionalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression_In(this);
	}
};


function ExponentiationExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ExponentiationExpression_InContext.prototype.constructor = ExponentiationExpression_InContext;

ECMAScriptPassParser.ExponentiationExpression_InContext = ExponentiationExpression_InContext;

ExponentiationExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ExponentiationExpression_InContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression_In(this);
	}
};

ExponentiationExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression_In(this);
	}
};


function AdditiveExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AdditiveExpression_InContext.prototype.constructor = AdditiveExpression_InContext;

ECMAScriptPassParser.AdditiveExpression_InContext = AdditiveExpression_InContext;

AdditiveExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AdditiveExpression_InContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression_In(this);
	}
};

AdditiveExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression_In(this);
	}
};


function AssignExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignExpression_InContext.prototype.constructor = AssignExpression_InContext;

ECMAScriptPassParser.AssignExpression_InContext = AssignExpression_InContext;

AssignExpression_InContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

AssignExpression_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

AssignExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
AssignExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression_In(this);
	}
};

AssignExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression_In(this);
	}
};


function AssignmentOperatorExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignmentOperatorExpression_InContext.prototype.constructor = AssignmentOperatorExpression_InContext;

ECMAScriptPassParser.AssignmentOperatorExpression_InContext = AssignmentOperatorExpression_InContext;

AssignmentOperatorExpression_InContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

AssignmentOperatorExpression_InContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentOperatorExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
AssignmentOperatorExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression_In(this);
	}
};

AssignmentOperatorExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression_In(this);
	}
};


function RelationalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
RelationalExpression_InContext.prototype.constructor = RelationalExpression_InContext;

ECMAScriptPassParser.RelationalExpression_InContext = RelationalExpression_InContext;

RelationalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

RelationalExpression_InContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression_In(this);
	}
};

RelationalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression_In(this);
	}
};


function InstanceOfExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InstanceOfExpression_InContext.prototype.constructor = InstanceOfExpression_InContext;

ECMAScriptPassParser.InstanceOfExpression_InContext = InstanceOfExpression_InContext;

InstanceOfExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InstanceOfExpression_InContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression_In(this);
	}
};

InstanceOfExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression_In(this);
	}
};


function InExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InExpression_InContext.prototype.constructor = InExpression_InContext;

ECMAScriptPassParser.InExpression_InContext = InExpression_InContext;

InExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InExpression_InContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};
InExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInExpression_In(this);
	}
};

InExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInExpression_In(this);
	}
};


function LogicalORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalORExpression_InContext.prototype.constructor = LogicalORExpression_InContext;

ECMAScriptPassParser.LogicalORExpression_InContext = LogicalORExpression_InContext;

LogicalORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalORExpression_InContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression_In(this);
	}
};

LogicalORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression_In(this);
	}
};


function ShiftExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ShiftExpression_InContext.prototype.constructor = ShiftExpression_InContext;

ECMAScriptPassParser.ShiftExpression_InContext = ShiftExpression_InContext;

ShiftExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ShiftExpression_InContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression_In(this);
	}
};

ShiftExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression_In(this);
	}
};


function UnaryExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UnaryExpression_InContext.prototype.constructor = UnaryExpression_InContext;

ECMAScriptPassParser.UnaryExpression_InContext = UnaryExpression_InContext;

UnaryExpression_InContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
UnaryExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression_In(this);
	}
};

UnaryExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression_In(this);
	}
};


function BitwiseXORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseXORExpression_InContext.prototype.constructor = BitwiseXORExpression_InContext;

ECMAScriptPassParser.BitwiseXORExpression_InContext = BitwiseXORExpression_InContext;

BitwiseXORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseXORExpression_InContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression_In(this);
	}
};

BitwiseXORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression_In(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression_In = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpression_InContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 58;
    this.enterRecursionRule(localctx, 58, ECMAScriptPassParser.RULE_assignmentExpression_In, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnaryExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 487;
            this.unaryOperator();
            this.state = 488;
            this.assignmentExpression_In(18);
            break;

        case 2:
            localctx = new AssignExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 490;
            this.leftHandSideExpression();
            this.state = 491;
            this.match(ECMAScriptPassParser.Assign);
            this.state = 492;
            this.assignmentExpression_In(3);
            break;

        case 3:
            localctx = new AssignmentOperatorExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 494;
            this.leftHandSideExpression();
            this.state = 495;
            this.assignmentOperator();
            this.state = 496;
            this.assignmentExpression_In(2);
            break;

        case 4:
            localctx = new LhsExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 498;
            this.leftHandSideExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 555;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 553;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 501;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 502;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 503;
                    this.assignmentExpression_In(18);
                    break;

                case 2:
                    localctx = new MultiplicativeExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 504;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 505;
                    this.multiplicativeOperator();
                    this.state = 506;
                    this.assignmentExpression_In(17);
                    break;

                case 3:
                    localctx = new AdditiveExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 508;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 509;
                    this.additiveOperator();
                    this.state = 510;
                    this.assignmentExpression_In(16);
                    break;

                case 4:
                    localctx = new ShiftExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 512;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 513;
                    this.shiftOperator();
                    this.state = 514;
                    this.assignmentExpression_In(15);
                    break;

                case 5:
                    localctx = new RelationalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 516;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 517;
                    this.relationalOperator();
                    this.state = 518;
                    this.assignmentExpression_In(14);
                    break;

                case 6:
                    localctx = new InExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 520;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 521;
                    this.match(ECMAScriptPassParser.In);
                    this.state = 522;
                    this.assignmentExpression_In(13);
                    break;

                case 7:
                    localctx = new InstanceOfExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 523;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 524;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 525;
                    this.assignmentExpression_In(12);
                    break;

                case 8:
                    localctx = new EqualityExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 526;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 527;
                    this.equalityOperator();
                    this.state = 528;
                    this.assignmentExpression_In(11);
                    break;

                case 9:
                    localctx = new BitwiseANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 530;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 531;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 532;
                    this.assignmentExpression_In(10);
                    break;

                case 10:
                    localctx = new BitwiseXORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 533;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 534;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 535;
                    this.assignmentExpression_In(9);
                    break;

                case 11:
                    localctx = new BitwiseORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 536;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 537;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 538;
                    this.assignmentExpression_In(8);
                    break;

                case 12:
                    localctx = new LogicalANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 539;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 540;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 541;
                    this.assignmentExpression_In(7);
                    break;

                case 13:
                    localctx = new LogicalORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 542;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 543;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 544;
                    this.assignmentExpression_In(6);
                    break;

                case 14:
                    localctx = new ConditionalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 545;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 546;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 547;
                    this.assignmentExpression_In(0);
                    this.state = 548;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 549;
                    this.assignmentExpression_In(5);
                    break;

                case 15:
                    localctx = new UpdateExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 551;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 552;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 557;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptPassParser.Delete, 0);
};

UnaryOperatorContext.prototype.Void = function() {
    return this.getToken(ECMAScriptPassParser.Void, 0);
};

UnaryOperatorContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptPassParser.Typeof, 0);
};

UnaryOperatorContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UnaryOperatorContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};

UnaryOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptPassParser.Plus, 0);
};

UnaryOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptPassParser.Minus, 0);
};

UnaryOperatorContext.prototype.BitNot = function() {
    return this.getToken(ECMAScriptPassParser.BitNot, 0);
};

UnaryOperatorContext.prototype.Not = function() {
    return this.getToken(ECMAScriptPassParser.Not, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryOperator(this);
	}
};




ECMAScriptPassParser.UnaryOperatorContext = UnaryOperatorContext;

ECMAScriptPassParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECMAScriptPassParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558;
        _la = this._input.LA(1);
        if(!(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (ECMAScriptPassParser.Plus - 22)) | (1 << (ECMAScriptPassParser.Minus - 22)) | (1 << (ECMAScriptPassParser.PlusPlus - 22)) | (1 << (ECMAScriptPassParser.MinusMinus - 22)) | (1 << (ECMAScriptPassParser.Not - 22)) | (1 << (ECMAScriptPassParser.BitNot - 22)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_multiplicativeOperator;
    return this;
}

MultiplicativeOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeOperatorContext.prototype.constructor = MultiplicativeOperatorContext;

MultiplicativeOperatorContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

MultiplicativeOperatorContext.prototype.Divide = function() {
    return this.getToken(ECMAScriptPassParser.Divide, 0);
};

MultiplicativeOperatorContext.prototype.Modulo = function() {
    return this.getToken(ECMAScriptPassParser.Modulo, 0);
};

MultiplicativeOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeOperator(this);
	}
};

MultiplicativeOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeOperator(this);
	}
};




ECMAScriptPassParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext;

ECMAScriptPassParser.prototype.multiplicativeOperator = function() {

    var localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECMAScriptPassParser.RULE_multiplicativeOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        _la = this._input.LA(1);
        if(!(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ECMAScriptPassParser.Multiply - 24)) | (1 << (ECMAScriptPassParser.Modulo - 24)) | (1 << (ECMAScriptPassParser.Divide - 24)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_additiveOperator;
    return this;
}

AdditiveOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveOperatorContext.prototype.constructor = AdditiveOperatorContext;

AdditiveOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptPassParser.Plus, 0);
};

AdditiveOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptPassParser.Minus, 0);
};

AdditiveOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveOperator(this);
	}
};

AdditiveOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveOperator(this);
	}
};




ECMAScriptPassParser.AdditiveOperatorContext = AdditiveOperatorContext;

ECMAScriptPassParser.prototype.additiveOperator = function() {

    var localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECMAScriptPassParser.RULE_additiveOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.Plus || _la===ECMAScriptPassParser.Minus)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShiftOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_shiftOperator;
    return this;
}

ShiftOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftOperatorContext.prototype.constructor = ShiftOperatorContext;

ShiftOperatorContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(ECMAScriptPassParser.LeftShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftLogical = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftLogical, 0);
};

ShiftOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftOperator(this);
	}
};

ShiftOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftOperator(this);
	}
};




ECMAScriptPassParser.ShiftOperatorContext = ShiftOperatorContext;

ECMAScriptPassParser.prototype.shiftOperator = function() {

    var localctx = new ShiftOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECMAScriptPassParser.RULE_shiftOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.LeftShiftArithmetic) | (1 << ECMAScriptPassParser.RightShiftArithmetic) | (1 << ECMAScriptPassParser.RightShiftLogical))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_relationalOperator;
    return this;
}

RelationalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalOperatorContext.prototype.constructor = RelationalOperatorContext;

RelationalOperatorContext.prototype.LessThan = function() {
    return this.getToken(ECMAScriptPassParser.LessThan, 0);
};

RelationalOperatorContext.prototype.GreaterThan = function() {
    return this.getToken(ECMAScriptPassParser.GreaterThan, 0);
};

RelationalOperatorContext.prototype.LessThanEquals = function() {
    return this.getToken(ECMAScriptPassParser.LessThanEquals, 0);
};

RelationalOperatorContext.prototype.GreaterThanEquals = function() {
    return this.getToken(ECMAScriptPassParser.GreaterThanEquals, 0);
};

RelationalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalOperator(this);
	}
};

RelationalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalOperator(this);
	}
};




ECMAScriptPassParser.RelationalOperatorContext = RelationalOperatorContext;

ECMAScriptPassParser.prototype.relationalOperator = function() {

    var localctx = new RelationalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ECMAScriptPassParser.RULE_relationalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.LessThan) | (1 << ECMAScriptPassParser.GreaterThan) | (1 << ECMAScriptPassParser.LessThanEquals) | (1 << ECMAScriptPassParser.GreaterThanEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_equalityOperator;
    return this;
}

EqualityOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityOperatorContext.prototype.constructor = EqualityOperatorContext;

EqualityOperatorContext.prototype.Equals = function() {
    return this.getToken(ECMAScriptPassParser.Equals, 0);
};

EqualityOperatorContext.prototype.NotEquals = function() {
    return this.getToken(ECMAScriptPassParser.NotEquals, 0);
};

EqualityOperatorContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptPassParser.IdentityEquals, 0);
};

EqualityOperatorContext.prototype.IdentityNotEquals = function() {
    return this.getToken(ECMAScriptPassParser.IdentityNotEquals, 0);
};

EqualityOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityOperator(this);
	}
};

EqualityOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityOperator(this);
	}
};




ECMAScriptPassParser.EqualityOperatorContext = EqualityOperatorContext;

ECMAScriptPassParser.prototype.equalityOperator = function() {

    var localctx = new EqualityOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ECMAScriptPassParser.RULE_equalityOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.Equals) | (1 << ECMAScriptPassParser.NotEquals) | (1 << ECMAScriptPassParser.IdentityEquals) | (1 << ECMAScriptPassParser.IdentityNotEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(ECMAScriptPassParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(ECMAScriptPassParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(ECMAScriptPassParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(ECMAScriptPassParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModuloAssign = function() {
    return this.getToken(ECMAScriptPassParser.ModuloAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(ECMAScriptPassParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptPassParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ECMAScriptPassParser.AssignmentOperatorContext = AssignmentOperatorContext;

ECMAScriptPassParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ECMAScriptPassParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ECMAScriptPassParser.PlusAssign - 42)) | (1 << (ECMAScriptPassParser.MinusAssign - 42)) | (1 << (ECMAScriptPassParser.MultiplyAssign - 42)) | (1 << (ECMAScriptPassParser.ModuloAssign - 42)) | (1 << (ECMAScriptPassParser.PowerAssign - 42)) | (1 << (ECMAScriptPassParser.LeftShiftArithmeticAssign - 42)) | (1 << (ECMAScriptPassParser.RightShiftArithmeticAssign - 42)) | (1 << (ECMAScriptPassParser.RightShiftLogicalAssign - 42)) | (1 << (ECMAScriptPassParser.BitAndAssign - 42)) | (1 << (ECMAScriptPassParser.BitOrAssign - 42)) | (1 << (ECMAScriptPassParser.BitXorAssign - 42)) | (1 << (ECMAScriptPassParser.DivideAssign - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.breakableStatement = function() {
    return this.getTypedRuleContext(BreakableStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatement(this);
	}
};




ECMAScriptPassParser.StatementContext = StatementContext;

ECMAScriptPassParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECMAScriptPassParser.RULE_statement);
    try {
        this.state = 582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 572;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 573;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 574;
            this.emptyStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 575;
            this.expressionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 576;
            this.ifStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 577;
            this.breakableStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 578;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 579;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 580;
            this.withStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 581;
            this.labelledStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statement_Return;
    return this;
}

Statement_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_ReturnContext.prototype.constructor = Statement_ReturnContext;

Statement_ReturnContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

Statement_ReturnContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

Statement_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatement_Return(this);
	}
};

Statement_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatement_Return(this);
	}
};




ECMAScriptPassParser.Statement_ReturnContext = Statement_ReturnContext;

ECMAScriptPassParser.prototype.statement_Return = function() {

    var localctx = new Statement_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ECMAScriptPassParser.RULE_statement_Return);
    try {
        this.state = 586;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.Plus:
        case ECMAScriptPassParser.Minus:
        case ECMAScriptPassParser.PlusPlus:
        case ECMAScriptPassParser.MinusMinus:
        case ECMAScriptPassParser.Not:
        case ECMAScriptPassParser.BitNot:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 584;
            this.expressionStatement();
            break;
        case ECMAScriptPassParser.Return:
            this.enterOuterAlt(localctx, 2);
            this.state = 585;
            this.returnStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statementListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItemContext);
    } else {
        return this.getTypedRuleContext(StatementListItemContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementList(this);
	}
};




ECMAScriptPassParser.StatementListContext = StatementListContext;

ECMAScriptPassParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ECMAScriptPassParser.RULE_statementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 588;
            this.statementListItem();
            this.state = 591; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Break - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)) | (1 << (ECMAScriptPassParser.With - 67)) | (1 << (ECMAScriptPassParser.Yield - 67)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.StringLiteral - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementList_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementList_Return;
    return this;
}

StatementList_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementList_ReturnContext.prototype.constructor = StatementList_ReturnContext;

StatementList_ReturnContext.prototype.statementListItem_Return = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItem_ReturnContext);
    } else {
        return this.getTypedRuleContext(StatementListItem_ReturnContext,i);
    }
};

StatementList_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementList_Return(this);
	}
};

StatementList_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementList_Return(this);
	}
};




ECMAScriptPassParser.StatementList_ReturnContext = StatementList_ReturnContext;

ECMAScriptPassParser.prototype.statementList_Return = function() {

    var localctx = new StatementList_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ECMAScriptPassParser.RULE_statementList_Return);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 593;
            this.statementListItem_Return();
            this.state = 596; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.Return - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.Let - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementListItem;
    return this;
}

StatementListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementListItem(this);
	}
};




ECMAScriptPassParser.StatementListItemContext = StatementListItemContext;

ECMAScriptPassParser.prototype.statementListItem = function() {

    var localctx = new StatementListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECMAScriptPassParser.RULE_statementListItem);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 599;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItem_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementListItem_Return;
    return this;
}

StatementListItem_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItem_ReturnContext.prototype.constructor = StatementListItem_ReturnContext;

StatementListItem_ReturnContext.prototype.statement_Return = function() {
    return this.getTypedRuleContext(Statement_ReturnContext,0);
};

StatementListItem_ReturnContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItem_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementListItem_Return(this);
	}
};

StatementListItem_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementListItem_Return(this);
	}
};




ECMAScriptPassParser.StatementListItem_ReturnContext = StatementListItem_ReturnContext;

ECMAScriptPassParser.prototype.statementListItem_Return = function() {

    var localctx = new StatementListItem_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECMAScriptPassParser.RULE_statementListItem_Return);
    try {
        this.state = 604;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.statement_Return();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 603;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEmptyStatement(this);
	}
};




ECMAScriptPassParser.EmptyStatementContext = EmptyStatementContext;

ECMAScriptPassParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECMAScriptPassParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 606;
        this.match(ECMAScriptPassParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(ECMAScriptPassParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitReturnStatement(this);
	}
};




ECMAScriptPassParser.ReturnStatementContext = ReturnStatementContext;

ECMAScriptPassParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECMAScriptPassParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(ECMAScriptPassParser.Return);
        this.state = 610;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 609;
            this.expression_In();

        }
        this.state = 612;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpressionStatement(this);
	}
};




ECMAScriptPassParser.ExpressionStatementContext = ExpressionStatementContext;

ECMAScriptPassParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ECMAScriptPassParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.expression_In();
        this.state = 615;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingElement;
    return this;
}

BindingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementContext.prototype.constructor = BindingElementContext;

BindingElementContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingElement(this);
	}
};

BindingElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingElement(this);
	}
};




ECMAScriptPassParser.BindingElementContext = BindingElementContext;

ECMAScriptPassParser.prototype.bindingElement = function() {

    var localctx = new BindingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ECMAScriptPassParser.RULE_bindingElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.singleNameBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleNameBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_singleNameBinding;
    return this;
}

SingleNameBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleNameBindingContext.prototype.constructor = SingleNameBindingContext;

SingleNameBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

SingleNameBindingContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

SingleNameBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSingleNameBinding(this);
	}
};

SingleNameBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSingleNameBinding(this);
	}
};




ECMAScriptPassParser.SingleNameBindingContext = SingleNameBindingContext;

ECMAScriptPassParser.prototype.singleNameBinding = function() {

    var localctx = new SingleNameBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ECMAScriptPassParser.RULE_singleNameBinding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.bindingIdentifier();
        this.state = 621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 620;
            this.initializer_In();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalDeclaration;
    return this;
}

LexicalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclarationContext.prototype.constructor = LexicalDeclarationContext;

LexicalDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclarationContext.prototype.bindingList = function() {
    return this.getTypedRuleContext(BindingListContext,0);
};

LexicalDeclarationContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

LexicalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalDeclaration(this);
	}
};

LexicalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalDeclaration(this);
	}
};




ECMAScriptPassParser.LexicalDeclarationContext = LexicalDeclarationContext;

ECMAScriptPassParser.prototype.lexicalDeclaration = function() {

    var localctx = new LexicalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECMAScriptPassParser.RULE_lexicalDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.letOrConst();
        this.state = 624;
        this.bindingList();
        this.state = 625;
        this.match(ECMAScriptPassParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalDeclaration_In;
    return this;
}

LexicalDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclaration_InContext.prototype.constructor = LexicalDeclaration_InContext;

LexicalDeclaration_InContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclaration_InContext.prototype.bindingList_In = function() {
    return this.getTypedRuleContext(BindingList_InContext,0);
};

LexicalDeclaration_InContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

LexicalDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalDeclaration_In(this);
	}
};

LexicalDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalDeclaration_In(this);
	}
};




ECMAScriptPassParser.LexicalDeclaration_InContext = LexicalDeclaration_InContext;

ECMAScriptPassParser.prototype.lexicalDeclaration_In = function() {

    var localctx = new LexicalDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECMAScriptPassParser.RULE_lexicalDeclaration_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.letOrConst();
        this.state = 628;
        this.bindingList_In();
        this.state = 629;
        this.match(ECMAScriptPassParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetOrConstContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_letOrConst;
    return this;
}

LetOrConstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetOrConstContext.prototype.constructor = LetOrConstContext;

LetOrConstContext.prototype.Let = function() {
    return this.getToken(ECMAScriptPassParser.Let, 0);
};

LetOrConstContext.prototype.Const = function() {
    return this.getToken(ECMAScriptPassParser.Const, 0);
};

LetOrConstContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLetOrConst(this);
	}
};

LetOrConstContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLetOrConst(this);
	}
};




ECMAScriptPassParser.LetOrConstContext = LetOrConstContext;

ECMAScriptPassParser.prototype.letOrConst = function() {

    var localctx = new LetOrConstContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ECMAScriptPassParser.RULE_letOrConst);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.Const || _la===ECMAScriptPassParser.Let)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingList;
    return this;
}

BindingListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingListContext.prototype.constructor = BindingListContext;

BindingListContext.prototype.lexicalBinding = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBindingContext);
    } else {
        return this.getTypedRuleContext(LexicalBindingContext,i);
    }
};

BindingListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingList(this);
	}
};

BindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingList(this);
	}
};




ECMAScriptPassParser.BindingListContext = BindingListContext;

ECMAScriptPassParser.prototype.bindingList = function() {

    var localctx = new BindingListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ECMAScriptPassParser.RULE_bindingList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.lexicalBinding();
        this.state = 638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 634;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 635;
            this.lexicalBinding();
            this.state = 640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingList_In;
    return this;
}

BindingList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingList_InContext.prototype.constructor = BindingList_InContext;

BindingList_InContext.prototype.lexicalBinding_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBinding_InContext);
    } else {
        return this.getTypedRuleContext(LexicalBinding_InContext,i);
    }
};

BindingList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingList_In(this);
	}
};

BindingList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingList_In(this);
	}
};




ECMAScriptPassParser.BindingList_InContext = BindingList_InContext;

ECMAScriptPassParser.prototype.bindingList_In = function() {

    var localctx = new BindingList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ECMAScriptPassParser.RULE_bindingList_In);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.lexicalBinding_In();
        this.state = 646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 642;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 643;
            this.lexicalBinding_In();
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalBinding;
    return this;
}

LexicalBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBindingContext.prototype.constructor = LexicalBindingContext;

LexicalBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBindingContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

LexicalBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalBinding(this);
	}
};

LexicalBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalBinding(this);
	}
};




ECMAScriptPassParser.LexicalBindingContext = LexicalBindingContext;

ECMAScriptPassParser.prototype.lexicalBinding = function() {

    var localctx = new LexicalBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ECMAScriptPassParser.RULE_lexicalBinding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this.bindingIdentifier();
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 650;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBinding_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalBinding_In;
    return this;
}

LexicalBinding_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBinding_InContext.prototype.constructor = LexicalBinding_InContext;

LexicalBinding_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBinding_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

LexicalBinding_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalBinding_In(this);
	}
};

LexicalBinding_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalBinding_In(this);
	}
};




ECMAScriptPassParser.LexicalBinding_InContext = LexicalBinding_InContext;

ECMAScriptPassParser.prototype.lexicalBinding_In = function() {

    var localctx = new LexicalBinding_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ECMAScriptPassParser.RULE_lexicalBinding_In);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.bindingIdentifier();
        this.state = 655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 654;
            this.initializer_In();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.hoistableDeclaration = function() {
    return this.getTypedRuleContext(HoistableDeclarationContext,0);
};

DeclarationContext.prototype.lexicalDeclaration_In = function() {
    return this.getTypedRuleContext(LexicalDeclaration_InContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDeclaration(this);
	}
};




ECMAScriptPassParser.DeclarationContext = DeclarationContext;

ECMAScriptPassParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ECMAScriptPassParser.RULE_declaration);
    try {
        this.state = 659;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.hoistableDeclaration();
            break;
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Let:
            this.enterOuterAlt(localctx, 2);
            this.state = 658;
            this.lexicalDeclaration_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_hoistableDeclaration;
    return this;
}

HoistableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclarationContext.prototype.constructor = HoistableDeclarationContext;

HoistableDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

HoistableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterHoistableDeclaration(this);
	}
};

HoistableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitHoistableDeclaration(this);
	}
};




ECMAScriptPassParser.HoistableDeclarationContext = HoistableDeclarationContext;

ECMAScriptPassParser.prototype.hoistableDeclaration = function() {

    var localctx = new HoistableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECMAScriptPassParser.RULE_hoistableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.functionDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(ECMAScriptPassParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

WithStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitWithStatement(this);
	}
};




ECMAScriptPassParser.WithStatementContext = WithStatementContext;

ECMAScriptPassParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ECMAScriptPassParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this.match(ECMAScriptPassParser.With);
        this.state = 664;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 665;
        this.expression_In();
        this.state = 666;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 667;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

LabelledStatementContext.prototype.labelledItem = function() {
    return this.getTypedRuleContext(LabelledItemContext,0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelledStatement(this);
	}
};




ECMAScriptPassParser.LabelledStatementContext = LabelledStatementContext;

ECMAScriptPassParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECMAScriptPassParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this.labelIdentifier();
        this.state = 670;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 671;
        this.labelledItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelledItem;
    return this;
}

LabelledItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledItemContext.prototype.constructor = LabelledItemContext;

LabelledItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledItemContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

LabelledItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelledItem(this);
	}
};

LabelledItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelledItem(this);
	}
};




ECMAScriptPassParser.LabelledItemContext = LabelledItemContext;

ECMAScriptPassParser.prototype.labelledItem = function() {

    var localctx = new LabelledItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECMAScriptPassParser.RULE_labelledItem);
    try {
        this.state = 675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 673;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 674;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelIdentifier;
    return this;
}

LabelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelIdentifierContext.prototype.constructor = LabelIdentifierContext;

LabelIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabelIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

LabelIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

LabelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelIdentifier(this);
	}
};




ECMAScriptPassParser.LabelIdentifierContext = LabelIdentifierContext;

ECMAScriptPassParser.prototype.labelIdentifier = function() {

    var localctx = new LabelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECMAScriptPassParser.RULE_labelIdentifier);
    try {
        this.state = 680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 677;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 678;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 679;
            this.match(ECMAScriptPassParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptPassParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSwitchStatement(this);
	}
};




ECMAScriptPassParser.SwitchStatementContext = SwitchStatementContext;

ECMAScriptPassParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECMAScriptPassParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(ECMAScriptPassParser.Switch);
        this.state = 683;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 684;
        this.expression_In();
        this.state = 685;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 686;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseBlock(this);
	}
};

CaseBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseBlock(this);
	}
};




ECMAScriptPassParser.CaseBlockContext = CaseBlockContext;

ECMAScriptPassParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECMAScriptPassParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.state = 703;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 688;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 689;
                this.caseClauses();
            }

            this.state = 692;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 693;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 694;
                this.caseClauses();
            }

            this.state = 697;
            this.defaultClause();
            this.state = 699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 698;
                this.caseClauses();
            }

            this.state = 701;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseClauses(this);
	}
};

CaseClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseClauses(this);
	}
};




ECMAScriptPassParser.CaseClausesContext = CaseClausesContext;

ECMAScriptPassParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECMAScriptPassParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 705;
            this.caseClause();
            this.state = 708; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptPassParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(ECMAScriptPassParser.Case, 0);
};

CaseClauseContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseClause(this);
	}
};

CaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseClause(this);
	}
};




ECMAScriptPassParser.CaseClauseContext = CaseClauseContext;

ECMAScriptPassParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECMAScriptPassParser.RULE_caseClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.match(ECMAScriptPassParser.Case);
        this.state = 711;
        this.expression_In();
        this.state = 712;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Break - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)) | (1 << (ECMAScriptPassParser.With - 67)) | (1 << (ECMAScriptPassParser.Yield - 67)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.StringLiteral - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 713;
            this.statementList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(ECMAScriptPassParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDefaultClause(this);
	}
};

DefaultClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDefaultClause(this);
	}
};




ECMAScriptPassParser.DefaultClauseContext = DefaultClauseContext;

ECMAScriptPassParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECMAScriptPassParser.RULE_defaultClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 716;
        this.match(ECMAScriptPassParser.Default);
        this.state = 717;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Break - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)) | (1 << (ECMAScriptPassParser.With - 67)) | (1 << (ECMAScriptPassParser.Yield - 67)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.StringLiteral - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 718;
            this.statementList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.Do = function() {
    return this.getToken(ECMAScriptPassParser.Do, 0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptPassParser.While, 0);
};

IterationStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

IterationStatementContext.prototype.expression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_InContext);
    } else {
        return this.getTypedRuleContext(Expression_InContext,i);
    }
};

IterationStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

IterationStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptPassParser.For, 0);
};

IterationStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.SemiColon);
    } else {
        return this.getToken(ECMAScriptPassParser.SemiColon, i);
    }
};


IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

IterationStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

IterationStatementContext.prototype.lexicalDeclaration = function() {
    return this.getTypedRuleContext(LexicalDeclarationContext,0);
};

IterationStatementContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

IterationStatementContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};

IterationStatementContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIterationStatement(this);
	}
};




ECMAScriptPassParser.IterationStatementContext = IterationStatementContext;

ECMAScriptPassParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECMAScriptPassParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 721;
            this.match(ECMAScriptPassParser.Do);
            this.state = 722;
            this.statement();
            this.state = 723;
            this.match(ECMAScriptPassParser.While);
            this.state = 724;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 725;
            this.expression_In();
            this.state = 726;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 727;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 729;
            this.match(ECMAScriptPassParser.While);
            this.state = 730;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 731;
            this.expression_In();
            this.state = 732;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 733;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 735;
            this.match(ECMAScriptPassParser.For);
            this.state = 736;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 737;
                this.expression();
            }

            this.state = 740;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 742;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 741;
                this.expression_In();
            }

            this.state = 744;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 745;
                this.expression_In();
            }

            this.state = 748;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 749;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 750;
            this.match(ECMAScriptPassParser.For);
            this.state = 751;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 752;
            this.match(ECMAScriptPassParser.Var);
            this.state = 753;
            this.variableDeclarationList();
            this.state = 754;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 755;
                this.expression_In();
            }

            this.state = 758;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 759;
                this.expression_In();
            }

            this.state = 762;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 763;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 765;
            this.match(ECMAScriptPassParser.For);
            this.state = 766;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 767;
            this.lexicalDeclaration();
            this.state = 769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 768;
                this.expression_In();
            }

            this.state = 771;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
                this.state = 772;
                this.expression_In();
            }

            this.state = 775;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 776;
            this.statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 778;
            this.match(ECMAScriptPassParser.For);
            this.state = 779;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 780;
            this.leftHandSideExpression();
            this.state = 781;
            this.match(ECMAScriptPassParser.In);
            this.state = 782;
            this.expression_In();
            this.state = 783;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 784;
            this.statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 786;
            this.match(ECMAScriptPassParser.For);
            this.state = 787;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 788;
            this.match(ECMAScriptPassParser.Var);
            this.state = 789;
            this.forBinding();
            this.state = 790;
            this.match(ECMAScriptPassParser.In);
            this.state = 791;
            this.expression_In();
            this.state = 792;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 793;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

ForDeclarationContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

ForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterForDeclaration(this);
	}
};

ForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitForDeclaration(this);
	}
};




ECMAScriptPassParser.ForDeclarationContext = ForDeclarationContext;

ECMAScriptPassParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECMAScriptPassParser.RULE_forDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.letOrConst();
        this.state = 798;
        this.forBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_forBinding;
    return this;
}

ForBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForBindingContext.prototype.constructor = ForBindingContext;

ForBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ForBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterForBinding(this);
	}
};

ForBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitForBinding(this);
	}
};




ECMAScriptPassParser.ForBindingContext = ForBindingContext;

ECMAScriptPassParser.prototype.forBinding = function() {

    var localctx = new ForBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECMAScriptPassParser.RULE_forBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(ECMAScriptPassParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

IfStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(ECMAScriptPassParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIfStatement(this);
	}
};




ECMAScriptPassParser.IfStatementContext = IfStatementContext;

ECMAScriptPassParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECMAScriptPassParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 802;
        this.match(ECMAScriptPassParser.If);
        this.state = 803;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 804;
        this.expression_In();
        this.state = 805;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 806;
        this.statement();
        this.state = 809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 807;
            this.match(ECMAScriptPassParser.Else);
            this.state = 808;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_breakableStatement;
    return this;
}

BreakableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakableStatementContext.prototype.constructor = BreakableStatementContext;

BreakableStatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

BreakableStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

BreakableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBreakableStatement(this);
	}
};

BreakableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBreakableStatement(this);
	}
};




ECMAScriptPassParser.BreakableStatementContext = BreakableStatementContext;

ECMAScriptPassParser.prototype.breakableStatement = function() {

    var localctx = new BreakableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECMAScriptPassParser.RULE_breakableStatement);
    try {
        this.state = 813;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 811;
            this.iterationStatement();
            break;
        case ECMAScriptPassParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this.switchStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptPassParser.Continue, 0);
};

ContinueStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitContinueStatement(this);
	}
};




ECMAScriptPassParser.ContinueStatementContext = ContinueStatementContext;

ECMAScriptPassParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECMAScriptPassParser.RULE_continueStatement);
    try {
        this.state = 821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 815;
            this.match(ECMAScriptPassParser.Continue);
            this.state = 816;
            this.labelIdentifier();
            this.state = 817;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 819;
            this.match(ECMAScriptPassParser.Continue);
            this.state = 820;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(ECMAScriptPassParser.Break, 0);
};

BreakStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBreakStatement(this);
	}
};




ECMAScriptPassParser.BreakStatementContext = BreakStatementContext;

ECMAScriptPassParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECMAScriptPassParser.RULE_breakStatement);
    try {
        this.state = 829;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 823;
            this.match(ECMAScriptPassParser.Break);
            this.state = 824;
            this.labelIdentifier();
            this.state = 825;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 827;
            this.match(ECMAScriptPassParser.Break);
            this.state = 828;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBlockStatement(this);
	}
};




ECMAScriptPassParser.BlockStatementContext = BlockStatementContext;

ECMAScriptPassParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECMAScriptPassParser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBlock(this);
	}
};




ECMAScriptPassParser.BlockContext = BlockContext;

ECMAScriptPassParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECMAScriptPassParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Break - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)) | (1 << (ECMAScriptPassParser.With - 67)) | (1 << (ECMAScriptPassParser.Yield - 67)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.StringLiteral - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 834;
            this.statementList();
        }

        this.state = 837;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

VariableStatementContext.prototype.variableDeclarationList_In = function() {
    return this.getTypedRuleContext(VariableDeclarationList_InContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableStatement(this);
	}
};

VariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableStatement(this);
	}
};




ECMAScriptPassParser.VariableStatementContext = VariableStatementContext;

ECMAScriptPassParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECMAScriptPassParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.match(ECMAScriptPassParser.Var);
        this.state = 840;
        this.variableDeclarationList_In();
        this.state = 841;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclarationList(this);
	}
};




ECMAScriptPassParser.VariableDeclarationListContext = VariableDeclarationListContext;

ECMAScriptPassParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECMAScriptPassParser.RULE_variableDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 843;
        this.variableDeclaration();
        this.state = 848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 844;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 845;
            this.variableDeclaration();
            this.state = 850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclarationList_In;
    return this;
}

VariableDeclarationList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationList_InContext.prototype.constructor = VariableDeclarationList_InContext;

VariableDeclarationList_InContext.prototype.variableDeclaration_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaration_InContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaration_InContext,i);
    }
};

VariableDeclarationList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


VariableDeclarationList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclarationList_In(this);
	}
};

VariableDeclarationList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclarationList_In(this);
	}
};




ECMAScriptPassParser.VariableDeclarationList_InContext = VariableDeclarationList_InContext;

ECMAScriptPassParser.prototype.variableDeclarationList_In = function() {

    var localctx = new VariableDeclarationList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECMAScriptPassParser.RULE_variableDeclarationList_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.variableDeclaration_In();
        this.state = 856;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 852;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 853;
                this.variableDeclaration_In(); 
            }
            this.state = 858;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclarationContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclaration(this);
	}
};




ECMAScriptPassParser.VariableDeclarationContext = VariableDeclarationContext;

ECMAScriptPassParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECMAScriptPassParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this.bindingIdentifier();
        this.state = 861;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 860;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclaration_In;
    return this;
}

VariableDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaration_InContext.prototype.constructor = VariableDeclaration_InContext;

VariableDeclaration_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclaration_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

VariableDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclaration_In(this);
	}
};

VariableDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclaration_In(this);
	}
};




ECMAScriptPassParser.VariableDeclaration_InContext = VariableDeclaration_InContext;

ECMAScriptPassParser.prototype.variableDeclaration_In = function() {

    var localctx = new VariableDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECMAScriptPassParser.RULE_variableDeclaration_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this.bindingIdentifier();
        this.state = 865;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 864;
            this.initializer_In();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

FunctionDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ECMAScriptPassParser.FunctionDeclarationContext = FunctionDeclarationContext;

ECMAScriptPassParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECMAScriptPassParser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this.match(ECMAScriptPassParser.Function);
        this.state = 868;
        this.bindingIdentifier();
        this.state = 869;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 870;
        this.formalParameters();
        this.state = 871;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 872;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 873;
        this.functionBody();
        this.state = 874;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionExpression;
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

FunctionExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

FunctionExpressionContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

FunctionExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

FunctionExpressionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

FunctionExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionExpression(this);
	}
};




ECMAScriptPassParser.FunctionExpressionContext = FunctionExpressionContext;

ECMAScriptPassParser.prototype.functionExpression = function() {

    var localctx = new FunctionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECMAScriptPassParser.RULE_functionExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(ECMAScriptPassParser.Function);
        this.state = 878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Await || _la===ECMAScriptPassParser.Yield || _la===ECMAScriptPassParser.IdentifierName) {
            this.state = 877;
            this.bindingIdentifier();
        }

        this.state = 880;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 881;
        this.formalParameters();
        this.state = 882;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 883;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 884;
        this.functionBody();
        this.state = 885;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueFormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_uniqueFormalParameters;
    return this;
}

UniqueFormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueFormalParametersContext.prototype.constructor = UniqueFormalParametersContext;

UniqueFormalParametersContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

UniqueFormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUniqueFormalParameters(this);
	}
};

UniqueFormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUniqueFormalParameters(this);
	}
};




ECMAScriptPassParser.UniqueFormalParametersContext = UniqueFormalParametersContext;

ECMAScriptPassParser.prototype.uniqueFormalParameters = function() {

    var localctx = new UniqueFormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECMAScriptPassParser.RULE_uniqueFormalParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameters(this);
	}
};




ECMAScriptPassParser.FormalParametersContext = FormalParametersContext;

ECMAScriptPassParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECMAScriptPassParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.state = 894;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.CloseParen:
            this.enterOuterAlt(localctx, 1);

            break;
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 2);
            this.state = 890;
            this.formalParameterList();
            this.state = 892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 891;
                this.match(ECMAScriptPassParser.Comma);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameterList(this);
	}
};




ECMAScriptPassParser.FormalParameterListContext = FormalParameterListContext;

ECMAScriptPassParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECMAScriptPassParser.RULE_formalParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this.formalParameter();
        this.state = 901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,85,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 897;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 898;
                this.formalParameter(); 
            }
            this.state = 903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,85,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameter(this);
	}
};




ECMAScriptPassParser.FormalParameterContext = FormalParameterContext;

ECMAScriptPassParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECMAScriptPassParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.functionStatementList = function() {
    return this.getTypedRuleContext(FunctionStatementListContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionBody(this);
	}
};




ECMAScriptPassParser.FunctionBodyContext = FunctionBodyContext;

ECMAScriptPassParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECMAScriptPassParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.functionStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionStatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionStatementList;
    return this;
}

FunctionStatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStatementListContext.prototype.constructor = FunctionStatementListContext;

FunctionStatementListContext.prototype.statementList_Return = function() {
    return this.getTypedRuleContext(StatementList_ReturnContext,0);
};

FunctionStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionStatementList(this);
	}
};

FunctionStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionStatementList(this);
	}
};




ECMAScriptPassParser.FunctionStatementListContext = FunctionStatementListContext;

ECMAScriptPassParser.prototype.functionStatementList = function() {

    var localctx = new FunctionStatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECMAScriptPassParser.RULE_functionStatementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.PlusPlus) | (1 << ECMAScriptPassParser.MinusMinus))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.Not - 35)) | (1 << (ECMAScriptPassParser.BitNot - 35)) | (1 << (ECMAScriptPassParser.NullLiteral - 35)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 35)) | (1 << (ECMAScriptPassParser.Await - 35)) | (1 << (ECMAScriptPassParser.Const - 35)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ECMAScriptPassParser.Delete - 70)) | (1 << (ECMAScriptPassParser.Function - 70)) | (1 << (ECMAScriptPassParser.New - 70)) | (1 << (ECMAScriptPassParser.Return - 70)) | (1 << (ECMAScriptPassParser.This - 70)) | (1 << (ECMAScriptPassParser.Typeof - 70)) | (1 << (ECMAScriptPassParser.Void - 70)) | (1 << (ECMAScriptPassParser.Yield - 70)) | (1 << (ECMAScriptPassParser.Let - 70)) | (1 << (ECMAScriptPassParser.StringLiteral - 70)))) !== 0) || _la===ECMAScriptPassParser.IdentifierName) {
            this.state = 908;
            this.statementList_Return();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.propertySetParameterList = function() {
    return this.getTypedRuleContext(PropertySetParameterListContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMethodDefinition(this);
	}
};




ECMAScriptPassParser.MethodDefinitionContext = MethodDefinitionContext;

ECMAScriptPassParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECMAScriptPassParser.RULE_methodDefinition);
    try {
        this.state = 936;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.Enum:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 911;
            this.propertyName();
            this.state = 912;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 913;
            this.uniqueFormalParameters();
            this.state = 914;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 915;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 916;
            this.functionBody();
            this.state = 917;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;
        case ECMAScriptPassParser.T__0:
            this.enterOuterAlt(localctx, 2);
            this.state = 919;
            this.match(ECMAScriptPassParser.T__0);
            this.state = 920;
            this.propertyName();
            this.state = 921;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 922;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 923;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 924;
            this.functionBody();
            this.state = 925;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;
        case ECMAScriptPassParser.T__1:
            this.enterOuterAlt(localctx, 3);
            this.state = 927;
            this.match(ECMAScriptPassParser.T__1);
            this.state = 928;
            this.propertyName();
            this.state = 929;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 930;
            this.propertySetParameterList();
            this.state = 931;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 932;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 933;
            this.functionBody();
            this.state = 934;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySetParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertySetParameterList;
    return this;
}

PropertySetParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetParameterListContext.prototype.constructor = PropertySetParameterListContext;

PropertySetParameterListContext.prototype.formalParameter = function() {
    return this.getTypedRuleContext(FormalParameterContext,0);
};

PropertySetParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertySetParameterList(this);
	}
};

PropertySetParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertySetParameterList(this);
	}
};




ECMAScriptPassParser.PropertySetParameterListContext = PropertySetParameterListContext;

ECMAScriptPassParser.prototype.propertySetParameterList = function() {

    var localctx = new PropertySetParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECMAScriptPassParser.RULE_propertySetParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this.formalParameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.futureReservedWord = function() {
    return this.getTypedRuleContext(FutureReservedWordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptPassParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitReservedWord(this);
	}
};




ECMAScriptPassParser.ReservedWordContext = ReservedWordContext;

ECMAScriptPassParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ECMAScriptPassParser.RULE_reservedWord);
    try {
        this.state = 944;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 1);
            this.state = 940;
            this.keyword();
            break;
        case ECMAScriptPassParser.Enum:
            this.enterOuterAlt(localctx, 2);
            this.state = 941;
            this.futureReservedWord();
            break;
        case ECMAScriptPassParser.NullLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 942;
            this.match(ECMAScriptPassParser.NullLiteral);
            break;
        case ECMAScriptPassParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 943;
            this.match(ECMAScriptPassParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

KeywordContext.prototype.Break = function() {
    return this.getToken(ECMAScriptPassParser.Break, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(ECMAScriptPassParser.Case, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptPassParser.Catch, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(ECMAScriptPassParser.Const, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptPassParser.Continue, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptPassParser.Debugger, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(ECMAScriptPassParser.Default, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptPassParser.Delete, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(ECMAScriptPassParser.Do, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(ECMAScriptPassParser.Else, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(ECMAScriptPassParser.Export, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptPassParser.Extends, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptPassParser.Finally, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(ECMAScriptPassParser.For, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(ECMAScriptPassParser.If, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(ECMAScriptPassParser.Import, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(ECMAScriptPassParser.Return, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(ECMAScriptPassParser.Super, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptPassParser.Switch, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(ECMAScriptPassParser.This, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptPassParser.Throw, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(ECMAScriptPassParser.Try, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptPassParser.Typeof, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(ECMAScriptPassParser.Void, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(ECMAScriptPassParser.While, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(ECMAScriptPassParser.With, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitKeyword(this);
	}
};




ECMAScriptPassParser.KeywordContext = KeywordContext;

ECMAScriptPassParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ECMAScriptPassParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (ECMAScriptPassParser.Await - 61)) | (1 << (ECMAScriptPassParser.Break - 61)) | (1 << (ECMAScriptPassParser.Case - 61)) | (1 << (ECMAScriptPassParser.Catch - 61)) | (1 << (ECMAScriptPassParser.Class - 61)) | (1 << (ECMAScriptPassParser.Const - 61)) | (1 << (ECMAScriptPassParser.Continue - 61)) | (1 << (ECMAScriptPassParser.Debugger - 61)) | (1 << (ECMAScriptPassParser.Default - 61)) | (1 << (ECMAScriptPassParser.Delete - 61)) | (1 << (ECMAScriptPassParser.Do - 61)) | (1 << (ECMAScriptPassParser.Else - 61)) | (1 << (ECMAScriptPassParser.Export - 61)) | (1 << (ECMAScriptPassParser.Extends - 61)) | (1 << (ECMAScriptPassParser.Finally - 61)) | (1 << (ECMAScriptPassParser.For - 61)) | (1 << (ECMAScriptPassParser.Function - 61)) | (1 << (ECMAScriptPassParser.If - 61)) | (1 << (ECMAScriptPassParser.Import - 61)) | (1 << (ECMAScriptPassParser.In - 61)) | (1 << (ECMAScriptPassParser.Instanceof - 61)) | (1 << (ECMAScriptPassParser.New - 61)) | (1 << (ECMAScriptPassParser.Return - 61)) | (1 << (ECMAScriptPassParser.Super - 61)) | (1 << (ECMAScriptPassParser.Switch - 61)) | (1 << (ECMAScriptPassParser.This - 61)) | (1 << (ECMAScriptPassParser.Throw - 61)) | (1 << (ECMAScriptPassParser.Try - 61)) | (1 << (ECMAScriptPassParser.Typeof - 61)) | (1 << (ECMAScriptPassParser.Var - 61)) | (1 << (ECMAScriptPassParser.Void - 61)) | (1 << (ECMAScriptPassParser.While - 61)))) !== 0) || _la===ECMAScriptPassParser.With || _la===ECMAScriptPassParser.Yield)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FutureReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_futureReservedWord;
    return this;
}

FutureReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FutureReservedWordContext.prototype.constructor = FutureReservedWordContext;

FutureReservedWordContext.prototype.Enum = function() {
    return this.getToken(ECMAScriptPassParser.Enum, 0);
};

FutureReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFutureReservedWord(this);
	}
};

FutureReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFutureReservedWord(this);
	}
};




ECMAScriptPassParser.FutureReservedWordContext = FutureReservedWordContext;

ECMAScriptPassParser.prototype.futureReservedWord = function() {

    var localctx = new FutureReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECMAScriptPassParser.RULE_futureReservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        this.match(ECMAScriptPassParser.Enum);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptPassParser.IdentifierName, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifierName(this);
	}
};

IdentifierNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifierName(this);
	}
};




ECMAScriptPassParser.IdentifierNameContext = IdentifierNameContext;

ECMAScriptPassParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ECMAScriptPassParser.RULE_identifierName);
    try {
        this.state = 952;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 950;
            this.match(ECMAScriptPassParser.IdentifierName);
            break;
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.Enum:
            this.enterOuterAlt(localctx, 2);
            this.state = 951;
            this.reservedWord();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ECMAScriptPassParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.eos_sempred(localctx, predIndex);
	case 12:
			return this.elementList_sempred(localctx, predIndex);
	case 20:
			return this.callExpression_sempred(localctx, predIndex);
	case 25:
			return this.memberExpression_sempred(localctx, predIndex);
	case 28:
			return this.assignmentExpression_sempred(localctx, predIndex);
	case 29:
			return this.assignmentExpression_In_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ECMAScriptPassParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.isLineTerminatorEquivalent();
		case 1:
			return this._input.LT(1).type === ECMAScriptPassParser.CloseBrace;
		case 2:
			return this._input.LT(1).type === ECMAScriptPassParser.EOF;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.elementList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.callExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 2);
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.memberExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 3);
		case 8:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 16);
		case 10:
			return this.precpred(this._ctx, 15);
		case 11:
			return this.precpred(this._ctx, 14);
		case 12:
			return this.precpred(this._ctx, 13);
		case 13:
			return this.precpred(this._ctx, 12);
		case 14:
			return this.precpred(this._ctx, 11);
		case 15:
			return this.precpred(this._ctx, 10);
		case 16:
			return this.precpred(this._ctx, 9);
		case 17:
			return this.precpred(this._ctx, 8);
		case 18:
			return this.precpred(this._ctx, 7);
		case 19:
			return this.precpred(this._ctx, 6);
		case 20:
			return this.precpred(this._ctx, 5);
		case 21:
			return this.precpred(this._ctx, 4);
		case 22:
			return this.precpred(this._ctx, 18);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_In_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 23:
			return this.precpred(this._ctx, 17);
		case 24:
			return this.precpred(this._ctx, 16);
		case 25:
			return this.precpred(this._ctx, 15);
		case 26:
			return this.precpred(this._ctx, 14);
		case 27:
			return this.precpred(this._ctx, 13);
		case 28:
			return this.precpred(this._ctx, 12);
		case 29:
			return this.precpred(this._ctx, 11);
		case 30:
			return this.precpred(this._ctx, 10);
		case 31:
			return this.precpred(this._ctx, 9);
		case 32:
			return this.precpred(this._ctx, 8);
		case 33:
			return this.precpred(this._ctx, 7);
		case 34:
			return this.precpred(this._ctx, 6);
		case 35:
			return this.precpred(this._ctx, 5);
		case 36:
			return this.precpred(this._ctx, 4);
		case 37:
			return this.precpred(this._ctx, 19);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ECMAScriptPassParser = ECMAScriptPassParser;
