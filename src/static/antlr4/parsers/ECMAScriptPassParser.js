// Generated from /home/jason/Projets/ecmascript-parser/src/static/antlr4/grammars/ECMAScriptPass.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ECMAScriptPassListener = require('./ECMAScriptPassListener').ECMAScriptPassListener;
var grammarFileName = "ECMAScriptPass.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003{\u089c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t",
    "\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004",
    "\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t",
    "\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t\u0097\u0004",
    "\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004\u009b\t",
    "\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t\u009e\u0004",
    "\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004\u00a2\t",
    "\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t\u00a5\u0004",
    "\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004\u00a9\t",
    "\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t\u00ac\u0004",
    "\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004\u00b0\t",
    "\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t\u00b3\u0004",
    "\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004\u00b7\t",
    "\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t\u00ba\u0004",
    "\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004\u00be\t",
    "\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t\u00c1\u0004",
    "\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004\u00c5\t",
    "\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t\u00c8\u0004",
    "\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004\u00cc\t",
    "\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t\u00cf\u0004",
    "\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u01a9\n\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u01af\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u01b4\n\u0004\f\u0004",
    "\u000e\u0004\u01b7\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u01bc\n\u0005\f\u0005\u000e\u0005\u01bf\u000b\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u01c4\n\u0006\f\u0006\u000e\u0006",
    "\u01c7\u000b\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u01cd\n\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u01d2\n\b\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u01d7\n\t\u0003\n\u0003\n\u0005\n\u01db\n",
    "\n\u0003\u000b\u0003\u000b\u0005\u000b\u01df\n\u000b\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u01ea",
    "\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u01f3\n\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u01fa\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u0200\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0205\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u020b\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0215\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0220",
    "\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0224\n\u0013\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u0228\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u0233\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0237\n\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u023b\n\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u023f\n\u0015\u0003\u0015\u0005\u0015",
    "\u0242\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0247",
    "\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u024d\n\u0015\u0003\u0015\u0007\u0015\u0250\n\u0015\f\u0015\u000e\u0015",
    "\u0253\u000b\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u0257\n\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u025b\n\u0016\u0003\u0016\u0005",
    "\u0016\u025e\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u0263\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u0269\n\u0016\u0003\u0016\u0007\u0016\u026c\n\u0016\f\u0016\u000e",
    "\u0016\u026f\u000b\u0016\u0003\u0017\u0006\u0017\u0272\n\u0017\r\u0017",
    "\u000e\u0017\u0273\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u0281\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0285\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u028c\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u0290\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0295",
    "\n\u001c\f\u001c\u000e\u001c\u0298\u000b\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0007\u001d\u029d\n\u001d\f\u001d\u000e\u001d\u02a0\u000b",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u02a8\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u02b0\n\u001f\u0003",
    " \u0003 \u0005 \u02b4\n \u0003!\u0003!\u0005!\u02b8\n!\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u02bd\n\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u02cb\n%\f%\u000e",
    "%\u02ce\u000b%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0007&\u02d8\n&\f&\u000e&\u02db\u000b&\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0005\'\u02e2\n\'\u0003\'\u0003\'\u0005\'\u02e6\n\'\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0005(\u02ed\n(\u0003(\u0003(\u0005(\u02f1",
    "\n(\u0003)\u0005)\u02f4\n)\u0003)\u0003)\u0003)\u0005)\u02f9\n)\u0003",
    ")\u0007)\u02fc\n)\f)\u000e)\u02ff\u000b)\u0003*\u0005*\u0302\n*\u0003",
    "*\u0003*\u0003*\u0005*\u0307\n*\u0003*\u0007*\u030a\n*\f*\u000e*\u030d",
    "\u000b*\u0003+\u0003+\u0005+\u0311\n+\u0003,\u0003,\u0005,\u0315\n,",
    "\u0003-\u0003-\u0003-\u0005-\u031a\n-\u0003.\u0003.\u0003.\u0005.\u031f",
    "\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0327\n/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007",
    "/\u0333\n/\f/\u000e/\u0336\u000b/\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00050\u033e\n0\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00070\u034a\n0\f0\u000e0\u034d\u000b0\u0003",
    "1\u00031\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u00034\u0003",
    "4\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u0361\n5\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u039c\n5\f5\u000e",
    "5\u039f\u000b5\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u03a9\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0007",
    "6\u03e4\n6\f6\u000e6\u03e7\u000b6\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u03f4\n7\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u0432",
    "\n7\f7\u000e7\u0435\u000b7\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00058\u0440\n8\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00078\u047e\n8\f8\u000e8\u0481",
    "\u000b8\u00039\u00039\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003",
    "=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u049e",
    "\n@\u0003A\u0003A\u0005A\u04a2\nA\u0003B\u0003B\u0003B\u0005B\u04a7",
    "\nB\u0003C\u0006C\u04aa\nC\rC\u000eC\u04ab\u0003D\u0006D\u04af\nD\r",
    "D\u000eD\u04b0\u0003E\u0006E\u04b4\nE\rE\u000eE\u04b5\u0003F\u0003F",
    "\u0005F\u04ba\nF\u0003G\u0003G\u0005G\u04be\nG\u0003H\u0003H\u0005H",
    "\u04c2\nH\u0003I\u0003I\u0003J\u0003J\u0005J\u04c8\nJ\u0003J\u0003J",
    "\u0003K\u0003K\u0005K\u04ce\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003",
    "M\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0005O\u04dd\nO\u0005",
    "O\u04df\nO\u0003P\u0003P\u0003P\u0005P\u04e4\nP\u0005P\u04e6\nP\u0003",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003S\u0005S\u04f0\nS\u0003",
    "T\u0003T\u0005T\u04f4\nT\u0003U\u0003U\u0005U\u04f8\nU\u0003V\u0003",
    "V\u0005V\u04fc\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0005W\u0509\nW\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u0516\nX\u0003Y\u0003",
    "Y\u0005Y\u051a\nY\u0003Y\u0005Y\u051d\nY\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0528\nY\u0003Y\u0005Y\u052b",
    "\nY\u0003Y\u0003Y\u0005Y\u052f\nY\u0003Z\u0003Z\u0005Z\u0533\nZ\u0003",
    "Z\u0005Z\u0536\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0541\nZ\u0003Z\u0005Z\u0544\nZ\u0003Z\u0003Z\u0005",
    "Z\u0548\nZ\u0003[\u0003[\u0003[\u0007[\u054d\n[\f[\u000e[\u0550\u000b",
    "[\u0003\\\u0003\\\u0003\\\u0007\\\u0555\n\\\f\\\u000e\\\u0558\u000b",
    "\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u055f\n]\u0003^\u0003^",
    "\u0003^\u0003^\u0003^\u0005^\u0566\n^\u0003_\u0003_\u0003_\u0003_\u0003",
    "`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003",
    "c\u0003c\u0003c\u0007c\u0579\nc\fc\u000ec\u057c\u000bc\u0003d\u0003",
    "d\u0003d\u0007d\u0581\nd\fd\u000ed\u0584\u000bd\u0003e\u0003e\u0003",
    "e\u0007e\u0589\ne\fe\u000ee\u058c\u000be\u0003f\u0003f\u0005f\u0590",
    "\nf\u0003f\u0003f\u0003f\u0005f\u0595\nf\u0003g\u0003g\u0005g\u0599",
    "\ng\u0003g\u0003g\u0003g\u0005g\u059e\ng\u0003h\u0003h\u0005h\u05a2",
    "\nh\u0003h\u0003h\u0003h\u0005h\u05a7\nh\u0003i\u0003i\u0003i\u0005",
    "i\u05ac\ni\u0003j\u0003j\u0003j\u0005j\u05b1\nj\u0003k\u0003k\u0005",
    "k\u05b5\nk\u0003l\u0003l\u0005l\u05b9\nl\u0003m\u0003m\u0003m\u0003",
    "m\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0005n\u05cc\nn\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003p\u0003p\u0003p\u0003q\u0003q\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0005t\u05e5",
    "\nt\u0003u\u0003u\u0003u\u0005u\u05ea\nu\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003w\u0003w\u0005w\u05f4\nw\u0003w\u0003w\u0003w\u0005",
    "w\u05f9\nw\u0003w\u0003w\u0005w\u05fd\nw\u0003w\u0003w\u0005w\u0601",
    "\nw\u0003x\u0006x\u0604\nx\rx\u000ex\u0605\u0003y\u0003y\u0003y\u0003",
    "y\u0005y\u060c\ny\u0003z\u0003z\u0003z\u0005z\u0611\nz\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u0624\n{\u0003{\u0003{\u0005",
    "{\u0628\n{\u0003{\u0003{\u0005{\u062c\n{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0005{\u0636\n{\u0003{\u0003{\u0005{\u063a",
    "\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u0643\n",
    "{\u0003{\u0003{\u0005{\u0647\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u067e\n{\u0003",
    "|\u0003|\u0003|\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0005~\u068c\n~\u0003\u007f\u0003\u007f\u0005\u007f\u0690\n",
    "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0005\u0080\u0698\n\u0080\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u06a0\n\u0081\u0003",
    "\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u06a6\n\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u06b1\n\u0085\f\u0085",
    "\u000e\u0085\u06b4\u000b\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0007",
    "\u0086\u06b9\n\u0086\f\u0086\u000e\u0086\u06bc\u000b\u0086\u0003\u0087",
    "\u0003\u0087\u0005\u0087\u06c0\n\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0005\u0087\u06c5\n\u0087\u0003\u0088\u0003\u0088\u0005\u0088",
    "\u06c9\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u06ce",
    "\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a",
    "\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u06e4\n\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0005\u008e\u06f7",
    "\n\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003\u008f\u0005\u008f",
    "\u06fd\n\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0005\u0090\u0702",
    "\n\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0706\n\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0091\u0005\u0091\u070b\n\u0091\u0003\u0091\u0003",
    "\u0091\u0005\u0091\u070f\n\u0091\u0003\u0091\u0003\u0091\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0094",
    "\u0003\u0094\u0003\u0095\u0003\u0095\u0003\u0096\u0006\u0096\u071e\n",
    "\u0096\r\u0096\u000e\u0096\u071f\u0003\u0097\u0006\u0097\u0723\n\u0097",
    "\r\u0097\u000e\u0097\u0724\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0005\u0098\u072b\n\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u0731\n\u0099\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u074a\n\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009d\u0003\u009d\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0005\u009f\u075b\n\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0761\n\u009f\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0767\n\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0005\u00a0\u076d\n\u00a0",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0007\u00a1\u0772\n\u00a1\f\u00a1",
    "\u000e\u00a1\u0775\u000b\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007",
    "\u00a2\u077a\n\u00a2\f\u00a2\u000e\u00a2\u077d\u000b\u00a2\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0005\u00a7\u0789\n\u00a7\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0005\u00aa\u0790",
    "\n\u00aa\u0003\u00ab\u0005\u00ab\u0793\n\u00ab\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad",
    "\u079c\n\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0005\u00ae\u07a3\n\u00ae\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af",
    "\u07bf\n\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u07da\n\u00b0\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0005\u00b3",
    "\u07e8\n\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0005\u00b5\u07ed",
    "\n\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0006\u00b7\u07f2\n\u00b7",
    "\r\u00b7\u000e\u00b7\u07f3\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005",
    "\u00b8\u07f9\n\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u0804\n\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u080d\n\u00ba\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u081a\n",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u081e\n\u00bd\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0007\u00bf",
    "\u0826\n\u00bf\f\u00bf\u000e\u00bf\u0829\u000b\u00bf\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0830\n\u00c0",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u0850\n\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0005\u00c4\u0857\n\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0005\u00c4\u085b\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007",
    "\u00c5\u0860\n\u00c5\f\u00c5\u000e\u00c5\u0863\u000b\u00c5\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0005\u00c7\u086c\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0005\u00c8\u0873\n\u00c8\u0003\u00c9\u0005\u00c9",
    "\u0876\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0005\u00ca\u087b",
    "\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0006\u00cb",
    "\u0881\n\u00cb\r\u00cb\u000e\u00cb\u0882\u0003\u00cc\u0003\u00cc\u0006",
    "\u00cc\u0887\n\u00cc\r\u00cc\u000e\u00cc\u0888\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0005\u00cd\u088f\n\u00cd\u0003\u00ce\u0003",
    "\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0005\u00d1\u089a\n\u00d1\u0003\u00d1\u0002\f(*H",
    "J\\^hjln\u00d2\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a",
    "\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122",
    "\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a",
    "\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152",
    "\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a",
    "\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182",
    "\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a",
    "\u019c\u019e\u01a0\u0002\u000e\u0005\u0002\u0007\u0007CDss\u0003\u0002",
    "#$\b\u0002\u001e\u001f#$+,NNaacc\u0004\u0002 !??\u0003\u0002\u001e\u001f",
    "\u0003\u0002%\'\u0003\u0002\u0016\u0019\u0003\u0002\u001a\u001d\u0004",
    "\u00022<@@\u0004\u0002JJoo\u0003\u0002Ef\u0003\u0002kr\u0002\u0926\u0002",
    "\u01a8\u0003\u0002\u0002\u0002\u0004\u01ae\u0003\u0002\u0002\u0002\u0006",
    "\u01b0\u0003\u0002\u0002\u0002\b\u01b8\u0003\u0002\u0002\u0002\n\u01c0",
    "\u0003\u0002\u0002\u0002\f\u01cc\u0003\u0002\u0002\u0002\u000e\u01d1",
    "\u0003\u0002\u0002\u0002\u0010\u01d6\u0003\u0002\u0002\u0002\u0012\u01da",
    "\u0003\u0002\u0002\u0002\u0014\u01de\u0003\u0002\u0002\u0002\u0016\u01e9",
    "\u0003\u0002\u0002\u0002\u0018\u01f2\u0003\u0002\u0002\u0002\u001a\u01f4",
    "\u0003\u0002\u0002\u0002\u001c\u01ff\u0003\u0002\u0002\u0002\u001e\u020a",
    "\u0003\u0002\u0002\u0002 \u020c\u0003\u0002\u0002\u0002\"\u020f\u0003",
    "\u0002\u0002\u0002$\u0223\u0003\u0002\u0002\u0002&\u0236\u0003\u0002",
    "\u0002\u0002(\u0241\u0003\u0002\u0002\u0002*\u025d\u0003\u0002\u0002",
    "\u0002,\u0271\u0003\u0002\u0002\u0002.\u0275\u0003\u0002\u0002\u0002",
    "0\u0278\u0003\u0002\u0002\u00022\u0284\u0003\u0002\u0002\u00024\u028f",
    "\u0003\u0002\u0002\u00026\u0291\u0003\u0002\u0002\u00028\u0299\u0003",
    "\u0002\u0002\u0002:\u02a7\u0003\u0002\u0002\u0002<\u02af\u0003\u0002",
    "\u0002\u0002>\u02b3\u0003\u0002\u0002\u0002@\u02b7\u0003\u0002\u0002",
    "\u0002B\u02bc\u0003\u0002\u0002\u0002D\u02be\u0003\u0002\u0002\u0002",
    "F\u02c0\u0003\u0002\u0002\u0002H\u02c2\u0003\u0002\u0002\u0002J\u02cf",
    "\u0003\u0002\u0002\u0002L\u02e5\u0003\u0002\u0002\u0002N\u02f0\u0003",
    "\u0002\u0002\u0002P\u02f3\u0003\u0002\u0002\u0002R\u0301\u0003\u0002",
    "\u0002\u0002T\u0310\u0003\u0002\u0002\u0002V\u0314\u0003\u0002\u0002",
    "\u0002X\u0319\u0003\u0002\u0002\u0002Z\u031e\u0003\u0002\u0002\u0002",
    "\\\u0326\u0003\u0002\u0002\u0002^\u033d\u0003\u0002\u0002\u0002`\u034e",
    "\u0003\u0002\u0002\u0002b\u0351\u0003\u0002\u0002\u0002d\u0354\u0003",
    "\u0002\u0002\u0002f\u0357\u0003\u0002\u0002\u0002h\u0360\u0003\u0002",
    "\u0002\u0002j\u03a8\u0003\u0002\u0002\u0002l\u03f3\u0003\u0002\u0002",
    "\u0002n\u043f\u0003\u0002\u0002\u0002p\u0482\u0003\u0002\u0002\u0002",
    "r\u0484\u0003\u0002\u0002\u0002t\u0486\u0003\u0002\u0002\u0002v\u0488",
    "\u0003\u0002\u0002\u0002x\u048a\u0003\u0002\u0002\u0002z\u048c\u0003",
    "\u0002\u0002\u0002|\u048e\u0003\u0002\u0002\u0002~\u049d\u0003\u0002",
    "\u0002\u0002\u0080\u04a1\u0003\u0002\u0002\u0002\u0082\u04a6\u0003\u0002",
    "\u0002\u0002\u0084\u04a9\u0003\u0002\u0002\u0002\u0086\u04ae\u0003\u0002",
    "\u0002\u0002\u0088\u04b3\u0003\u0002\u0002\u0002\u008a\u04b9\u0003\u0002",
    "\u0002\u0002\u008c\u04bd\u0003\u0002\u0002\u0002\u008e\u04c1\u0003\u0002",
    "\u0002\u0002\u0090\u04c3\u0003\u0002\u0002\u0002\u0092\u04c5\u0003\u0002",
    "\u0002\u0002\u0094\u04cb\u0003\u0002\u0002\u0002\u0096\u04d1\u0003\u0002",
    "\u0002\u0002\u0098\u04d4\u0003\u0002\u0002\u0002\u009a\u04d7\u0003\u0002",
    "\u0002\u0002\u009c\u04de\u0003\u0002\u0002\u0002\u009e\u04e5\u0003\u0002",
    "\u0002\u0002\u00a0\u04e7\u0003\u0002\u0002\u0002\u00a2\u04ea\u0003\u0002",
    "\u0002\u0002\u00a4\u04ed\u0003\u0002\u0002\u0002\u00a6\u04f1\u0003\u0002",
    "\u0002\u0002\u00a8\u04f7\u0003\u0002\u0002\u0002\u00aa\u04fb\u0003\u0002",
    "\u0002\u0002\u00ac\u0508\u0003\u0002\u0002\u0002\u00ae\u0515\u0003\u0002",
    "\u0002\u0002\u00b0\u052e\u0003\u0002\u0002\u0002\u00b2\u0547\u0003\u0002",
    "\u0002\u0002\u00b4\u0549\u0003\u0002\u0002\u0002\u00b6\u0551\u0003\u0002",
    "\u0002\u0002\u00b8\u055e\u0003\u0002\u0002\u0002\u00ba\u0565\u0003\u0002",
    "\u0002\u0002\u00bc\u0567\u0003\u0002\u0002\u0002\u00be\u056b\u0003\u0002",
    "\u0002\u0002\u00c0\u056f\u0003\u0002\u0002\u0002\u00c2\u0573\u0003\u0002",
    "\u0002\u0002\u00c4\u0575\u0003\u0002\u0002\u0002\u00c6\u057d\u0003\u0002",
    "\u0002\u0002\u00c8\u0585\u0003\u0002\u0002\u0002\u00ca\u0594\u0003\u0002",
    "\u0002\u0002\u00cc\u059d\u0003\u0002\u0002\u0002\u00ce\u05a6\u0003\u0002",
    "\u0002\u0002\u00d0\u05ab\u0003\u0002\u0002\u0002\u00d2\u05b0\u0003\u0002",
    "\u0002\u0002\u00d4\u05b4\u0003\u0002\u0002\u0002\u00d6\u05b8\u0003\u0002",
    "\u0002\u0002\u00d8\u05ba\u0003\u0002\u0002\u0002\u00da\u05cb\u0003\u0002",
    "\u0002\u0002\u00dc\u05cd\u0003\u0002\u0002\u0002\u00de\u05d3\u0003\u0002",
    "\u0002\u0002\u00e0\u05d6\u0003\u0002\u0002\u0002\u00e2\u05d8\u0003\u0002",
    "\u0002\u0002\u00e4\u05de\u0003\u0002\u0002\u0002\u00e6\u05e4\u0003\u0002",
    "\u0002\u0002\u00e8\u05e9\u0003\u0002\u0002\u0002\u00ea\u05eb\u0003\u0002",
    "\u0002\u0002\u00ec\u0600\u0003\u0002\u0002\u0002\u00ee\u0603\u0003\u0002",
    "\u0002\u0002\u00f0\u0607\u0003\u0002\u0002\u0002\u00f2\u060d\u0003\u0002",
    "\u0002\u0002\u00f4\u067d\u0003\u0002\u0002\u0002\u00f6\u067f\u0003\u0002",
    "\u0002\u0002\u00f8\u0682\u0003\u0002\u0002\u0002\u00fa\u0684\u0003\u0002",
    "\u0002\u0002\u00fc\u068f\u0003\u0002\u0002\u0002\u00fe\u0697\u0003\u0002",
    "\u0002\u0002\u0100\u069f\u0003\u0002\u0002\u0002\u0102\u06a1\u0003\u0002",
    "\u0002\u0002\u0104\u06a3\u0003\u0002\u0002\u0002\u0106\u06a9\u0003\u0002",
    "\u0002\u0002\u0108\u06ad\u0003\u0002\u0002\u0002\u010a\u06b5\u0003\u0002",
    "\u0002\u0002\u010c\u06c4\u0003\u0002\u0002\u0002\u010e\u06cd\u0003\u0002",
    "\u0002\u0002\u0110\u06cf\u0003\u0002\u0002\u0002\u0112\u06d8\u0003\u0002",
    "\u0002\u0002\u0114\u06e1\u0003\u0002\u0002\u0002\u0116\u06ec\u0003\u0002",
    "\u0002\u0002\u0118\u06f0\u0003\u0002\u0002\u0002\u011a\u06f4\u0003\u0002",
    "\u0002\u0002\u011c\u06fa\u0003\u0002\u0002\u0002\u011e\u0701\u0003\u0002",
    "\u0002\u0002\u0120\u070a\u0003\u0002\u0002\u0002\u0122\u0712\u0003\u0002",
    "\u0002\u0002\u0124\u0715\u0003\u0002\u0002\u0002\u0126\u0718\u0003\u0002",
    "\u0002\u0002\u0128\u071a\u0003\u0002\u0002\u0002\u012a\u071d\u0003\u0002",
    "\u0002\u0002\u012c\u0722\u0003\u0002\u0002\u0002\u012e\u072a\u0003\u0002",
    "\u0002\u0002\u0130\u0730\u0003\u0002\u0002\u0002\u0132\u0732\u0003\u0002",
    "\u0002\u0002\u0134\u073c\u0003\u0002\u0002\u0002\u0136\u0746\u0003\u0002",
    "\u0002\u0002\u0138\u0752\u0003\u0002\u0002\u0002\u013a\u0754\u0003\u0002",
    "\u0002\u0002\u013c\u0760\u0003\u0002\u0002\u0002\u013e\u076c\u0003\u0002",
    "\u0002\u0002\u0140\u076e\u0003\u0002\u0002\u0002\u0142\u0776\u0003\u0002",
    "\u0002\u0002\u0144\u077e\u0003\u0002\u0002\u0002\u0146\u0780\u0003\u0002",
    "\u0002\u0002\u0148\u0782\u0003\u0002\u0002\u0002\u014a\u0784\u0003\u0002",
    "\u0002\u0002\u014c\u0788\u0003\u0002\u0002\u0002\u014e\u078a\u0003\u0002",
    "\u0002\u0002\u0150\u078c\u0003\u0002\u0002\u0002\u0152\u078f\u0003\u0002",
    "\u0002\u0002\u0154\u0792\u0003\u0002\u0002\u0002\u0156\u0794\u0003\u0002",
    "\u0002\u0002\u0158\u079b\u0003\u0002\u0002\u0002\u015a\u07a2\u0003\u0002",
    "\u0002\u0002\u015c\u07be\u0003\u0002\u0002\u0002\u015e\u07d9\u0003\u0002",
    "\u0002\u0002\u0160\u07db\u0003\u0002\u0002\u0002\u0162\u07dd\u0003\u0002",
    "\u0002\u0002\u0164\u07e7\u0003\u0002\u0002\u0002\u0166\u07e9\u0003\u0002",
    "\u0002\u0002\u0168\u07ec\u0003\u0002\u0002\u0002\u016a\u07ee\u0003\u0002",
    "\u0002\u0002\u016c\u07f1\u0003\u0002\u0002\u0002\u016e\u07f8\u0003\u0002",
    "\u0002\u0002\u0170\u0803\u0003\u0002\u0002\u0002\u0172\u080c\u0003\u0002",
    "\u0002\u0002\u0174\u080e\u0003\u0002\u0002\u0002\u0176\u0810\u0003\u0002",
    "\u0002\u0002\u0178\u081d\u0003\u0002\u0002\u0002\u017a\u081f\u0003\u0002",
    "\u0002\u0002\u017c\u0822\u0003\u0002\u0002\u0002\u017e\u082f\u0003\u0002",
    "\u0002\u0002\u0180\u0831\u0003\u0002\u0002\u0002\u0182\u0833\u0003\u0002",
    "\u0002\u0002\u0184\u084f\u0003\u0002\u0002\u0002\u0186\u085a\u0003\u0002",
    "\u0002\u0002\u0188\u085c\u0003\u0002\u0002\u0002\u018a\u0864\u0003\u0002",
    "\u0002\u0002\u018c\u086b\u0003\u0002\u0002\u0002\u018e\u0872\u0003\u0002",
    "\u0002\u0002\u0190\u0875\u0003\u0002\u0002\u0002\u0192\u087a\u0003\u0002",
    "\u0002\u0002\u0194\u087e\u0003\u0002\u0002\u0002\u0196\u0884\u0003\u0002",
    "\u0002\u0002\u0198\u088e\u0003\u0002\u0002\u0002\u019a\u0890\u0003\u0002",
    "\u0002\u0002\u019c\u0892\u0003\u0002\u0002\u0002\u019e\u0894\u0003\u0002",
    "\u0002\u0002\u01a0\u0899\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005\u0164",
    "\u00b3\u0002\u01a3\u01a4\u0007\u0002\u0002\u0003\u01a4\u01a9\u0003\u0002",
    "\u0002\u0002\u01a5\u01a6\u0005\u0168\u00b5\u0002\u01a6\u01a7\u0007\u0002",
    "\u0002\u0003\u01a7\u01a9\u0003\u0002\u0002\u0002\u01a8\u01a2\u0003\u0002",
    "\u0002\u0002\u01a8\u01a5\u0003\u0002\u0002\u0002\u01a9\u0003\u0003\u0002",
    "\u0002\u0002\u01aa\u01af\u0007\u0014\u0002\u0002\u01ab\u01af\u0006\u0003",
    "\u0002\u0002\u01ac\u01af\u0006\u0003\u0003\u0002\u01ad\u01af\u0006\u0003",
    "\u0004\u0002\u01ae\u01aa\u0003\u0002\u0002\u0002\u01ae\u01ab\u0003\u0002",
    "\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01ad\u0003\u0002",
    "\u0002\u0002\u01af\u0005\u0003\u0002\u0002\u0002\u01b0\u01b5\u0005h",
    "5\u0002\u01b1\u01b2\u0007\u0015\u0002\u0002\u01b2\u01b4\u0005h5\u0002",
    "\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002\u0002\u0002",
    "\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6\u0007\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002",
    "\u01b8\u01bd\u0005l7\u0002\u01b9\u01ba\u0007\u0015\u0002\u0002\u01ba",
    "\u01bc\u0005l7\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bc\u01bf",
    "\u0003\u0002\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be",
    "\u0003\u0002\u0002\u0002\u01be\t\u0003\u0002\u0002\u0002\u01bf\u01bd",
    "\u0003\u0002\u0002\u0002\u01c0\u01c5\u0005n8\u0002\u01c1\u01c2\u0007",
    "\u0015\u0002\u0002\u01c2\u01c4\u0005n8\u0002\u01c3\u01c1\u0003\u0002",
    "\u0002\u0002\u01c4\u01c7\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002",
    "\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u000b\u0003\u0002",
    "\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c8\u01cd\u0005\u0014",
    "\u000b\u0002\u01c9\u01cd\u0007f\u0002\u0002\u01ca\u01cb\u0007E\u0002",
    "\u0002\u01cb\u01cd\u0007 \u0002\u0002\u01cc\u01c8\u0003\u0002\u0002",
    "\u0002\u01cc\u01c9\u0003\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002",
    "\u0002\u01cd\r\u0003\u0002\u0002\u0002\u01ce\u01d2\u0005\u0014\u000b",
    "\u0002\u01cf\u01d0\u0007E\u0002\u0002\u01d0\u01d2\u0007 \u0002\u0002",
    "\u01d1\u01ce\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002",
    "\u01d2\u000f\u0003\u0002\u0002\u0002\u01d3\u01d7\u0005\u0014\u000b\u0002",
    "\u01d4\u01d7\u0007f\u0002\u0002\u01d5\u01d7\u0007E\u0002\u0002\u01d6",
    "\u01d3\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6",
    "\u01d5\u0003\u0002\u0002\u0002\u01d7\u0011\u0003\u0002\u0002\u0002\u01d8",
    "\u01db\u0005\u0014\u000b\u0002\u01d9\u01db\u0007E\u0002\u0002\u01da",
    "\u01d8\u0003\u0002\u0002\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01db",
    "\u0013\u0003\u0002\u0002\u0002\u01dc\u01df\u0007w\u0002\u0002\u01dd",
    "\u01df\u0005\u019e\u00d0\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de",
    "\u01dd\u0003\u0002\u0002\u0002\u01df\u0015\u0003\u0002\u0002\u0002\u01e0",
    "\u01ea\u0007^\u0002\u0002\u01e1\u01ea\u0005\f\u0007\u0002\u01e2\u01ea",
    "\u0005\u001a\u000e\u0002\u01e3\u01ea\u0005$\u0013\u0002\u01e4\u01ea",
    "\u00052\u001a\u0002\u01e5\u01ea\u0005\u011a\u008e\u0002\u01e6\u01ea",
    "\u0007\f\u0002\u0002\u01e7\u01ea\u0005\u018c\u00c7\u0002\u01e8\u01ea",
    "\u0005\u001c\u000f\u0002\u01e9\u01e0\u0003\u0002\u0002\u0002\u01e9\u01e1",
    "\u0003\u0002\u0002\u0002\u01e9\u01e2\u0003\u0002\u0002\u0002\u01e9\u01e3",
    "\u0003\u0002\u0002\u0002\u01e9\u01e4\u0003\u0002\u0002\u0002\u01e9\u01e5",
    "\u0003\u0002\u0002\u0002\u01e9\u01e6\u0003\u0002\u0002\u0002\u01e9\u01e7",
    "\u0003\u0002\u0002\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002\u01ea\u0017",
    "\u0003\u0002\u0002\u0002\u01eb\u01f3\u0007^\u0002\u0002\u01ec\u01f3",
    "\u0005\u000e\b\u0002\u01ed\u01f3\u0005\u001a\u000e\u0002\u01ee\u01f3",
    "\u0005&\u0014\u0002\u01ef\u01f3\u00054\u001b\u0002\u01f0\u01f3\u0005",
    "\u011c\u008f\u0002\u01f1\u01f3\u0005\u001e\u0010\u0002\u01f2\u01eb\u0003",
    "\u0002\u0002\u0002\u01f2\u01ec\u0003\u0002\u0002\u0002\u01f2\u01ed\u0003",
    "\u0002\u0002\u0002\u01f2\u01ee\u0003\u0002\u0002\u0002\u01f2\u01ef\u0003",
    "\u0002\u0002\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f1\u0003",
    "\u0002\u0002\u0002\u01f3\u0019\u0003\u0002\u0002\u0002\u01f4\u01f5\t",
    "\u0002\u0002\u0002\u01f5\u001b\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007",
    "\u000e\u0002\u0002\u01f7\u01f9\u0005\b\u0005\u0002\u01f8\u01fa\u0007",
    "\u0015\u0002\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003",
    "\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fc\u0007",
    "\u000f\u0002\u0002\u01fc\u0200\u0003\u0002\u0002\u0002\u01fd\u01fe\u0007",
    "\u000e\u0002\u0002\u01fe\u0200\u0007\u000f\u0002\u0002\u01ff\u01f6\u0003",
    "\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u001d\u0003",
    "\u0002\u0002\u0002\u0201\u0202\u0007\u000e\u0002\u0002\u0202\u0204\u0005",
    "\n\u0006\u0002\u0203\u0205\u0007\u0015\u0002\u0002\u0204\u0203\u0003",
    "\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0206\u0003",
    "\u0002\u0002\u0002\u0206\u0207\u0007\u000f\u0002\u0002\u0207\u020b\u0003",
    "\u0002\u0002\u0002\u0208\u0209\u0007\u000e\u0002\u0002\u0209\u020b\u0007",
    "\u000f\u0002\u0002\u020a\u0201\u0003\u0002\u0002\u0002\u020a\u0208\u0003",
    "\u0002\u0002\u0002\u020b\u001f\u0003\u0002\u0002\u0002\u020c\u020d\u0005",
    "\\/\u0002\u020d\u020e\u0005L\'\u0002\u020e!\u0003\u0002\u0002\u0002",
    "\u020f\u0210\u0005^0\u0002\u0210\u0211\u0005N(\u0002\u0211#\u0003\u0002",
    "\u0002\u0002\u0212\u0214\u0007\u0010\u0002\u0002\u0213\u0215\u0005,",
    "\u0017\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002",
    "\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0224\u0007\u0011",
    "\u0002\u0002\u0217\u0218\u0007\u0010\u0002\u0002\u0218\u0219\u0005(",
    "\u0015\u0002\u0219\u021a\u0007\u0011\u0002\u0002\u021a\u0224\u0003\u0002",
    "\u0002\u0002\u021b\u021c\u0007\u0010\u0002\u0002\u021c\u021d\u0005(",
    "\u0015\u0002\u021d\u021f\u0007\u0015\u0002\u0002\u021e\u0220\u0005,",
    "\u0017\u0002\u021f\u021e\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002",
    "\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0222\u0007\u0011",
    "\u0002\u0002\u0222\u0224\u0003\u0002\u0002\u0002\u0223\u0212\u0003\u0002",
    "\u0002\u0002\u0223\u0217\u0003\u0002\u0002\u0002\u0223\u021b\u0003\u0002",
    "\u0002\u0002\u0224%\u0003\u0002\u0002\u0002\u0225\u0227\u0007\u0010",
    "\u0002\u0002\u0226\u0228\u0005,\u0017\u0002\u0227\u0226\u0003\u0002",
    "\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u0229\u0003\u0002",
    "\u0002\u0002\u0229\u0237\u0007\u0011\u0002\u0002\u022a\u022b\u0007\u0010",
    "\u0002\u0002\u022b\u022c\u0005*\u0016\u0002\u022c\u022d\u0007\u0011",
    "\u0002\u0002\u022d\u0237\u0003\u0002\u0002\u0002\u022e\u022f\u0007\u0010",
    "\u0002\u0002\u022f\u0230\u0005*\u0016\u0002\u0230\u0232\u0007\u0015",
    "\u0002\u0002\u0231\u0233\u0005,\u0017\u0002\u0232\u0231\u0003\u0002",
    "\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0007\u0011\u0002\u0002\u0235\u0237\u0003\u0002",
    "\u0002\u0002\u0236\u0225\u0003\u0002\u0002\u0002\u0236\u022a\u0003\u0002",
    "\u0002\u0002\u0236\u022e\u0003\u0002\u0002\u0002\u0237\'\u0003\u0002",
    "\u0002\u0002\u0238\u023a\b\u0015\u0001\u0002\u0239\u023b\u0005,\u0017",
    "\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002",
    "\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u0242\u0005l7\u0002",
    "\u023d\u023f\u0005,\u0017\u0002\u023e\u023d\u0003\u0002\u0002\u0002",
    "\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002",
    "\u0240\u0242\u0005.\u0018\u0002\u0241\u0238\u0003\u0002\u0002\u0002",
    "\u0241\u023e\u0003\u0002\u0002\u0002\u0242\u0251\u0003\u0002\u0002\u0002",
    "\u0243\u0244\f\u0004\u0002\u0002\u0244\u0246\u0007\u0015\u0002\u0002",
    "\u0245\u0247\u0005,\u0017\u0002\u0246\u0245\u0003\u0002\u0002\u0002",
    "\u0246\u0247\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002",
    "\u0248\u0250\u0005l7\u0002\u0249\u024a\f\u0003\u0002\u0002\u024a\u024c",
    "\u0007\u0015\u0002\u0002\u024b\u024d\u0005,\u0017\u0002\u024c\u024b",
    "\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0003\u0002\u0002\u0002\u024e\u0250\u0005.\u0018\u0002\u024f\u0243",
    "\u0003\u0002\u0002\u0002\u024f\u0249\u0003\u0002\u0002\u0002\u0250\u0253",
    "\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252",
    "\u0003\u0002\u0002\u0002\u0252)\u0003\u0002\u0002\u0002\u0253\u0251",
    "\u0003\u0002\u0002\u0002\u0254\u0256\b\u0016\u0001\u0002\u0255\u0257",
    "\u0005,\u0017\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0256\u0257",
    "\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u025e",
    "\u0005n8\u0002\u0259\u025b\u0005,\u0017\u0002\u025a\u0259\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002",
    "\u0002\u0002\u025c\u025e\u00050\u0019\u0002\u025d\u0254\u0003\u0002",
    "\u0002\u0002\u025d\u025a\u0003\u0002\u0002\u0002\u025e\u026d\u0003\u0002",
    "\u0002\u0002\u025f\u0260\f\u0004\u0002\u0002\u0260\u0262\u0007\u0015",
    "\u0002\u0002\u0261\u0263\u0005,\u0017\u0002\u0262\u0261\u0003\u0002",
    "\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002",
    "\u0002\u0002\u0264\u026c\u0005n8\u0002\u0265\u0266\f\u0003\u0002\u0002",
    "\u0266\u0268\u0007\u0015\u0002\u0002\u0267\u0269\u0005,\u0017\u0002",
    "\u0268\u0267\u0003\u0002\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002",
    "\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026c\u00050\u0019\u0002",
    "\u026b\u025f\u0003\u0002\u0002\u0002\u026b\u0265\u0003\u0002\u0002\u0002",
    "\u026c\u026f\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002",
    "\u026d\u026e\u0003\u0002\u0002\u0002\u026e+\u0003\u0002\u0002\u0002",
    "\u026f\u026d\u0003\u0002\u0002\u0002\u0270\u0272\u0007\u0015\u0002\u0002",
    "\u0271\u0270\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002",
    "\u0273\u0271\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002",
    "\u0274-\u0003\u0002\u0002\u0002\u0275\u0276\u0007\u0013\u0002\u0002",
    "\u0276\u0277\u0005l7\u0002\u0277/\u0003\u0002\u0002\u0002\u0278\u0279",
    "\u0007\u0013\u0002\u0002\u0279\u027a\u0005n8\u0002\u027a1\u0003\u0002",
    "\u0002\u0002\u027b\u027c\u0007\r\u0002\u0002\u027c\u0285\u0007B\u0002",
    "\u0002\u027d\u027e\u0007\r\u0002\u0002\u027e\u0280\u00056\u001c\u0002",
    "\u027f\u0281\u0007\u0015\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002",
    "\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002",
    "\u0282\u0283\u0007B\u0002\u0002\u0283\u0285\u0003\u0002\u0002\u0002",
    "\u0284\u027b\u0003\u0002\u0002\u0002\u0284\u027d\u0003\u0002\u0002\u0002",
    "\u02853\u0003\u0002\u0002\u0002\u0286\u0287\u0007\r\u0002\u0002\u0287",
    "\u0290\u0007B\u0002\u0002\u0288\u0289\u0007\r\u0002\u0002\u0289\u028b",
    "\u00058\u001d\u0002\u028a\u028c\u0007\u0015\u0002\u0002\u028b\u028a",
    "\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028d",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0007B\u0002\u0002\u028e\u0290",
    "\u0003\u0002\u0002\u0002\u028f\u0286\u0003\u0002\u0002\u0002\u028f\u0288",
    "\u0003\u0002\u0002\u0002\u02905\u0003\u0002\u0002\u0002\u0291\u0296",
    "\u0005:\u001e\u0002\u0292\u0293\u0007\u0015\u0002\u0002\u0293\u0295",
    "\u0005:\u001e\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0295\u0298",
    "\u0003\u0002\u0002\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0003\u0002\u0002\u0002\u02977\u0003\u0002\u0002\u0002\u0298\u0296",
    "\u0003\u0002\u0002\u0002\u0299\u029e\u0005<\u001f\u0002\u029a\u029b",
    "\u0007\u0015\u0002\u0002\u029b\u029d\u0005<\u001f\u0002\u029c\u029a",
    "\u0003\u0002\u0002\u0002\u029d\u02a0\u0003\u0002\u0002\u0002\u029e\u029c",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f9",
    "\u0003\u0002\u0002\u0002\u02a0\u029e\u0003\u0002\u0002\u0002\u02a1\u02a8",
    "\u0005\u015c\u00af\u0002\u02a2\u02a3\u0005> \u0002\u02a3\u02a4\u0007",
    "0\u0002\u0002\u02a4\u02a5\u0005l7\u0002\u02a5\u02a8\u0003\u0002\u0002",
    "\u0002\u02a6\u02a8\u0005\f\u0007\u0002\u02a7\u02a1\u0003\u0002\u0002",
    "\u0002\u02a7\u02a2\u0003\u0002\u0002\u0002\u02a7\u02a6\u0003\u0002\u0002",
    "\u0002\u02a8;\u0003\u0002\u0002\u0002\u02a9\u02b0\u0005\u015e\u00b0",
    "\u0002\u02aa\u02ab\u0005@!\u0002\u02ab\u02ac\u00070\u0002\u0002\u02ac",
    "\u02ad\u0005n8\u0002\u02ad\u02b0\u0003\u0002\u0002\u0002\u02ae\u02b0",
    "\u0005\u000e\b\u0002\u02af\u02a9\u0003\u0002\u0002\u0002\u02af\u02aa",
    "\u0003\u0002\u0002\u0002\u02af\u02ae\u0003\u0002\u0002\u0002\u02b0=",
    "\u0003\u0002\u0002\u0002\u02b1\u02b4\u0005B\"\u0002\u02b2\u02b4\u0005",
    "D#\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b2\u0003\u0002",
    "\u0002\u0002\u02b4?\u0003\u0002\u0002\u0002\u02b5\u02b8\u0005B\"\u0002",
    "\u02b6\u02b8\u0005F$\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7",
    "\u02b6\u0003\u0002\u0002\u0002\u02b8A\u0003\u0002\u0002\u0002\u02b9",
    "\u02bd\u0005\u01a0\u00d1\u0002\u02ba\u02bd\u0007s\u0002\u0002\u02bb",
    "\u02bd\u0007\u0007\u0002\u0002\u02bc\u02b9\u0003\u0002\u0002\u0002\u02bc",
    "\u02ba\u0003\u0002\u0002\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd",
    "C\u0003\u0002\u0002\u0002\u02be\u02bf\u0005l7\u0002\u02bfE\u0003\u0002",
    "\u0002\u0002\u02c0\u02c1\u0005n8\u0002\u02c1G\u0003\u0002\u0002\u0002",
    "\u02c2\u02c3\b%\u0001\u0002\u02c3\u02c4\u0005 \u0011\u0002\u02c4\u02cc",
    "\u0003\u0002\u0002\u0002\u02c5\u02c6\f\u0004\u0002\u0002\u02c6\u02cb",
    "\u0005L\'\u0002\u02c7\u02c8\f\u0003\u0002\u0002\u02c8\u02c9\u0007\u0012",
    "\u0002\u0002\u02c9\u02cb\u0005\u01a0\u00d1\u0002\u02ca\u02c5\u0003\u0002",
    "\u0002\u0002\u02ca\u02c7\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002",
    "\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002",
    "\u0002\u0002\u02cdI\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002",
    "\u0002\u0002\u02cf\u02d0\b&\u0001\u0002\u02d0\u02d1\u0005\"\u0012\u0002",
    "\u02d1\u02d9\u0003\u0002\u0002\u0002\u02d2\u02d3\f\u0004\u0002\u0002",
    "\u02d3\u02d8\u0005N(\u0002\u02d4\u02d5\f\u0003\u0002\u0002\u02d5\u02d6",
    "\u0007\u0012\u0002\u0002\u02d6\u02d8\u0005\u01a0\u00d1\u0002\u02d7\u02d2",
    "\u0003\u0002\u0002\u0002\u02d7\u02d4\u0003\u0002\u0002\u0002\u02d8\u02db",
    "\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da",
    "\u0003\u0002\u0002\u0002\u02daK\u0003\u0002\u0002\u0002\u02db\u02d9",
    "\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007\u000e\u0002\u0002\u02dd\u02e6",
    "\u0007\u000f\u0002\u0002\u02de\u02df\u0007\u000e\u0002\u0002\u02df\u02e1",
    "\u0005P)\u0002\u02e0\u02e2\u0007\u0015\u0002\u0002\u02e1\u02e0\u0003",
    "\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003",
    "\u0002\u0002\u0002\u02e3\u02e4\u0007\u000f\u0002\u0002\u02e4\u02e6\u0003",
    "\u0002\u0002\u0002\u02e5\u02dc\u0003\u0002\u0002\u0002\u02e5\u02de\u0003",
    "\u0002\u0002\u0002\u02e6M\u0003\u0002\u0002\u0002\u02e7\u02e8\u0007",
    "\u000e\u0002\u0002\u02e8\u02f1\u0007\u000f\u0002\u0002\u02e9\u02ea\u0007",
    "\u000e\u0002\u0002\u02ea\u02ec\u0005R*\u0002\u02eb\u02ed\u0007\u0015",
    "\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002",
    "\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007\u000f",
    "\u0002\u0002\u02ef\u02f1\u0003\u0002\u0002\u0002\u02f0\u02e7\u0003\u0002",
    "\u0002\u0002\u02f0\u02e9\u0003\u0002\u0002\u0002\u02f1O\u0003\u0002",
    "\u0002\u0002\u02f2\u02f4\u0007\u0013\u0002\u0002\u02f3\u02f2\u0003\u0002",
    "\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002",
    "\u0002\u0002\u02f5\u02fd\u0005l7\u0002\u02f6\u02f8\u0007\u0015\u0002",
    "\u0002\u02f7\u02f9\u0007\u0013\u0002\u0002\u02f8\u02f7\u0003\u0002\u0002",
    "\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002",
    "\u0002\u02fa\u02fc\u0005l7\u0002\u02fb\u02f6\u0003\u0002\u0002\u0002",
    "\u02fc\u02ff\u0003\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002",
    "\u02fd\u02fe\u0003\u0002\u0002\u0002\u02feQ\u0003\u0002\u0002\u0002",
    "\u02ff\u02fd\u0003\u0002\u0002\u0002\u0300\u0302\u0007\u0013\u0002\u0002",
    "\u0301\u0300\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002",
    "\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u030b\u0005n8\u0002\u0304",
    "\u0306\u0007\u0015\u0002\u0002\u0305\u0307\u0007\u0013\u0002\u0002\u0306",
    "\u0305\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307",
    "\u0308\u0003\u0002\u0002\u0002\u0308\u030a\u0005n8\u0002\u0309\u0304",
    "\u0003\u0002\u0002\u0002\u030a\u030d\u0003\u0002\u0002\u0002\u030b\u0309",
    "\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030cS",
    "\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0311",
    "\u0005H%\u0002\u030f\u0311\u0005X-\u0002\u0310\u030e\u0003\u0002\u0002",
    "\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0311U\u0003\u0002\u0002",
    "\u0002\u0312\u0315\u0005J&\u0002\u0313\u0315\u0005Z.\u0002\u0314\u0312",
    "\u0003\u0002\u0002\u0002\u0314\u0313\u0003\u0002\u0002\u0002\u0315W",
    "\u0003\u0002\u0002\u0002\u0316\u031a\u0005\\/\u0002\u0317\u0318\u0007",
    "Z\u0002\u0002\u0318\u031a\u0005X-\u0002\u0319\u0316\u0003\u0002\u0002",
    "\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u031aY\u0003\u0002\u0002",
    "\u0002\u031b\u031f\u0005^0\u0002\u031c\u031d\u0007Z\u0002\u0002\u031d",
    "\u031f\u0005Z.\u0002\u031e\u031b\u0003\u0002\u0002\u0002\u031e\u031c",
    "\u0003\u0002\u0002\u0002\u031f[\u0003\u0002\u0002\u0002\u0320\u0321",
    "\b/\u0001\u0002\u0321\u0327\u0005\u0016\f\u0002\u0322\u0323\u0007Z\u0002",
    "\u0002\u0323\u0324\u0005\\/\u0002\u0324\u0325\u0005L\'\u0002\u0325\u0327",
    "\u0003\u0002\u0002\u0002\u0326\u0320\u0003\u0002\u0002\u0002\u0326\u0322",
    "\u0003\u0002\u0002\u0002\u0327\u0334\u0003\u0002\u0002\u0002\u0328\u0329",
    "\f\u0006\u0002\u0002\u0329\u032a\u0007\u0010\u0002\u0002\u032a\u032b",
    "\u0005\b\u0005\u0002\u032b\u032c\u0007\u0011\u0002\u0002\u032c\u0333",
    "\u0003\u0002\u0002\u0002\u032d\u032e\f\u0005\u0002\u0002\u032e\u032f",
    "\u0007\u0012\u0002\u0002\u032f\u0333\u0005\u01a0\u00d1\u0002\u0330\u0331",
    "\f\u0004\u0002\u0002\u0331\u0333\u0005\u018c\u00c7\u0002\u0332\u0328",
    "\u0003\u0002\u0002\u0002\u0332\u032d\u0003\u0002\u0002\u0002\u0332\u0330",
    "\u0003\u0002\u0002\u0002\u0333\u0336\u0003\u0002\u0002\u0002\u0334\u0332",
    "\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002\u0335]",
    "\u0003\u0002\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0337\u0338",
    "\b0\u0001\u0002\u0338\u033e\u0005\u0018\r\u0002\u0339\u033a\u0007Z\u0002",
    "\u0002\u033a\u033b\u0005^0\u0002\u033b\u033c\u0005N(\u0002\u033c\u033e",
    "\u0003\u0002\u0002\u0002\u033d\u0337\u0003\u0002\u0002\u0002\u033d\u0339",
    "\u0003\u0002\u0002\u0002\u033e\u034b\u0003\u0002\u0002\u0002\u033f\u0340",
    "\f\u0006\u0002\u0002\u0340\u0341\u0007\u0010\u0002\u0002\u0341\u0342",
    "\u0005\n\u0006\u0002\u0342\u0343\u0007\u0011\u0002\u0002\u0343\u034a",
    "\u0003\u0002\u0002\u0002\u0344\u0345\f\u0005\u0002\u0002\u0345\u0346",
    "\u0007\u0012\u0002\u0002\u0346\u034a\u0005\u01a0\u00d1\u0002\u0347\u0348",
    "\f\u0004\u0002\u0002\u0348\u034a\u0005\u018e\u00c8\u0002\u0349\u033f",
    "\u0003\u0002\u0002\u0002\u0349\u0344\u0003\u0002\u0002\u0002\u0349\u0347",
    "\u0003\u0002\u0002\u0002\u034a\u034d\u0003\u0002\u0002\u0002\u034b\u0349",
    "\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c_",
    "\u0003\u0002\u0002\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034e\u034f",
    "\u00071\u0002\u0002\u034f\u0350\u0005h5\u0002\u0350a\u0003\u0002\u0002",
    "\u0002\u0351\u0352\u00071\u0002\u0002\u0352\u0353\u0005j6\u0002\u0353",
    "c\u0003\u0002\u0002\u0002\u0354\u0355\u00071\u0002\u0002\u0355\u0356",
    "\u0005l7\u0002\u0356e\u0003\u0002\u0002\u0002\u0357\u0358\u00071\u0002",
    "\u0002\u0358\u0359\u0005n8\u0002\u0359g\u0003\u0002\u0002\u0002\u035a",
    "\u035b\b5\u0001\u0002\u035b\u0361\u0005\u0114\u008b\u0002\u035c\u035d",
    "\u0005p9\u0002\u035d\u035e\u0005h5\u0013\u035e\u0361\u0003\u0002\u0002",
    "\u0002\u035f\u0361\u0005T+\u0002\u0360\u035a\u0003\u0002\u0002\u0002",
    "\u0360\u035c\u0003\u0002\u0002\u0002\u0360\u035f\u0003\u0002\u0002\u0002",
    "\u0361\u039d\u0003\u0002\u0002\u0002\u0362\u0363\f\u0012\u0002\u0002",
    "\u0363\u0364\u0007\"\u0002\u0002\u0364\u039c\u0005h5\u0013\u0365\u0366",
    "\f\u0011\u0002\u0002\u0366\u0367\u0005r:\u0002\u0367\u0368\u0005h5\u0012",
    "\u0368\u039c\u0003\u0002\u0002\u0002\u0369\u036a\f\u0010\u0002\u0002",
    "\u036a\u036b\u0005t;\u0002\u036b\u036c\u0005h5\u0011\u036c\u039c\u0003",
    "\u0002\u0002\u0002\u036d\u036e\f\u000f\u0002\u0002\u036e\u036f\u0005",
    "v<\u0002\u036f\u0370\u0005h5\u0010\u0370\u039c\u0003\u0002\u0002\u0002",
    "\u0371\u0372\f\u000e\u0002\u0002\u0372\u0373\u0005x=\u0002\u0373\u0374",
    "\u0005h5\u000f\u0374\u039c\u0003\u0002\u0002\u0002\u0375\u0376\f\r\u0002",
    "\u0002\u0376\u0377\u0007Y\u0002\u0002\u0377\u039c\u0005h5\u000e\u0378",
    "\u0379\f\f\u0002\u0002\u0379\u037a\u0005z>\u0002\u037a\u037b\u0005h",
    "5\r\u037b\u039c\u0003\u0002\u0002\u0002\u037c\u037d\f\u000b\u0002\u0002",
    "\u037d\u037e\u0007(\u0002\u0002\u037e\u039c\u0005h5\f\u037f\u0380\f",
    "\n\u0002\u0002\u0380\u0381\u0007*\u0002\u0002\u0381\u039c\u0005h5\u000b",
    "\u0382\u0383\f\t\u0002\u0002\u0383\u0384\u0007)\u0002\u0002\u0384\u039c",
    "\u0005h5\n\u0385\u0386\f\b\u0002\u0002\u0386\u0387\u0007-\u0002\u0002",
    "\u0387\u039c\u0005h5\t\u0388\u0389\f\u0007\u0002\u0002\u0389\u038a\u0007",
    ".\u0002\u0002\u038a\u039c\u0005h5\b\u038b\u038c\f\u0006\u0002\u0002",
    "\u038c\u038d\u0007/\u0002\u0002\u038d\u038e\u0005h5\u0002\u038e\u038f",
    "\u00070\u0002\u0002\u038f\u0390\u0005h5\u0007\u0390\u039c\u0003\u0002",
    "\u0002\u0002\u0391\u0392\f\u0005\u0002\u0002\u0392\u0393\u00071\u0002",
    "\u0002\u0393\u039c\u0005h5\u0006\u0394\u0395\f\u0004\u0002\u0002\u0395",
    "\u0396\u0005|?\u0002\u0396\u0397\u0005h5\u0005\u0397\u039c\u0003\u0002",
    "\u0002\u0002\u0398\u0399\f\u0014\u0002\u0002\u0399\u039a\u00065#\u0002",
    "\u039a\u039c\t\u0003\u0002\u0002\u039b\u0362\u0003\u0002\u0002\u0002",
    "\u039b\u0365\u0003\u0002\u0002\u0002\u039b\u0369\u0003\u0002\u0002\u0002",
    "\u039b\u036d\u0003\u0002\u0002\u0002\u039b\u0371\u0003\u0002\u0002\u0002",
    "\u039b\u0375\u0003\u0002\u0002\u0002\u039b\u0378\u0003\u0002\u0002\u0002",
    "\u039b\u037c\u0003\u0002\u0002\u0002\u039b\u037f\u0003\u0002\u0002\u0002",
    "\u039b\u0382\u0003\u0002\u0002\u0002\u039b\u0385\u0003\u0002\u0002\u0002",
    "\u039b\u0388\u0003\u0002\u0002\u0002\u039b\u038b\u0003\u0002\u0002\u0002",
    "\u039b\u0391\u0003\u0002\u0002\u0002\u039b\u0394\u0003\u0002\u0002\u0002",
    "\u039b\u0398\u0003\u0002\u0002\u0002\u039c\u039f\u0003\u0002\u0002\u0002",
    "\u039d\u039b\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002",
    "\u039ei\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002",
    "\u03a0\u03a1\b6\u0001\u0002\u03a1\u03a9\u0005\u0114\u008b\u0002\u03a2",
    "\u03a3\u0005p9\u0002\u03a3\u03a4\u0005j6\u0014\u03a4\u03a9\u0003\u0002",
    "\u0002\u0002\u03a5\u03a6\u0007f\u0002\u0002\u03a6\u03a9\u0005j6\u0004",
    "\u03a7\u03a9\u0005T+\u0002\u03a8\u03a0\u0003\u0002\u0002\u0002\u03a8",
    "\u03a2\u0003\u0002\u0002\u0002\u03a8\u03a5\u0003\u0002\u0002\u0002\u03a8",
    "\u03a7\u0003\u0002\u0002\u0002\u03a9\u03e5\u0003\u0002\u0002\u0002\u03aa",
    "\u03ab\f\u0013\u0002\u0002\u03ab\u03ac\u0007\"\u0002\u0002\u03ac\u03e4",
    "\u0005j6\u0014\u03ad\u03ae\f\u0012\u0002\u0002\u03ae\u03af\u0005r:\u0002",
    "\u03af\u03b0\u0005j6\u0013\u03b0\u03e4\u0003\u0002\u0002\u0002\u03b1",
    "\u03b2\f\u0011\u0002\u0002\u03b2\u03b3\u0005t;\u0002\u03b3\u03b4\u0005",
    "j6\u0012\u03b4\u03e4\u0003\u0002\u0002\u0002\u03b5\u03b6\f\u0010\u0002",
    "\u0002\u03b6\u03b7\u0005v<\u0002\u03b7\u03b8\u0005j6\u0011\u03b8\u03e4",
    "\u0003\u0002\u0002\u0002\u03b9\u03ba\f\u000f\u0002\u0002\u03ba\u03bb",
    "\u0005x=\u0002\u03bb\u03bc\u0005j6\u0010\u03bc\u03e4\u0003\u0002\u0002",
    "\u0002\u03bd\u03be\f\u000e\u0002\u0002\u03be\u03bf\u0007Y\u0002\u0002",
    "\u03bf\u03e4\u0005j6\u000f\u03c0\u03c1\f\r\u0002\u0002\u03c1\u03c2\u0005",
    "z>\u0002\u03c2\u03c3\u0005j6\u000e\u03c3\u03e4\u0003\u0002\u0002\u0002",
    "\u03c4\u03c5\f\f\u0002\u0002\u03c5\u03c6\u0007(\u0002\u0002\u03c6\u03e4",
    "\u0005j6\r\u03c7\u03c8\f\u000b\u0002\u0002\u03c8\u03c9\u0007*\u0002",
    "\u0002\u03c9\u03e4\u0005j6\f\u03ca\u03cb\f\n\u0002\u0002\u03cb\u03cc",
    "\u0007)\u0002\u0002\u03cc\u03e4\u0005j6\u000b\u03cd\u03ce\f\t\u0002",
    "\u0002\u03ce\u03cf\u0007-\u0002\u0002\u03cf\u03e4\u0005j6\n\u03d0\u03d1",
    "\f\b\u0002\u0002\u03d1\u03d2\u0007.\u0002\u0002\u03d2\u03e4\u0005j6",
    "\t\u03d3\u03d4\f\u0007\u0002\u0002\u03d4\u03d5\u0007/\u0002\u0002\u03d5",
    "\u03d6\u0005j6\u0002\u03d6\u03d7\u00070\u0002\u0002\u03d7\u03d8\u0005",
    "j6\b\u03d8\u03e4\u0003\u0002\u0002\u0002\u03d9\u03da\f\u0006\u0002\u0002",
    "\u03da\u03db\u00071\u0002\u0002\u03db\u03e4\u0005j6\u0007\u03dc\u03dd",
    "\f\u0005\u0002\u0002\u03dd\u03de\u0005|?\u0002\u03de\u03df\u0005j6\u0006",
    "\u03df\u03e4\u0003\u0002\u0002\u0002\u03e0\u03e1\f\u0015\u0002\u0002",
    "\u03e1\u03e2\u000664\u0002\u03e2\u03e4\t\u0003\u0002\u0002\u03e3\u03aa",
    "\u0003\u0002\u0002\u0002\u03e3\u03ad\u0003\u0002\u0002\u0002\u03e3\u03b1",
    "\u0003\u0002\u0002\u0002\u03e3\u03b5\u0003\u0002\u0002\u0002\u03e3\u03b9",
    "\u0003\u0002\u0002\u0002\u03e3\u03bd\u0003\u0002\u0002\u0002\u03e3\u03c0",
    "\u0003\u0002\u0002\u0002\u03e3\u03c4\u0003\u0002\u0002\u0002\u03e3\u03c7",
    "\u0003\u0002\u0002\u0002\u03e3\u03ca\u0003\u0002\u0002\u0002\u03e3\u03cd",
    "\u0003\u0002\u0002\u0002\u03e3\u03d0\u0003\u0002\u0002\u0002\u03e3\u03d3",
    "\u0003\u0002\u0002\u0002\u03e3\u03d9\u0003\u0002\u0002\u0002\u03e3\u03dc",
    "\u0003\u0002\u0002\u0002\u03e3\u03e0\u0003\u0002\u0002\u0002\u03e4\u03e7",
    "\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e6",
    "\u0003\u0002\u0002\u0002\u03e6k\u0003\u0002\u0002\u0002\u03e7\u03e5",
    "\u0003\u0002\u0002\u0002\u03e8\u03e9\b7\u0001\u0002\u03e9\u03f4\u0005",
    "\u0136\u009c\u0002\u03ea\u03f4\u0005\u0114\u008b\u0002\u03eb\u03ec\u0005",
    "p9\u0002\u03ec\u03ed\u0005l7\u0015\u03ed\u03f4\u0003\u0002\u0002\u0002",
    "\u03ee\u03ef\u0005\u014c\u00a7\u0002\u03ef\u03f0\u0007=\u0002\u0002",
    "\u03f0\u03f1\u0005\u015a\u00ae\u0002\u03f1\u03f4\u0003\u0002\u0002\u0002",
    "\u03f2\u03f4\u0005T+\u0002\u03f3\u03e8\u0003\u0002\u0002\u0002\u03f3",
    "\u03ea\u0003\u0002\u0002\u0002\u03f3\u03eb\u0003\u0002\u0002\u0002\u03f3",
    "\u03ee\u0003\u0002\u0002\u0002\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f4",
    "\u0433\u0003\u0002\u0002\u0002\u03f5\u03f6\f\u0014\u0002\u0002\u03f6",
    "\u03f7\u0007\"\u0002\u0002\u03f7\u0432\u0005l7\u0015\u03f8\u03f9\f\u0013",
    "\u0002\u0002\u03f9\u03fa\u0005r:\u0002\u03fa\u03fb\u0005l7\u0014\u03fb",
    "\u0432\u0003\u0002\u0002\u0002\u03fc\u03fd\f\u0012\u0002\u0002\u03fd",
    "\u03fe\u0005t;\u0002\u03fe\u03ff\u0005l7\u0013\u03ff\u0432\u0003\u0002",
    "\u0002\u0002\u0400\u0401\f\u0011\u0002\u0002\u0401\u0402\u0005v<\u0002",
    "\u0402\u0403\u0005l7\u0012\u0403\u0432\u0003\u0002\u0002\u0002\u0404",
    "\u0405\f\u0010\u0002\u0002\u0405\u0406\u0005x=\u0002\u0406\u0407\u0005",
    "l7\u0011\u0407\u0432\u0003\u0002\u0002\u0002\u0408\u0409\f\u000f\u0002",
    "\u0002\u0409\u040a\u0007X\u0002\u0002\u040a\u0432\u0005l7\u0010\u040b",
    "\u040c\f\u000e\u0002\u0002\u040c\u040d\u0007Y\u0002\u0002\u040d\u0432",
    "\u0005l7\u000f\u040e\u040f\f\r\u0002\u0002\u040f\u0410\u0005z>\u0002",
    "\u0410\u0411\u0005l7\u000e\u0411\u0432\u0003\u0002\u0002\u0002\u0412",
    "\u0413\f\f\u0002\u0002\u0413\u0414\u0007(\u0002\u0002\u0414\u0432\u0005",
    "l7\r\u0415\u0416\f\u000b\u0002\u0002\u0416\u0417\u0007*\u0002\u0002",
    "\u0417\u0432\u0005l7\f\u0418\u0419\f\n\u0002\u0002\u0419\u041a\u0007",
    ")\u0002\u0002\u041a\u0432\u0005l7\u000b\u041b\u041c\f\t\u0002\u0002",
    "\u041c\u041d\u0007-\u0002\u0002\u041d\u0432\u0005l7\n\u041e\u041f\f",
    "\b\u0002\u0002\u041f\u0420\u0007.\u0002\u0002\u0420\u0432\u0005l7\t",
    "\u0421\u0422\f\u0007\u0002\u0002\u0422\u0423\u0007/\u0002\u0002\u0423",
    "\u0424\u0005l7\u0002\u0424\u0425\u00070\u0002\u0002\u0425\u0426\u0005",
    "l7\b\u0426\u0432\u0003\u0002\u0002\u0002\u0427\u0428\f\u0005\u0002\u0002",
    "\u0428\u0429\u00071\u0002\u0002\u0429\u0432\u0005l7\u0006\u042a\u042b",
    "\f\u0004\u0002\u0002\u042b\u042c\u0005|?\u0002\u042c\u042d\u0005l7\u0005",
    "\u042d\u0432\u0003\u0002\u0002\u0002\u042e\u042f\f\u0016\u0002\u0002",
    "\u042f\u0430\u00067F\u0002\u0430\u0432\t\u0003\u0002\u0002\u0431\u03f5",
    "\u0003\u0002\u0002\u0002\u0431\u03f8\u0003\u0002\u0002\u0002\u0431\u03fc",
    "\u0003\u0002\u0002\u0002\u0431\u0400\u0003\u0002\u0002\u0002\u0431\u0404",
    "\u0003\u0002\u0002\u0002\u0431\u0408\u0003\u0002\u0002\u0002\u0431\u040b",
    "\u0003\u0002\u0002\u0002\u0431\u040e\u0003\u0002\u0002\u0002\u0431\u0412",
    "\u0003\u0002\u0002\u0002\u0431\u0415\u0003\u0002\u0002\u0002\u0431\u0418",
    "\u0003\u0002\u0002\u0002\u0431\u041b\u0003\u0002\u0002\u0002\u0431\u041e",
    "\u0003\u0002\u0002\u0002\u0431\u0421\u0003\u0002\u0002\u0002\u0431\u0427",
    "\u0003\u0002\u0002\u0002\u0431\u042a\u0003\u0002\u0002\u0002\u0431\u042e",
    "\u0003\u0002\u0002\u0002\u0432\u0435\u0003\u0002\u0002\u0002\u0433\u0431",
    "\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002\u0002\u0434m",
    "\u0003\u0002\u0002\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0437",
    "\b8\u0001\u0002\u0437\u0440\u0005\u0136\u009c\u0002\u0438\u0440\u0005",
    "\u0114\u008b\u0002\u0439\u043a\u0005p9\u0002\u043a\u043b\u0005n8\u0015",
    "\u043b\u0440\u0003\u0002\u0002\u0002\u043c\u043d\u0007f\u0002\u0002",
    "\u043d\u0440\u0005n8\u0004\u043e\u0440\u0005T+\u0002\u043f\u0436\u0003",
    "\u0002\u0002\u0002\u043f\u0438\u0003\u0002\u0002\u0002\u043f\u0439\u0003",
    "\u0002\u0002\u0002\u043f\u043c\u0003\u0002\u0002\u0002\u043f\u043e\u0003",
    "\u0002\u0002\u0002\u0440\u047f\u0003\u0002\u0002\u0002\u0441\u0442\f",
    "\u0014\u0002\u0002\u0442\u0443\u0007\"\u0002\u0002\u0443\u047e\u0005",
    "n8\u0015\u0444\u0445\f\u0013\u0002\u0002\u0445\u0446\u0005r:\u0002\u0446",
    "\u0447\u0005n8\u0014\u0447\u047e\u0003\u0002\u0002\u0002\u0448\u0449",
    "\f\u0012\u0002\u0002\u0449\u044a\u0005t;\u0002\u044a\u044b\u0005n8\u0013",
    "\u044b\u047e\u0003\u0002\u0002\u0002\u044c\u044d\f\u0011\u0002\u0002",
    "\u044d\u044e\u0005v<\u0002\u044e\u044f\u0005n8\u0012\u044f\u047e\u0003",
    "\u0002\u0002\u0002\u0450\u0451\f\u0010\u0002\u0002\u0451\u0452\u0005",
    "x=\u0002\u0452\u0453\u0005n8\u0011\u0453\u047e\u0003\u0002\u0002\u0002",
    "\u0454\u0455\f\u000f\u0002\u0002\u0455\u0456\u0007X\u0002\u0002\u0456",
    "\u047e\u0005n8\u0010\u0457\u0458\f\u000e\u0002\u0002\u0458\u0459\u0007",
    "Y\u0002\u0002\u0459\u047e\u0005n8\u000f\u045a\u045b\f\r\u0002\u0002",
    "\u045b\u045c\u0005z>\u0002\u045c\u045d\u0005n8\u000e\u045d\u047e\u0003",
    "\u0002\u0002\u0002\u045e\u045f\f\f\u0002\u0002\u045f\u0460\u0007(\u0002",
    "\u0002\u0460\u047e\u0005n8\r\u0461\u0462\f\u000b\u0002\u0002\u0462\u0463",
    "\u0007*\u0002\u0002\u0463\u047e\u0005n8\f\u0464\u0465\f\n\u0002\u0002",
    "\u0465\u0466\u0007)\u0002\u0002\u0466\u047e\u0005n8\u000b\u0467\u0468",
    "\f\t\u0002\u0002\u0468\u0469\u0007-\u0002\u0002\u0469\u047e\u0005n8",
    "\n\u046a\u046b\f\b\u0002\u0002\u046b\u046c\u0007.\u0002\u0002\u046c",
    "\u047e\u0005n8\t\u046d\u046e\f\u0007\u0002\u0002\u046e\u046f\u0007/",
    "\u0002\u0002\u046f\u0470\u0005n8\u0002\u0470\u0471\u00070\u0002\u0002",
    "\u0471\u0472\u0005n8\b\u0472\u047e\u0003\u0002\u0002\u0002\u0473\u0474",
    "\f\u0006\u0002\u0002\u0474\u0475\u00071\u0002\u0002\u0475\u047e\u0005",
    "n8\u0007\u0476\u0477\f\u0005\u0002\u0002\u0477\u0478\u0005|?\u0002\u0478",
    "\u0479\u0005n8\u0006\u0479\u047e\u0003\u0002\u0002\u0002\u047a\u047b",
    "\f\u0016\u0002\u0002\u047b\u047c\u00068X\u0002\u047c\u047e\t\u0003\u0002",
    "\u0002\u047d\u0441\u0003\u0002\u0002\u0002\u047d\u0444\u0003\u0002\u0002",
    "\u0002\u047d\u0448\u0003\u0002\u0002\u0002\u047d\u044c\u0003\u0002\u0002",
    "\u0002\u047d\u0450\u0003\u0002\u0002\u0002\u047d\u0454\u0003\u0002\u0002",
    "\u0002\u047d\u0457\u0003\u0002\u0002\u0002\u047d\u045a\u0003\u0002\u0002",
    "\u0002\u047d\u045e\u0003\u0002\u0002\u0002\u047d\u0461\u0003\u0002\u0002",
    "\u0002\u047d\u0464\u0003\u0002\u0002\u0002\u047d\u0467\u0003\u0002\u0002",
    "\u0002\u047d\u046a\u0003\u0002\u0002\u0002\u047d\u046d\u0003\u0002\u0002",
    "\u0002\u047d\u0473\u0003\u0002\u0002\u0002\u047d\u0476\u0003\u0002\u0002",
    "\u0002\u047d\u047a\u0003\u0002\u0002\u0002\u047e\u0481\u0003\u0002\u0002",
    "\u0002\u047f\u047d\u0003\u0002\u0002\u0002\u047f\u0480\u0003\u0002\u0002",
    "\u0002\u0480o\u0003\u0002\u0002\u0002\u0481\u047f\u0003\u0002\u0002",
    "\u0002\u0482\u0483\t\u0004\u0002\u0002\u0483q\u0003\u0002\u0002\u0002",
    "\u0484\u0485\t\u0005\u0002\u0002\u0485s\u0003\u0002\u0002\u0002\u0486",
    "\u0487\t\u0006\u0002\u0002\u0487u\u0003\u0002\u0002\u0002\u0488\u0489",
    "\t\u0007\u0002\u0002\u0489w\u0003\u0002\u0002\u0002\u048a\u048b\t\b",
    "\u0002\u0002\u048by\u0003\u0002\u0002\u0002\u048c\u048d\t\t\u0002\u0002",
    "\u048d{\u0003\u0002\u0002\u0002\u048e\u048f\t\n\u0002\u0002\u048f}\u0003",
    "\u0002\u0002\u0002\u0490\u049e\u0005\u0102\u0082\u0002\u0491\u049e\u0005",
    "\u0106\u0084\u0002\u0492\u049e\u0005\u0090I\u0002\u0493\u049e\u0005",
    "\u0098M\u0002\u0494\u049e\u0005\u00fa~\u0002\u0495\u049e\u0005\u00fc",
    "\u007f\u0002\u0496\u049e\u0005\u00fe\u0080\u0002\u0497\u049e\u0005\u0100",
    "\u0081\u0002\u0498\u049e\u0005\u00e2r\u0002\u0499\u049e\u0005\u00e4",
    "s\u0002\u049a\u049e\u0005\u00d8m\u0002\u049b\u049e\u0005\u00dan\u0002",
    "\u049c\u049e\u0005\u0096L\u0002\u049d\u0490\u0003\u0002\u0002\u0002",
    "\u049d\u0491\u0003\u0002\u0002\u0002\u049d\u0492\u0003\u0002\u0002\u0002",
    "\u049d\u0493\u0003\u0002\u0002\u0002\u049d\u0494\u0003\u0002\u0002\u0002",
    "\u049d\u0495\u0003\u0002\u0002\u0002\u049d\u0496\u0003\u0002\u0002\u0002",
    "\u049d\u0497\u0003\u0002\u0002\u0002\u049d\u0498\u0003\u0002\u0002\u0002",
    "\u049d\u0499\u0003\u0002\u0002\u0002\u049d\u049a\u0003\u0002\u0002\u0002",
    "\u049d\u049b\u0003\u0002\u0002\u0002\u049d\u049c\u0003\u0002\u0002\u0002",
    "\u049e\u007f\u0003\u0002\u0002\u0002\u049f\u04a2\u0005\u0098M\u0002",
    "\u04a0\u04a2\u0005\u0092J\u0002\u04a1\u049f\u0003\u0002\u0002\u0002",
    "\u04a1\u04a0\u0003\u0002\u0002\u0002\u04a2\u0081\u0003\u0002\u0002\u0002",
    "\u04a3\u04a7\u0005\u0090I\u0002\u04a4\u04a7\u0005\u009aN\u0002\u04a5",
    "\u04a7\u0005\u0094K\u0002\u04a6\u04a3\u0003\u0002\u0002\u0002\u04a6",
    "\u04a4\u0003\u0002\u0002\u0002\u04a6\u04a5\u0003\u0002\u0002\u0002\u04a7",
    "\u0083\u0003\u0002\u0002\u0002\u04a8\u04aa\u0005\u008aF\u0002\u04a9",
    "\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003\u0002\u0002\u0002\u04ab",
    "\u04a9\u0003\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac",
    "\u0085\u0003\u0002\u0002\u0002\u04ad\u04af\u0005\u008cG\u0002\u04ae",
    "\u04ad\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0",
    "\u04ae\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1",
    "\u0087\u0003\u0002\u0002\u0002\u04b2\u04b4\u0005\u008eH\u0002\u04b3",
    "\u04b2\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5",
    "\u04b3\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6",
    "\u0089\u0003\u0002\u0002\u0002\u04b7\u04ba\u0005\u00d0i\u0002\u04b8",
    "\u04ba\u0005~@\u0002\u04b9\u04b7\u0003\u0002\u0002\u0002\u04b9\u04b8",
    "\u0003\u0002\u0002\u0002\u04ba\u008b\u0003\u0002\u0002\u0002\u04bb\u04be",
    "\u0005\u00d0i\u0002\u04bc\u04be\u0005\u0080A\u0002\u04bd\u04bb\u0003",
    "\u0002\u0002\u0002\u04bd\u04bc\u0003\u0002\u0002\u0002\u04be\u008d\u0003",
    "\u0002\u0002\u0002\u04bf\u04c2\u0005\u00d2j\u0002\u04c0\u04c2\u0005",
    "\u0082B\u0002\u04c1\u04bf\u0003\u0002\u0002\u0002\u04c1\u04c0\u0003",
    "\u0002\u0002\u0002\u04c2\u008f\u0003\u0002\u0002\u0002\u04c3\u04c4\u0007",
    "\u0014\u0002\u0002\u04c4\u0091\u0003\u0002\u0002\u0002\u04c5\u04c7\u0007",
    "[\u0002\u0002\u04c6\u04c8\u0005\b\u0005\u0002\u04c7\u04c6\u0003\u0002",
    "\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003\u0002",
    "\u0002\u0002\u04c9\u04ca\u0005\u0004\u0003\u0002\u04ca\u0093\u0003\u0002",
    "\u0002\u0002\u04cb\u04cd\u0007[\u0002\u0002\u04cc\u04ce\u0005\n\u0006",
    "\u0002\u04cd\u04cc\u0003\u0002\u0002\u0002\u04cd\u04ce\u0003\u0002\u0002",
    "\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf\u04d0\u0005\u0004\u0003",
    "\u0002\u04d0\u0095\u0003\u0002\u0002\u0002\u04d1\u04d2\u0007L\u0002",
    "\u0002\u04d2\u04d3\u0005\u0004\u0003\u0002\u04d3\u0097\u0003\u0002\u0002",
    "\u0002\u04d4\u04d5\u0005\b\u0005\u0002\u04d5\u04d6\u0005\u0004\u0003",
    "\u0002\u04d6\u0099\u0003\u0002\u0002\u0002\u04d7\u04d8\u0005\n\u0006",
    "\u0002\u04d8\u009b\u0003\u0002\u0002\u0002\u04d9\u04df\u0005\u00a4S",
    "\u0002\u04da\u04dc\u0005\u00a8U\u0002\u04db\u04dd\u0005d3\u0002\u04dc",
    "\u04db\u0003\u0002\u0002\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd",
    "\u04df\u0003\u0002\u0002\u0002\u04de\u04d9\u0003\u0002\u0002\u0002\u04de",
    "\u04da\u0003\u0002\u0002\u0002\u04df\u009d\u0003\u0002\u0002\u0002\u04e0",
    "\u04e6\u0005\u00a6T\u0002\u04e1\u04e3\u0005\u00aaV\u0002\u04e2\u04e4",
    "\u0005f4\u0002\u04e3\u04e2\u0003\u0002\u0002\u0002\u04e3\u04e4\u0003",
    "\u0002\u0002\u0002\u04e4\u04e6\u0003\u0002\u0002\u0002\u04e5\u04e0\u0003",
    "\u0002\u0002\u0002\u04e5\u04e1\u0003\u0002\u0002\u0002\u04e6\u009f\u0003",
    "\u0002\u0002\u0002\u04e7\u04e8\u0007\u0013\u0002\u0002\u04e8\u04e9\u0005",
    "\u0010\t\u0002\u04e9\u00a1\u0003\u0002\u0002\u0002\u04ea\u04eb\u0007",
    "\u0013\u0002\u0002\u04eb\u04ec\u0005\u0012\n\u0002\u04ec\u00a3\u0003",
    "\u0002\u0002\u0002\u04ed\u04ef\u0005\u0010\t\u0002\u04ee\u04f0\u0005",
    "d3\u0002\u04ef\u04ee\u0003\u0002\u0002\u0002\u04ef\u04f0\u0003\u0002",
    "\u0002\u0002\u04f0\u00a5\u0003\u0002\u0002\u0002\u04f1\u04f3\u0005\u0012",
    "\n\u0002\u04f2\u04f4\u0005f4\u0002\u04f3\u04f2\u0003\u0002\u0002\u0002",
    "\u04f3\u04f4\u0003\u0002\u0002\u0002\u04f4\u00a7\u0003\u0002\u0002\u0002",
    "\u04f5\u04f8\u0005\u00acW\u0002\u04f6\u04f8\u0005\u00b0Y\u0002\u04f7",
    "\u04f5\u0003\u0002\u0002\u0002\u04f7\u04f6\u0003\u0002\u0002\u0002\u04f8",
    "\u00a9\u0003\u0002\u0002\u0002\u04f9\u04fc\u0005\u00aeX\u0002\u04fa",
    "\u04fc\u0005\u00b2Z\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fb",
    "\u04fa\u0003\u0002\u0002\u0002\u04fc\u00ab\u0003\u0002\u0002\u0002\u04fd",
    "\u04fe\u0007\r\u0002\u0002\u04fe\u0509\u0007B\u0002\u0002\u04ff\u0500",
    "\u0007\r\u0002\u0002\u0500\u0501\u0005\u00b4[\u0002\u0501\u0502\u0007",
    "B\u0002\u0002\u0502\u0509\u0003\u0002\u0002\u0002\u0503\u0504\u0007",
    "\r\u0002\u0002\u0504\u0505\u0005\u00b4[\u0002\u0505\u0506\u0007\u0015",
    "\u0002\u0002\u0506\u0507\u0007B\u0002\u0002\u0507\u0509\u0003\u0002",
    "\u0002\u0002\u0508\u04fd\u0003\u0002\u0002\u0002\u0508\u04ff\u0003\u0002",
    "\u0002\u0002\u0508\u0503\u0003\u0002\u0002\u0002\u0509\u00ad\u0003\u0002",
    "\u0002\u0002\u050a\u050b\u0007\r\u0002\u0002\u050b\u0516\u0007B\u0002",
    "\u0002\u050c\u050d\u0007\r\u0002\u0002\u050d\u050e\u0005\u00b6\\\u0002",
    "\u050e\u050f\u0007B\u0002\u0002\u050f\u0516\u0003\u0002\u0002\u0002",
    "\u0510\u0511\u0007\r\u0002\u0002\u0511\u0512\u0005\u00b6\\\u0002\u0512",
    "\u0513\u0007\u0015\u0002\u0002\u0513\u0514\u0007B\u0002\u0002\u0514",
    "\u0516\u0003\u0002\u0002\u0002\u0515\u050a\u0003\u0002\u0002\u0002\u0515",
    "\u050c\u0003\u0002\u0002\u0002\u0515\u0510\u0003\u0002\u0002\u0002\u0516",
    "\u00af\u0003\u0002\u0002\u0002\u0517\u0519\u0007\u0010\u0002\u0002\u0518",
    "\u051a\u0005,\u0017\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u0519",
    "\u051a\u0003\u0002\u0002\u0002\u051a\u051c\u0003\u0002\u0002\u0002\u051b",
    "\u051d\u0005\u00a0Q\u0002\u051c\u051b\u0003\u0002\u0002\u0002\u051c",
    "\u051d\u0003\u0002\u0002\u0002\u051d\u051e\u0003\u0002\u0002\u0002\u051e",
    "\u052f\u0007\u0011\u0002\u0002\u051f\u0520\u0007\u0010\u0002\u0002\u0520",
    "\u0521\u0005\u00b4[\u0002\u0521\u0522\u0007\u0011\u0002\u0002\u0522",
    "\u052f\u0003\u0002\u0002\u0002\u0523\u0524\u0007\u0010\u0002\u0002\u0524",
    "\u0525\u0005\u00b4[\u0002\u0525\u0527\u0007\u0015\u0002\u0002\u0526",
    "\u0528\u0005,\u0017\u0002\u0527\u0526\u0003\u0002\u0002\u0002\u0527",
    "\u0528\u0003\u0002\u0002\u0002\u0528\u052a\u0003\u0002\u0002\u0002\u0529",
    "\u052b\u0005\u00a0Q\u0002\u052a\u0529\u0003\u0002\u0002\u0002\u052a",
    "\u052b\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c",
    "\u052d\u0007\u0011\u0002\u0002\u052d\u052f\u0003\u0002\u0002\u0002\u052e",
    "\u0517\u0003\u0002\u0002\u0002\u052e\u051f\u0003\u0002\u0002\u0002\u052e",
    "\u0523\u0003\u0002\u0002\u0002\u052f\u00b1\u0003\u0002\u0002\u0002\u0530",
    "\u0532\u0007\u0010\u0002\u0002\u0531\u0533\u0005,\u0017\u0002\u0532",
    "\u0531\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533",
    "\u0535\u0003\u0002\u0002\u0002\u0534\u0536\u0005\u00a2R\u0002\u0535",
    "\u0534\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536",
    "\u0537\u0003\u0002\u0002\u0002\u0537\u0548\u0007\u0011\u0002\u0002\u0538",
    "\u0539\u0007\u0010\u0002\u0002\u0539\u053a\u0005\u00b6\\\u0002\u053a",
    "\u053b\u0007\u0011\u0002\u0002\u053b\u0548\u0003\u0002\u0002\u0002\u053c",
    "\u053d\u0007\u0010\u0002\u0002\u053d\u053e\u0005\u00b6\\\u0002\u053e",
    "\u0540\u0007\u0015\u0002\u0002\u053f\u0541\u0005,\u0017\u0002\u0540",
    "\u053f\u0003\u0002\u0002\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541",
    "\u0543\u0003\u0002\u0002\u0002\u0542\u0544\u0005\u00a2R\u0002\u0543",
    "\u0542\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002\u0002\u0002\u0544",
    "\u0545\u0003\u0002\u0002\u0002\u0545\u0546\u0007\u0011\u0002\u0002\u0546",
    "\u0548\u0003\u0002\u0002\u0002\u0547\u0530\u0003\u0002\u0002\u0002\u0547",
    "\u0538\u0003\u0002\u0002\u0002\u0547\u053c\u0003\u0002\u0002\u0002\u0548",
    "\u00b3\u0003\u0002\u0002\u0002\u0549\u054e\u0005\u00b8]\u0002\u054a",
    "\u054b\u0007\u0015\u0002\u0002\u054b\u054d\u0005\u00b8]\u0002\u054c",
    "\u054a\u0003\u0002\u0002\u0002\u054d\u0550\u0003\u0002\u0002\u0002\u054e",
    "\u054c\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002\u054f",
    "\u00b5\u0003\u0002\u0002\u0002\u0550\u054e\u0003\u0002\u0002\u0002\u0551",
    "\u0556\u0005\u00ba^\u0002\u0552\u0553\u0007\u0015\u0002\u0002\u0553",
    "\u0555\u0005\u00ba^\u0002\u0554\u0552\u0003\u0002\u0002\u0002\u0555",
    "\u0558\u0003\u0002\u0002\u0002\u0556\u0554\u0003\u0002\u0002\u0002\u0556",
    "\u0557\u0003\u0002\u0002\u0002\u0557\u00b7\u0003\u0002\u0002\u0002\u0558",
    "\u0556\u0003\u0002\u0002\u0002\u0559\u055f\u0005\u00a4S\u0002\u055a",
    "\u055b\u0005> \u0002\u055b\u055c\u00070\u0002\u0002\u055c\u055d\u0005",
    "\u009cO\u0002\u055d\u055f\u0003\u0002\u0002\u0002\u055e\u0559\u0003",
    "\u0002\u0002\u0002\u055e\u055a\u0003\u0002\u0002\u0002\u055f\u00b9\u0003",
    "\u0002\u0002\u0002\u0560\u0566\u0005\u00a6T\u0002\u0561\u0562\u0005",
    "@!\u0002\u0562\u0563\u00070\u0002\u0002\u0563\u0564\u0005\u009eP\u0002",
    "\u0564\u0566\u0003\u0002\u0002\u0002\u0565\u0560\u0003\u0002\u0002\u0002",
    "\u0565\u0561\u0003\u0002\u0002\u0002\u0566\u00bb\u0003\u0002\u0002\u0002",
    "\u0567\u0568\u0005\u00c2b\u0002\u0568\u0569\u0005\u00c4c\u0002\u0569",
    "\u056a\u0005\u0004\u0003\u0002\u056a\u00bd\u0003\u0002\u0002\u0002\u056b",
    "\u056c\u0005\u00c2b\u0002\u056c\u056d\u0005\u00c6d\u0002\u056d\u056e",
    "\u0005\u0004\u0003\u0002\u056e\u00bf\u0003\u0002\u0002\u0002\u056f\u0570",
    "\u0005\u00c2b\u0002\u0570\u0571\u0005\u00c8e\u0002\u0571\u0572\u0005",
    "\u0004\u0003\u0002\u0572\u00c1\u0003\u0002\u0002\u0002\u0573\u0574\t",
    "\u000b\u0002\u0002\u0574\u00c3\u0003\u0002\u0002\u0002\u0575\u057a\u0005",
    "\u00caf\u0002\u0576\u0577\u0007\u0015\u0002\u0002\u0577\u0579\u0005",
    "\u00caf\u0002\u0578\u0576\u0003\u0002\u0002\u0002\u0579\u057c\u0003",
    "\u0002\u0002\u0002\u057a\u0578\u0003\u0002\u0002\u0002\u057a\u057b\u0003",
    "\u0002\u0002\u0002\u057b\u00c5\u0003\u0002\u0002\u0002\u057c\u057a\u0003",
    "\u0002\u0002\u0002\u057d\u0582\u0005\u00ccg\u0002\u057e\u057f\u0007",
    "\u0015\u0002\u0002\u057f\u0581\u0005\u00ccg\u0002\u0580\u057e\u0003",
    "\u0002\u0002\u0002\u0581\u0584\u0003\u0002\u0002\u0002\u0582\u0580\u0003",
    "\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u00c7\u0003",
    "\u0002\u0002\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0585\u058a\u0005",
    "\u00ceh\u0002\u0586\u0587\u0007\u0015\u0002\u0002\u0587\u0589\u0005",
    "\u00ceh\u0002\u0588\u0586\u0003\u0002\u0002\u0002\u0589\u058c\u0003",
    "\u0002\u0002\u0002\u058a\u0588\u0003\u0002\u0002\u0002\u058a\u058b\u0003",
    "\u0002\u0002\u0002\u058b\u00c9\u0003\u0002\u0002\u0002\u058c\u058a\u0003",
    "\u0002\u0002\u0002\u058d\u058f\u0005\u0010\t\u0002\u058e\u0590\u0005",
    "`1\u0002\u058f\u058e\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002",
    "\u0002\u0002\u0590\u0595\u0003\u0002\u0002\u0002\u0591\u0592\u0005\u00a8",
    "U\u0002\u0592\u0593\u0005`1\u0002\u0593\u0595\u0003\u0002\u0002\u0002",
    "\u0594\u058d\u0003\u0002\u0002\u0002\u0594\u0591\u0003\u0002\u0002\u0002",
    "\u0595\u00cb\u0003\u0002\u0002\u0002\u0596\u0598\u0005\u0010\t\u0002",
    "\u0597\u0599\u0005d3\u0002\u0598\u0597\u0003\u0002\u0002\u0002\u0598",
    "\u0599\u0003\u0002\u0002\u0002\u0599\u059e\u0003\u0002\u0002\u0002\u059a",
    "\u059b\u0005\u00a8U\u0002\u059b\u059c\u0005d3\u0002\u059c\u059e\u0003",
    "\u0002\u0002\u0002\u059d\u0596\u0003\u0002\u0002\u0002\u059d\u059a\u0003",
    "\u0002\u0002\u0002\u059e\u00cd\u0003\u0002\u0002\u0002\u059f\u05a1\u0005",
    "\u0012\n\u0002\u05a0\u05a2\u0005f4\u0002\u05a1\u05a0\u0003\u0002\u0002",
    "\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a7\u0003\u0002\u0002",
    "\u0002\u05a3\u05a4\u0005\u00aaV\u0002\u05a4\u05a5\u0005f4\u0002\u05a5",
    "\u05a7\u0003\u0002\u0002\u0002\u05a6\u059f\u0003\u0002\u0002\u0002\u05a6",
    "\u05a3\u0003\u0002\u0002\u0002\u05a7\u00cf\u0003\u0002\u0002\u0002\u05a8",
    "\u05ac\u0005\u00d4k\u0002\u05a9\u05ac\u0005\u0116\u008c\u0002\u05aa",
    "\u05ac\u0005\u00be`\u0002\u05ab\u05a8\u0003\u0002\u0002\u0002\u05ab",
    "\u05a9\u0003\u0002\u0002\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002\u05ac",
    "\u00d1\u0003\u0002\u0002\u0002\u05ad\u05b1\u0005\u00d6l\u0002\u05ae",
    "\u05b1\u0005\u0118\u008d\u0002\u05af\u05b1\u0005\u00c0a\u0002\u05b0",
    "\u05ad\u0003\u0002\u0002\u0002\u05b0\u05ae\u0003\u0002\u0002\u0002\u05b0",
    "\u05af\u0003\u0002\u0002\u0002\u05b1\u00d3\u0003\u0002\u0002\u0002\u05b2",
    "\u05b5\u0005\u0110\u0089\u0002\u05b3\u05b5\u0005\u0132\u009a\u0002\u05b4",
    "\u05b2\u0003\u0002\u0002\u0002\u05b4\u05b3\u0003\u0002\u0002\u0002\u05b5",
    "\u00d5\u0003\u0002\u0002\u0002\u05b6\u05b9\u0005\u0112\u008a\u0002\u05b7",
    "\u05b9\u0005\u0134\u009b\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b8",
    "\u05b7\u0003\u0002\u0002\u0002\u05b9\u00d7\u0003\u0002\u0002\u0002\u05ba",
    "\u05bb\u0007_\u0002\u0002\u05bb\u05bc\u0005\b\u0005\u0002\u05bc\u05bd",
    "\u0005\u0004\u0003\u0002\u05bd\u00d9\u0003\u0002\u0002\u0002\u05be\u05bf",
    "\u0007`\u0002\u0002\u05bf\u05c0\u0005\u0104\u0083\u0002\u05c0\u05c1",
    "\u0005\u00dco\u0002\u05c1\u05cc\u0003\u0002\u0002\u0002\u05c2\u05c3",
    "\u0007`\u0002\u0002\u05c3\u05c4\u0005\u0104\u0083\u0002\u05c4\u05c5",
    "\u0005\u00dep\u0002\u05c5\u05cc\u0003\u0002\u0002\u0002\u05c6\u05c7",
    "\u0007`\u0002\u0002\u05c7\u05c8\u0005\u0104\u0083\u0002\u05c8\u05c9",
    "\u0005\u00dco\u0002\u05c9\u05ca\u0005\u00dep\u0002\u05ca\u05cc\u0003",
    "\u0002\u0002\u0002\u05cb\u05be\u0003\u0002\u0002\u0002\u05cb\u05c2\u0003",
    "\u0002\u0002\u0002\u05cb\u05c6\u0003\u0002\u0002\u0002\u05cc\u00db\u0003",
    "\u0002\u0002\u0002\u05cd\u05ce\u0007H\u0002\u0002\u05ce\u05cf\u0007",
    "\u000e\u0002\u0002\u05cf\u05d0\u0005\u00e0q\u0002\u05d0\u05d1\u0007",
    "\u000f\u0002\u0002\u05d1\u05d2\u0005\u0104\u0083\u0002\u05d2\u00dd\u0003",
    "\u0002\u0002\u0002\u05d3\u05d4\u0007S\u0002\u0002\u05d4\u05d5\u0005",
    "\u0104\u0083\u0002\u05d5\u00df\u0003\u0002\u0002\u0002\u05d6\u05d7\u0005",
    "\u0010\t\u0002\u05d7\u00e1\u0003\u0002\u0002\u0002\u05d8\u05d9\u0007",
    "e\u0002\u0002\u05d9\u05da\u0007\u000e\u0002\u0002\u05da\u05db\u0005",
    "\b\u0005\u0002\u05db\u05dc\u0007\u000f\u0002\u0002\u05dc\u05dd\u0005",
    "~@\u0002\u05dd\u00e3\u0003\u0002\u0002\u0002\u05de\u05df\u0005\u00e8",
    "u\u0002\u05df\u05e0\u00070\u0002\u0002\u05e0\u05e1\u0005\u00e6t\u0002",
    "\u05e1\u00e5\u0003\u0002\u0002\u0002\u05e2\u05e5\u0005~@\u0002\u05e3",
    "\u05e5\u0005\u0110\u0089\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e4",
    "\u05e3\u0003\u0002\u0002\u0002\u05e5\u00e7\u0003\u0002\u0002\u0002\u05e6",
    "\u05ea\u0005\u0014\u000b\u0002\u05e7\u05ea\u0007f\u0002\u0002\u05e8",
    "\u05ea\u0007E\u0002\u0002\u05e9\u05e6\u0003\u0002\u0002\u0002\u05e9",
    "\u05e7\u0003\u0002\u0002\u0002\u05e9\u05e8\u0003\u0002\u0002\u0002\u05ea",
    "\u00e9\u0003\u0002\u0002\u0002\u05eb\u05ec\u0007]\u0002\u0002\u05ec",
    "\u05ed\u0007\u000e\u0002\u0002\u05ed\u05ee\u0005\b\u0005\u0002\u05ee",
    "\u05ef\u0007\u000f\u0002\u0002\u05ef\u05f0\u0005\u00ecw\u0002\u05f0",
    "\u00eb\u0003\u0002\u0002\u0002\u05f1\u05f3\u0007\r\u0002\u0002\u05f2",
    "\u05f4\u0005\u00eex\u0002\u05f3\u05f2\u0003\u0002\u0002\u0002\u05f3",
    "\u05f4\u0003\u0002\u0002\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5",
    "\u0601\u0007B\u0002\u0002\u05f6\u05f8\u0007\r\u0002\u0002\u05f7\u05f9",
    "\u0005\u00eex\u0002\u05f8\u05f7\u0003\u0002\u0002\u0002\u05f8\u05f9",
    "\u0003\u0002\u0002\u0002\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u05fc",
    "\u0005\u00f2z\u0002\u05fb\u05fd\u0005\u00eex\u0002\u05fc\u05fb\u0003",
    "\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003",
    "\u0002\u0002\u0002\u05fe\u05ff\u0007B\u0002\u0002\u05ff\u0601\u0003",
    "\u0002\u0002\u0002\u0600\u05f1\u0003\u0002\u0002\u0002\u0600\u05f6\u0003",
    "\u0002\u0002\u0002\u0601\u00ed\u0003\u0002\u0002\u0002\u0602\u0604\u0005",
    "\u00f0y\u0002\u0603\u0602\u0003\u0002\u0002\u0002\u0604\u0605\u0003",
    "\u0002\u0002\u0002\u0605\u0603\u0003\u0002\u0002\u0002\u0605\u0606\u0003",
    "\u0002\u0002\u0002\u0606\u00ef\u0003\u0002\u0002\u0002\u0607\u0608\u0007",
    "G\u0002\u0002\u0608\u0609\u0005\b\u0005\u0002\u0609\u060b\u00070\u0002",
    "\u0002\u060a\u060c\u0005\u0084C\u0002\u060b\u060a\u0003\u0002\u0002",
    "\u0002\u060b\u060c\u0003\u0002\u0002\u0002\u060c\u00f1\u0003\u0002\u0002",
    "\u0002\u060d\u060e\u0007M\u0002\u0002\u060e\u0610\u00070\u0002\u0002",
    "\u060f\u0611\u0005\u0084C\u0002\u0610\u060f\u0003\u0002\u0002\u0002",
    "\u0610\u0611\u0003\u0002\u0002\u0002\u0611\u00f3\u0003\u0002\u0002\u0002",
    "\u0612\u0613\u0007O\u0002\u0002\u0613\u0614\u0005~@\u0002\u0614\u0615",
    "\u0007d\u0002\u0002\u0615\u0616\u0007\u000e\u0002\u0002\u0616\u0617",
    "\u0005\b\u0005\u0002\u0617\u0618\u0007\u000f\u0002\u0002\u0618\u0619",
    "\u0005\u0004\u0003\u0002\u0619\u067e\u0003\u0002\u0002\u0002\u061a\u061b",
    "\u0007d\u0002\u0002\u061b\u061c\u0007\u000e\u0002\u0002\u061c\u061d",
    "\u0005\b\u0005\u0002\u061d\u061e\u0007\u000f\u0002\u0002\u061e\u061f",
    "\u0005~@\u0002\u061f\u067e\u0003\u0002\u0002\u0002\u0620\u0621\u0007",
    "T\u0002\u0002\u0621\u0623\u0007\u000e\u0002\u0002\u0622\u0624\u0005",
    "\u0006\u0004\u0002\u0623\u0622\u0003\u0002\u0002\u0002\u0623\u0624\u0003",
    "\u0002\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0627\u0007",
    "\u0014\u0002\u0002\u0626\u0628\u0005\b\u0005\u0002\u0627\u0626\u0003",
    "\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628\u0629\u0003",
    "\u0002\u0002\u0002\u0629\u062b\u0007\u0014\u0002\u0002\u062a\u062c\u0005",
    "\b\u0005\u0002\u062b\u062a\u0003\u0002\u0002\u0002\u062b\u062c\u0003",
    "\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002\u062d\u062e\u0007",
    "\u000f\u0002\u0002\u062e\u067e\u0005~@\u0002\u062f\u0630\u0007T\u0002",
    "\u0002\u0630\u0631\u0007\u000e\u0002\u0002\u0631\u0632\u0007b\u0002",
    "\u0002\u0632\u0633\u0005\u0108\u0085\u0002\u0633\u0635\u0007\u0014\u0002",
    "\u0002\u0634\u0636\u0005\b\u0005\u0002\u0635\u0634\u0003\u0002\u0002",
    "\u0002\u0635\u0636\u0003\u0002\u0002\u0002\u0636\u0637\u0003\u0002\u0002",
    "\u0002\u0637\u0639\u0007\u0014\u0002\u0002\u0638\u063a\u0005\b\u0005",
    "\u0002\u0639\u0638\u0003\u0002\u0002\u0002\u0639\u063a\u0003\u0002\u0002",
    "\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b\u063c\u0007\u000f\u0002",
    "\u0002\u063c\u063d\u0005~@\u0002\u063d\u067e\u0003\u0002\u0002\u0002",
    "\u063e\u063f\u0007T\u0002\u0002\u063f\u0640\u0007\u000e\u0002\u0002",
    "\u0640\u0642\u0005\u00bc_\u0002\u0641\u0643\u0005\b\u0005\u0002\u0642",
    "\u0641\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643",
    "\u0644\u0003\u0002\u0002\u0002\u0644\u0646\u0007\u0014\u0002\u0002\u0645",
    "\u0647\u0005\b\u0005\u0002\u0646\u0645\u0003\u0002\u0002\u0002\u0646",
    "\u0647\u0003\u0002\u0002\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648",
    "\u0649\u0007\u000f\u0002\u0002\u0649\u064a\u0005~@\u0002\u064a\u067e",
    "\u0003\u0002\u0002\u0002\u064b\u064c\u0007T\u0002\u0002\u064c\u064d",
    "\u0007\u000e\u0002\u0002\u064d\u064e\u0005T+\u0002\u064e\u064f\u0007",
    "X\u0002\u0002\u064f\u0650\u0005\b\u0005\u0002\u0650\u0651\u0007\u000f",
    "\u0002\u0002\u0651\u0652\u0005~@\u0002\u0652\u067e\u0003\u0002\u0002",
    "\u0002\u0653\u0654\u0007T\u0002\u0002\u0654\u0655\u0007\u000e\u0002",
    "\u0002\u0655\u0656\u0007b\u0002\u0002\u0656\u0657\u0005\u00f8}\u0002",
    "\u0657\u0658\u0007X\u0002\u0002\u0658\u0659\u0005\b\u0005\u0002\u0659",
    "\u065a\u0007\u000f\u0002\u0002\u065a\u065b\u0005~@\u0002\u065b\u067e",
    "\u0003\u0002\u0002\u0002\u065c\u065d\u0007T\u0002\u0002\u065d\u065e",
    "\u0007\u000e\u0002\u0002\u065e\u065f\u0005\u00f6|\u0002\u065f\u0660",
    "\u0007X\u0002\u0002\u0660\u0661\u0005\b\u0005\u0002\u0661\u0662\u0007",
    "\u000f\u0002\u0002\u0662\u0663\u0005~@\u0002\u0663\u067e\u0003\u0002",
    "\u0002\u0002\u0664\u0665\u0007T\u0002\u0002\u0665\u0666\u0007\u000e",
    "\u0002\u0002\u0666\u0667\u0005T+\u0002\u0667\u0668\u0007p\u0002\u0002",
    "\u0668\u0669\u0005l7\u0002\u0669\u066a\u0007\u000f\u0002\u0002\u066a",
    "\u066b\u0005~@\u0002\u066b\u067e\u0003\u0002\u0002\u0002\u066c\u066d",
    "\u0007T\u0002\u0002\u066d\u066e\u0007\u000e\u0002\u0002\u066e\u066f",
    "\u0007b\u0002\u0002\u066f\u0670\u0005\u00f8}\u0002\u0670\u0671\u0007",
    "p\u0002\u0002\u0671\u0672\u0005l7\u0002\u0672\u0673\u0007\u000f\u0002",
    "\u0002\u0673\u0674\u0005~@\u0002\u0674\u067e\u0003\u0002\u0002\u0002",
    "\u0675\u0676\u0007T\u0002\u0002\u0676\u0677\u0007\u000e\u0002\u0002",
    "\u0677\u0678\u0005\u00f6|\u0002\u0678\u0679\u0007p\u0002\u0002\u0679",
    "\u067a\u0005l7\u0002\u067a\u067b\u0007\u000f\u0002\u0002\u067b\u067c",
    "\u0005~@\u0002\u067c\u067e\u0003\u0002\u0002\u0002\u067d\u0612\u0003",
    "\u0002\u0002\u0002\u067d\u061a\u0003\u0002\u0002\u0002\u067d\u0620\u0003",
    "\u0002\u0002\u0002\u067d\u062f\u0003\u0002\u0002\u0002\u067d\u063e\u0003",
    "\u0002\u0002\u0002\u067d\u064b\u0003\u0002\u0002\u0002\u067d\u0653\u0003",
    "\u0002\u0002\u0002\u067d\u065c\u0003\u0002\u0002\u0002\u067d\u0664\u0003",
    "\u0002\u0002\u0002\u067d\u066c\u0003\u0002\u0002\u0002\u067d\u0675\u0003",
    "\u0002\u0002\u0002\u067e\u00f5\u0003\u0002\u0002\u0002\u067f\u0680\u0005",
    "\u00c2b\u0002\u0680\u0681\u0005\u00f8}\u0002\u0681\u00f7\u0003\u0002",
    "\u0002\u0002\u0682\u0683\u0005\u0010\t\u0002\u0683\u00f9\u0003\u0002",
    "\u0002\u0002\u0684\u0685\u0007V\u0002\u0002\u0685\u0686\u0007\u000e",
    "\u0002\u0002\u0686\u0687\u0005\b\u0005\u0002\u0687\u0688\u0007\u000f",
    "\u0002\u0002\u0688\u068b\u0005~@\u0002\u0689\u068a\u0007P\u0002\u0002",
    "\u068a\u068c\u0005~@\u0002\u068b\u0689\u0003\u0002\u0002\u0002\u068b",
    "\u068c\u0003\u0002\u0002\u0002\u068c\u00fb\u0003\u0002\u0002\u0002\u068d",
    "\u0690\u0005\u00f4{\u0002\u068e\u0690\u0005\u00eav\u0002\u068f\u068d",
    "\u0003\u0002\u0002\u0002\u068f\u068e\u0003\u0002\u0002\u0002\u0690\u00fd",
    "\u0003\u0002\u0002\u0002\u0691\u0692\u0007K\u0002\u0002\u0692\u0693",
    "\u0005\u00e8u\u0002\u0693\u0694\u0005\u0004\u0003\u0002\u0694\u0698",
    "\u0003\u0002\u0002\u0002\u0695\u0696\u0007K\u0002\u0002\u0696\u0698",
    "\u0005\u0004\u0003\u0002\u0697\u0691\u0003\u0002\u0002\u0002\u0697\u0695",
    "\u0003\u0002\u0002\u0002\u0698\u00ff\u0003\u0002\u0002\u0002\u0699\u069a",
    "\u0007F\u0002\u0002\u069a\u069b\u0005\u00e8u\u0002\u069b\u069c\u0005",
    "\u0004\u0003\u0002\u069c\u06a0\u0003\u0002\u0002\u0002\u069d\u069e\u0007",
    "F\u0002\u0002\u069e\u06a0\u0005\u0004\u0003\u0002\u069f\u0699\u0003",
    "\u0002\u0002\u0002\u069f\u069d\u0003\u0002\u0002\u0002\u06a0\u0101\u0003",
    "\u0002\u0002\u0002\u06a1\u06a2\u0005\u0104\u0083\u0002\u06a2\u0103\u0003",
    "\u0002\u0002\u0002\u06a3\u06a5\u0007\r\u0002\u0002\u06a4\u06a6\u0005",
    "\u0084C\u0002\u06a5\u06a4\u0003\u0002\u0002\u0002\u06a5\u06a6\u0003",
    "\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7\u06a8\u0007",
    "B\u0002\u0002\u06a8\u0105\u0003\u0002\u0002\u0002\u06a9\u06aa\u0007",
    "b\u0002\u0002\u06aa\u06ab\u0005\u010a\u0086\u0002\u06ab\u06ac\u0005",
    "\u0004\u0003\u0002\u06ac\u0107\u0003\u0002\u0002\u0002\u06ad\u06b2\u0005",
    "\u010c\u0087\u0002\u06ae\u06af\u0007\u0015\u0002\u0002\u06af\u06b1\u0005",
    "\u010c\u0087\u0002\u06b0\u06ae\u0003\u0002\u0002\u0002\u06b1\u06b4\u0003",
    "\u0002\u0002\u0002\u06b2\u06b0\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003",
    "\u0002\u0002\u0002\u06b3\u0109\u0003\u0002\u0002\u0002\u06b4\u06b2\u0003",
    "\u0002\u0002\u0002\u06b5\u06ba\u0005\u010e\u0088\u0002\u06b6\u06b7\u0007",
    "\u0015\u0002\u0002\u06b7\u06b9\u0005\u010e\u0088\u0002\u06b8\u06b6\u0003",
    "\u0002\u0002\u0002\u06b9\u06bc\u0003\u0002\u0002\u0002\u06ba\u06b8\u0003",
    "\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002\u06bb\u010b\u0003",
    "\u0002\u0002\u0002\u06bc\u06ba\u0003\u0002\u0002\u0002\u06bd\u06bf\u0005",
    "\u0010\t\u0002\u06be\u06c0\u0005`1\u0002\u06bf\u06be\u0003\u0002\u0002",
    "\u0002\u06bf\u06c0\u0003\u0002\u0002\u0002\u06c0\u06c5\u0003\u0002\u0002",
    "\u0002\u06c1\u06c2\u0005\u00a8U\u0002\u06c2\u06c3\u0005`1\u0002\u06c3",
    "\u06c5\u0003\u0002\u0002\u0002\u06c4\u06bd\u0003\u0002\u0002\u0002\u06c4",
    "\u06c1\u0003\u0002\u0002\u0002\u06c5\u010d\u0003\u0002\u0002\u0002\u06c6",
    "\u06c8\u0005\u0010\t\u0002\u06c7\u06c9\u0005d3\u0002\u06c8\u06c7\u0003",
    "\u0002\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002\u06c9\u06ce\u0003",
    "\u0002\u0002\u0002\u06ca\u06cb\u0005\u00a8U\u0002\u06cb\u06cc\u0005",
    "d3\u0002\u06cc\u06ce\u0003\u0002\u0002\u0002\u06cd\u06c6\u0003\u0002",
    "\u0002\u0002\u06cd\u06ca\u0003\u0002\u0002\u0002\u06ce\u010f\u0003\u0002",
    "\u0002\u0002\u06cf\u06d0\u0007U\u0002\u0002\u06d0\u06d1\u0005\u0010",
    "\t\u0002\u06d1\u06d2\u0007\u000e\u0002\u0002\u06d2\u06d3\u0005\u013c",
    "\u009f\u0002\u06d3\u06d4\u0007\u000f\u0002\u0002\u06d4\u06d5\u0007\r",
    "\u0002\u0002\u06d5\u06d6\u0005\u014e\u00a8\u0002\u06d6\u06d7\u0007B",
    "\u0002\u0002\u06d7\u0111\u0003\u0002\u0002\u0002\u06d8\u06d9\u0007U",
    "\u0002\u0002\u06d9\u06da\u0005\u0012\n\u0002\u06da\u06db\u0007\u000e",
    "\u0002\u0002\u06db\u06dc\u0005\u013c\u009f\u0002\u06dc\u06dd\u0007\u000f",
    "\u0002\u0002\u06dd\u06de\u0007\r\u0002\u0002\u06de\u06df\u0005\u014e",
    "\u00a8\u0002\u06df\u06e0\u0007B\u0002\u0002\u06e0\u0113\u0003\u0002",
    "\u0002\u0002\u06e1\u06e3\u0007U\u0002\u0002\u06e2\u06e4\u0005\u0010",
    "\t\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003\u0002",
    "\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5\u06e6\u0007\u000e",
    "\u0002\u0002\u06e6\u06e7\u0005\u013c\u009f\u0002\u06e7\u06e8\u0007\u000f",
    "\u0002\u0002\u06e8\u06e9\u0007\r\u0002\u0002\u06e9\u06ea\u0005\u014e",
    "\u00a8\u0002\u06ea\u06eb\u0007B\u0002\u0002\u06eb\u0115\u0003\u0002",
    "\u0002\u0002\u06ec\u06ed\u0007I\u0002\u0002\u06ed\u06ee\u0005\u0010",
    "\t\u0002\u06ee\u06ef\u0005\u011e\u0090\u0002\u06ef\u0117\u0003\u0002",
    "\u0002\u0002\u06f0\u06f1\u0007I\u0002\u0002\u06f1\u06f2\u0005\u0012",
    "\n\u0002\u06f2\u06f3\u0005\u0120\u0091\u0002\u06f3\u0119\u0003\u0002",
    "\u0002\u0002\u06f4\u06f6\u0007I\u0002\u0002\u06f5\u06f7\u0005\u0010",
    "\t\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002",
    "\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9\u0005\u011e",
    "\u0090\u0002\u06f9\u011b\u0003\u0002\u0002\u0002\u06fa\u06fc\u0007I",
    "\u0002\u0002\u06fb\u06fd\u0005\u0012\n\u0002\u06fc\u06fb\u0003\u0002",
    "\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u06fe\u0003\u0002",
    "\u0002\u0002\u06fe\u06ff\u0005\u0120\u0091\u0002\u06ff\u011d\u0003\u0002",
    "\u0002\u0002\u0700\u0702\u0005\u0122\u0092\u0002\u0701\u0700\u0003\u0002",
    "\u0002\u0002\u0701\u0702\u0003\u0002\u0002\u0002\u0702\u0703\u0003\u0002",
    "\u0002\u0002\u0703\u0705\u0007\r\u0002\u0002\u0704\u0706\u0005\u0126",
    "\u0094\u0002\u0705\u0704\u0003\u0002\u0002\u0002\u0705\u0706\u0003\u0002",
    "\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0708\u0007B",
    "\u0002\u0002\u0708\u011f\u0003\u0002\u0002\u0002\u0709\u070b\u0005\u0124",
    "\u0093\u0002\u070a\u0709\u0003\u0002\u0002\u0002\u070a\u070b\u0003\u0002",
    "\u0002\u0002\u070b\u070c\u0003\u0002\u0002\u0002\u070c\u070e\u0007\r",
    "\u0002\u0002\u070d\u070f\u0005\u0128\u0095\u0002\u070e\u070d\u0003\u0002",
    "\u0002\u0002\u070e\u070f\u0003\u0002\u0002\u0002\u070f\u0710\u0003\u0002",
    "\u0002\u0002\u0710\u0711\u0007B\u0002\u0002\u0711\u0121\u0003\u0002",
    "\u0002\u0002\u0712\u0713\u0007R\u0002\u0002\u0713\u0714\u0005T+\u0002",
    "\u0714\u0123\u0003\u0002\u0002\u0002\u0715\u0716\u0007R\u0002\u0002",
    "\u0716\u0717\u0005V,\u0002\u0717\u0125\u0003\u0002\u0002\u0002\u0718",
    "\u0719\u0005\u012a\u0096\u0002\u0719\u0127\u0003\u0002\u0002\u0002\u071a",
    "\u071b\u0005\u012c\u0097\u0002\u071b\u0129\u0003\u0002\u0002\u0002\u071c",
    "\u071e\u0005\u012e\u0098\u0002\u071d\u071c\u0003\u0002\u0002\u0002\u071e",
    "\u071f\u0003\u0002\u0002\u0002\u071f\u071d\u0003\u0002\u0002\u0002\u071f",
    "\u0720\u0003\u0002\u0002\u0002\u0720\u012b\u0003\u0002\u0002\u0002\u0721",
    "\u0723\u0005\u0130\u0099\u0002\u0722\u0721\u0003\u0002\u0002\u0002\u0723",
    "\u0724\u0003\u0002\u0002\u0002\u0724\u0722\u0003\u0002\u0002\u0002\u0724",
    "\u0725\u0003\u0002\u0002\u0002\u0725\u012d\u0003\u0002\u0002\u0002\u0726",
    "\u0727\u0007r\u0002\u0002\u0727\u072b\u0005\u015c\u00af\u0002\u0728",
    "\u072b\u0005\u015c\u00af\u0002\u0729\u072b\u0007\u0014\u0002\u0002\u072a",
    "\u0726\u0003\u0002\u0002\u0002\u072a\u0728\u0003\u0002\u0002\u0002\u072a",
    "\u0729\u0003\u0002\u0002\u0002\u072b\u012f\u0003\u0002\u0002\u0002\u072c",
    "\u072d\u0007r\u0002\u0002\u072d\u0731\u0005\u015e\u00b0\u0002\u072e",
    "\u0731\u0005\u015e\u00b0\u0002\u072f\u0731\u0007\u0014\u0002\u0002\u0730",
    "\u072c\u0003\u0002\u0002\u0002\u0730\u072e\u0003\u0002\u0002\u0002\u0730",
    "\u072f\u0003\u0002\u0002\u0002\u0731\u0131\u0003\u0002\u0002\u0002\u0732",
    "\u0733\u0007U\u0002\u0002\u0733\u0734\u0007 \u0002\u0002\u0734\u0735",
    "\u0005\u0010\t\u0002\u0735\u0736\u0007\u000e\u0002\u0002\u0736\u0737",
    "\u0005\u013e\u00a0\u0002\u0737\u0738\u0007\u000f\u0002\u0002\u0738\u0739",
    "\u0007\r\u0002\u0002\u0739\u073a\u0005\u0156\u00ac\u0002\u073a\u073b",
    "\u0007B\u0002\u0002\u073b\u0133\u0003\u0002\u0002\u0002\u073c\u073d",
    "\u0007U\u0002\u0002\u073d\u073e\u0007 \u0002\u0002\u073e\u073f\u0005",
    "\u0012\n\u0002\u073f\u0740\u0007\u000e\u0002\u0002\u0740\u0741\u0005",
    "\u013e\u00a0\u0002\u0741\u0742\u0007\u000f\u0002\u0002\u0742\u0743\u0007",
    "\r\u0002\u0002\u0743\u0744\u0005\u0156\u00ac\u0002\u0744\u0745\u0007",
    "B\u0002\u0002\u0745\u0135\u0003\u0002\u0002\u0002\u0746\u0747\u0007",
    "U\u0002\u0002\u0747\u0749\u0007 \u0002\u0002\u0748\u074a\u0005\u0012",
    "\n\u0002\u0749\u0748\u0003\u0002\u0002\u0002\u0749\u074a\u0003\u0002",
    "\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u074c\u0007\u000e",
    "\u0002\u0002\u074c\u074d\u0005\u013e\u00a0\u0002\u074d\u074e\u0007\u000f",
    "\u0002\u0002\u074e\u074f\u0007\r\u0002\u0002\u074f\u0750\u0005\u0156",
    "\u00ac\u0002\u0750\u0751\u0007B\u0002\u0002\u0751\u0137\u0003\u0002",
    "\u0002\u0002\u0752\u0753\u0005\u013c\u009f\u0002\u0753\u0139\u0003\u0002",
    "\u0002\u0002\u0754\u0755\u0005\u013e\u00a0\u0002\u0755\u013b\u0003\u0002",
    "\u0002\u0002\u0756\u0761\u0003\u0002\u0002\u0002\u0757\u0761\u0005\u0144",
    "\u00a3\u0002\u0758\u075a\u0005\u0140\u00a1\u0002\u0759\u075b\u0007\u0015",
    "\u0002\u0002\u075a\u0759\u0003\u0002\u0002\u0002\u075a\u075b\u0003\u0002",
    "\u0002\u0002\u075b\u0761\u0003\u0002\u0002\u0002\u075c\u075d\u0005\u0140",
    "\u00a1\u0002\u075d\u075e\u0007\u0015\u0002\u0002\u075e\u075f\u0005\u0144",
    "\u00a3\u0002\u075f\u0761\u0003\u0002\u0002\u0002\u0760\u0756\u0003\u0002",
    "\u0002\u0002\u0760\u0757\u0003\u0002\u0002\u0002\u0760\u0758\u0003\u0002",
    "\u0002\u0002\u0760\u075c\u0003\u0002\u0002\u0002\u0761\u013d\u0003\u0002",
    "\u0002\u0002\u0762\u076d\u0003\u0002\u0002\u0002\u0763\u076d\u0005\u0146",
    "\u00a4\u0002\u0764\u0766\u0005\u0142\u00a2\u0002\u0765\u0767\u0007\u0015",
    "\u0002\u0002\u0766\u0765\u0003\u0002\u0002\u0002\u0766\u0767\u0003\u0002",
    "\u0002\u0002\u0767\u076d\u0003\u0002\u0002\u0002\u0768\u0769\u0005\u0142",
    "\u00a2\u0002\u0769\u076a\u0007\u0015\u0002\u0002\u076a\u076b\u0005\u0146",
    "\u00a4\u0002\u076b\u076d\u0003\u0002\u0002\u0002\u076c\u0762\u0003\u0002",
    "\u0002\u0002\u076c\u0763\u0003\u0002\u0002\u0002\u076c\u0764\u0003\u0002",
    "\u0002\u0002\u076c\u0768\u0003\u0002\u0002\u0002\u076d\u013f\u0003\u0002",
    "\u0002\u0002\u076e\u0773\u0005\u0148\u00a5\u0002\u076f\u0770\u0007\u0015",
    "\u0002\u0002\u0770\u0772\u0005\u0148\u00a5\u0002\u0771\u076f\u0003\u0002",
    "\u0002\u0002\u0772\u0775\u0003\u0002\u0002\u0002\u0773\u0771\u0003\u0002",
    "\u0002\u0002\u0773\u0774\u0003\u0002\u0002\u0002\u0774\u0141\u0003\u0002",
    "\u0002\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0776\u077b\u0005\u014a",
    "\u00a6\u0002\u0777\u0778\u0007\u0015\u0002\u0002\u0778\u077a\u0005\u014a",
    "\u00a6\u0002\u0779\u0777\u0003\u0002\u0002\u0002\u077a\u077d\u0003\u0002",
    "\u0002\u0002\u077b\u0779\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002",
    "\u0002\u0002\u077c\u0143\u0003\u0002\u0002\u0002\u077d\u077b\u0003\u0002",
    "\u0002\u0002\u077e\u077f\u0005\u00a0Q\u0002\u077f\u0145\u0003\u0002",
    "\u0002\u0002\u0780\u0781\u0005\u00a2R\u0002\u0781\u0147\u0003\u0002",
    "\u0002\u0002\u0782\u0783\u0005\u009cO\u0002\u0783\u0149\u0003\u0002",
    "\u0002\u0002\u0784\u0785\u0005\u009eP\u0002\u0785\u014b\u0003\u0002",
    "\u0002\u0002\u0786\u0789\u0005\u0010\t\u0002\u0787\u0789\u0005\u001c",
    "\u000f\u0002\u0788\u0786\u0003\u0002\u0002\u0002\u0788\u0787\u0003\u0002",
    "\u0002\u0002\u0789\u014d\u0003\u0002\u0002\u0002\u078a\u078b\u0005\u0152",
    "\u00aa\u0002\u078b\u014f\u0003\u0002\u0002\u0002\u078c\u078d\u0005\u0154",
    "\u00ab\u0002\u078d\u0151\u0003\u0002\u0002\u0002\u078e\u0790\u0005\u0086",
    "D\u0002\u078f\u078e\u0003\u0002\u0002\u0002\u078f\u0790\u0003\u0002",
    "\u0002\u0002\u0790\u0153\u0003\u0002\u0002\u0002\u0791\u0793\u0005\u0088",
    "E\u0002\u0792\u0791\u0003\u0002\u0002\u0002\u0792\u0793\u0003\u0002",
    "\u0002\u0002\u0793\u0155\u0003\u0002\u0002\u0002\u0794\u0795\u0005\u0150",
    "\u00a9\u0002\u0795\u0157\u0003\u0002\u0002\u0002\u0796\u0797\u0007\r",
    "\u0002\u0002\u0797\u0798\u0005\u014e\u00a8\u0002\u0798\u0799\u0007B",
    "\u0002\u0002\u0799\u079c\u0003\u0002\u0002\u0002\u079a\u079c\u0005h",
    "5\u0002\u079b\u0796\u0003\u0002\u0002\u0002\u079b\u079a\u0003\u0002",
    "\u0002\u0002\u079c\u0159\u0003\u0002\u0002\u0002\u079d\u079e\u0007\r",
    "\u0002\u0002\u079e\u079f\u0005\u014e\u00a8\u0002\u079f\u07a0\u0007B",
    "\u0002\u0002\u07a0\u07a3\u0003\u0002\u0002\u0002\u07a1\u07a3\u0005l",
    "7\u0002\u07a2\u079d\u0003\u0002\u0002\u0002\u07a2\u07a1\u0003\u0002",
    "\u0002\u0002\u07a3\u015b\u0003\u0002\u0002\u0002\u07a4\u07a5\u0007n",
    "\u0002\u0002\u07a5\u07a6\u0005> \u0002\u07a6\u07a7\u0007\u000e\u0002",
    "\u0002\u07a7\u07a8\u0007\u000f\u0002\u0002\u07a8\u07a9\u0007\r\u0002",
    "\u0002\u07a9\u07aa\u0005\u014e\u00a8\u0002\u07aa\u07ab\u0007B\u0002",
    "\u0002\u07ab\u07bf\u0003\u0002\u0002\u0002\u07ac\u07ad\u0007q\u0002",
    "\u0002\u07ad\u07ae\u0005> \u0002\u07ae\u07af\u0007\u000e\u0002\u0002",
    "\u07af\u07b0\u0005\u0160\u00b1\u0002\u07b0\u07b1\u0007\u000f\u0002\u0002",
    "\u07b1\u07b2\u0007\r\u0002\u0002\u07b2\u07b3\u0005\u014e\u00a8\u0002",
    "\u07b3\u07b4\u0007B\u0002\u0002\u07b4\u07bf\u0003\u0002\u0002\u0002",
    "\u07b5\u07b6\u0005> \u0002\u07b6\u07b7\u0007\u000e\u0002\u0002\u07b7",
    "\u07b8\u0005\u0138\u009d\u0002\u07b8\u07b9\u0007\u000f\u0002\u0002\u07b9",
    "\u07ba\u0007\r\u0002\u0002\u07ba\u07bb\u0005\u014e\u00a8\u0002\u07bb",
    "\u07bc\u0007B\u0002\u0002\u07bc\u07bf\u0003\u0002\u0002\u0002\u07bd",
    "\u07bf\u0005\u0162\u00b2\u0002\u07be\u07a4\u0003\u0002\u0002\u0002\u07be",
    "\u07ac\u0003\u0002\u0002\u0002\u07be\u07b5\u0003\u0002\u0002\u0002\u07be",
    "\u07bd\u0003\u0002\u0002\u0002\u07bf\u015d\u0003\u0002\u0002\u0002\u07c0",
    "\u07c1\u0005@!\u0002\u07c1\u07c2\u0007\u000e\u0002\u0002\u07c2\u07c3",
    "\u0005\u0138\u009d\u0002\u07c3\u07c4\u0007\u000f\u0002\u0002\u07c4\u07c5",
    "\u0007\r\u0002\u0002\u07c5\u07c6\u0005\u014e\u00a8\u0002\u07c6\u07c7",
    "\u0007B\u0002\u0002\u07c7\u07da\u0003\u0002\u0002\u0002\u07c8\u07c9",
    "\u0007n\u0002\u0002\u07c9\u07ca\u0005@!\u0002\u07ca\u07cb\u0007\u000e",
    "\u0002\u0002\u07cb\u07cc\u0007\u000f\u0002\u0002\u07cc\u07cd\u0007\r",
    "\u0002\u0002\u07cd\u07ce\u0005\u014e\u00a8\u0002\u07ce\u07cf\u0007B",
    "\u0002\u0002\u07cf\u07da\u0003\u0002\u0002\u0002\u07d0\u07d1\u0007q",
    "\u0002\u0002\u07d1\u07d2\u0005@!\u0002\u07d2\u07d3\u0007\u000e\u0002",
    "\u0002\u07d3\u07d4\u0005\u0160\u00b1\u0002\u07d4\u07d5\u0007\u000f\u0002",
    "\u0002\u07d5\u07d6\u0007\r\u0002\u0002\u07d6\u07d7\u0005\u014e\u00a8",
    "\u0002\u07d7\u07d8\u0007B\u0002\u0002\u07d8\u07da\u0003\u0002\u0002",
    "\u0002\u07d9\u07c0\u0003\u0002\u0002\u0002\u07d9\u07c8\u0003\u0002\u0002",
    "\u0002\u07d9\u07d0\u0003\u0002\u0002\u0002\u07da\u015f\u0003\u0002\u0002",
    "\u0002\u07db\u07dc\u0005\u0148\u00a5\u0002\u07dc\u0161\u0003\u0002\u0002",
    "\u0002\u07dd\u07de\u0007 \u0002\u0002\u07de\u07df\u0005> \u0002\u07df",
    "\u07e0\u0007\u000e\u0002\u0002\u07e0\u07e1\u0005\u013a\u009e\u0002\u07e1",
    "\u07e2\u0007\u000f\u0002\u0002\u07e2\u07e3\u0007\r\u0002\u0002\u07e3",
    "\u07e4\u0005\u0156\u00ac\u0002\u07e4\u07e5\u0007B\u0002\u0002\u07e5",
    "\u0163\u0003\u0002\u0002\u0002\u07e6\u07e8\u0005\u0166\u00b4\u0002\u07e7",
    "\u07e6\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003\u0002\u0002\u0002\u07e8",
    "\u0165\u0003\u0002\u0002\u0002\u07e9\u07ea\u0005\u0084C\u0002\u07ea",
    "\u0167\u0003\u0002\u0002\u0002\u07eb\u07ed\u0005\u016a\u00b6\u0002\u07ec",
    "\u07eb\u0003\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002\u0002\u07ed",
    "\u0169\u0003\u0002\u0002\u0002\u07ee\u07ef\u0005\u016c\u00b7\u0002\u07ef",
    "\u016b\u0003\u0002\u0002\u0002\u07f0\u07f2\u0005\u016e\u00b8\u0002\u07f1",
    "\u07f0\u0003\u0002\u0002\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002\u07f3",
    "\u07f1\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002\u07f4",
    "\u016d\u0003\u0002\u0002\u0002\u07f5\u07f9\u0005\u0170\u00b9\u0002\u07f6",
    "\u07f9\u0005\u0184\u00c3\u0002\u07f7\u07f9\u0005\u008aF\u0002\u07f8",
    "\u07f5\u0003\u0002\u0002\u0002\u07f8\u07f6\u0003\u0002\u0002\u0002\u07f8",
    "\u07f7\u0003\u0002\u0002\u0002\u07f9\u016f\u0003\u0002\u0002\u0002\u07fa",
    "\u07fb\u0007W\u0002\u0002\u07fb\u07fc\u0005\u0172\u00ba\u0002\u07fc",
    "\u07fd\u0005\u017a\u00be\u0002\u07fd\u07fe\u0005\u0004\u0003\u0002\u07fe",
    "\u0804\u0003\u0002\u0002\u0002\u07ff\u0800\u0007W\u0002\u0002\u0800",
    "\u0801\u0005\u0180\u00c1\u0002\u0801\u0802\u0005\u0004\u0003\u0002\u0802",
    "\u0804\u0003\u0002\u0002\u0002\u0803\u07fa\u0003\u0002\u0002\u0002\u0803",
    "\u07ff\u0003\u0002\u0002\u0002\u0804\u0171\u0003\u0002\u0002\u0002\u0805",
    "\u080d\u0005\u0174\u00bb\u0002\u0806\u080d\u0005\u0176\u00bc\u0002\u0807",
    "\u080d\u0005\u0178\u00bd\u0002\u0808\u0809\u0005\u0174\u00bb\u0002\u0809",
    "\u080a\u0007\u0015\u0002\u0002\u080a\u080b\u0005\u0178\u00bd\u0002\u080b",
    "\u080d\u0003\u0002\u0002\u0002\u080c\u0805\u0003\u0002\u0002\u0002\u080c",
    "\u0806\u0003\u0002\u0002\u0002\u080c\u0807\u0003\u0002\u0002\u0002\u080c",
    "\u0808\u0003\u0002\u0002\u0002\u080d\u0173\u0003\u0002\u0002\u0002\u080e",
    "\u080f\u0005\u0182\u00c2\u0002\u080f\u0175\u0003\u0002\u0002\u0002\u0810",
    "\u0811\u0007 \u0002\u0002\u0811\u0812\u0007k\u0002\u0002\u0812\u0813",
    "\u0005\u0182\u00c2\u0002\u0813\u0177\u0003\u0002\u0002\u0002\u0814\u0815",
    "\u0007\r\u0002\u0002\u0815\u081e\u0007B\u0002\u0002\u0816\u0817\u0007",
    "\r\u0002\u0002\u0817\u0819\u0005\u017c\u00bf\u0002\u0818\u081a\u0007",
    "\u0015\u0002\u0002\u0819\u0818\u0003\u0002\u0002\u0002\u0819\u081a\u0003",
    "\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002\u0002\u081b\u081c\u0007",
    "B\u0002\u0002\u081c\u081e\u0003\u0002\u0002\u0002\u081d\u0814\u0003",
    "\u0002\u0002\u0002\u081d\u0816\u0003\u0002\u0002\u0002\u081e\u0179\u0003",
    "\u0002\u0002\u0002\u081f\u0820\u0007m\u0002\u0002\u0820\u0821\u0005",
    "\u0180\u00c1\u0002\u0821\u017b\u0003\u0002\u0002\u0002\u0822\u0827\u0005",
    "\u017e\u00c0\u0002\u0823\u0824\u0007\u0015\u0002\u0002\u0824\u0826\u0005",
    "\u017e\u00c0\u0002\u0825\u0823\u0003\u0002\u0002\u0002\u0826\u0829\u0003",
    "\u0002\u0002\u0002\u0827\u0825\u0003\u0002\u0002\u0002\u0827\u0828\u0003",
    "\u0002\u0002\u0002\u0828\u017d\u0003\u0002\u0002\u0002\u0829\u0827\u0003",
    "\u0002\u0002\u0002\u082a\u0830\u0005\u0182\u00c2\u0002\u082b\u082c\u0005",
    "\u01a0\u00d1\u0002\u082c\u082d\u0007k\u0002\u0002\u082d\u082e\u0005",
    "\u0182\u00c2\u0002\u082e\u0830\u0003\u0002\u0002\u0002\u082f\u082a\u0003",
    "\u0002\u0002\u0002\u082f\u082b\u0003\u0002\u0002\u0002\u0830\u017f\u0003",
    "\u0002\u0002\u0002\u0831\u0832\u0007s\u0002\u0002\u0832\u0181\u0003",
    "\u0002\u0002\u0002\u0833\u0834\u0005\u0010\t\u0002\u0834\u0183\u0003",
    "\u0002\u0002\u0002\u0835\u0836\u0007Q\u0002\u0002\u0836\u0837\u0007",
    " \u0002\u0002\u0837\u0838\u0005\u017a\u00be\u0002\u0838\u0839\u0005",
    "\u0004\u0003\u0002\u0839\u0850\u0003\u0002\u0002\u0002\u083a\u083b\u0007",
    "Q\u0002\u0002\u083b\u083c\u0005\u0186\u00c4\u0002\u083c\u083d\u0005",
    "\u017a\u00be\u0002\u083d\u083e\u0005\u0004\u0003\u0002\u083e\u0850\u0003",
    "\u0002\u0002\u0002\u083f\u0840\u0007Q\u0002\u0002\u0840\u0841\u0005",
    "\u0186\u00c4\u0002\u0841\u0842\u0005\u0004\u0003\u0002\u0842\u0850\u0003",
    "\u0002\u0002\u0002\u0843\u0844\u0007Q\u0002\u0002\u0844\u0850\u0005",
    "\u0106\u0084\u0002\u0845\u0846\u0007Q\u0002\u0002\u0846\u0850\u0005",
    "\u00d0i\u0002\u0847\u0848\u0007Q\u0002\u0002\u0848\u0849\u0007M\u0002",
    "\u0002\u0849\u0850\u0005\u0116\u008c\u0002\u084a\u084b\u0007Q\u0002",
    "\u0002\u084b\u084c\u0007M\u0002\u0002\u084c\u084d\u0005l7\u0002\u084d",
    "\u084e\u0005\u0004\u0003\u0002\u084e\u0850\u0003\u0002\u0002\u0002\u084f",
    "\u0835\u0003\u0002\u0002\u0002\u084f\u083a\u0003\u0002\u0002\u0002\u084f",
    "\u083f\u0003\u0002\u0002\u0002\u084f\u0843\u0003\u0002\u0002\u0002\u084f",
    "\u0845\u0003\u0002\u0002\u0002\u084f\u0847\u0003\u0002\u0002\u0002\u084f",
    "\u084a\u0003\u0002\u0002\u0002\u0850\u0185\u0003\u0002\u0002\u0002\u0851",
    "\u0852\u0007\r\u0002\u0002\u0852\u085b\u0007B\u0002\u0002\u0853\u0854",
    "\u0007\r\u0002\u0002\u0854\u0856\u0005\u0188\u00c5\u0002\u0855\u0857",
    "\u0007\u0015\u0002\u0002\u0856\u0855\u0003\u0002\u0002\u0002\u0856\u0857",
    "\u0003\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002\u0858\u0859",
    "\u0007B\u0002\u0002\u0859\u085b\u0003\u0002\u0002\u0002\u085a\u0851",
    "\u0003\u0002\u0002\u0002\u085a\u0853\u0003\u0002\u0002\u0002\u085b\u0187",
    "\u0003\u0002\u0002\u0002\u085c\u0861\u0005\u018a\u00c6\u0002\u085d\u085e",
    "\u0007\u0015\u0002\u0002\u085e\u0860\u0005\u018a\u00c6\u0002\u085f\u085d",
    "\u0003\u0002\u0002\u0002\u0860\u0863\u0003\u0002\u0002\u0002\u0861\u085f",
    "\u0003\u0002\u0002\u0002\u0861\u0862\u0003\u0002\u0002\u0002\u0862\u0189",
    "\u0003\u0002\u0002\u0002\u0863\u0861\u0003\u0002\u0002\u0002\u0864\u0865",
    "\u0005\u01a0\u00d1\u0002\u0865\u018b\u0003\u0002\u0002\u0002\u0866\u0867",
    "\u0007\b\u0002\u0002\u0867\u0868\u0005\b\u0005\u0002\u0868\u0869\u0005",
    "\u0190\u00c9\u0002\u0869\u086c\u0003\u0002\u0002\u0002\u086a\u086c\u0007",
    "\u000b\u0002\u0002\u086b\u0866\u0003\u0002\u0002\u0002\u086b\u086a\u0003",
    "\u0002\u0002\u0002\u086c\u018d\u0003\u0002\u0002\u0002\u086d\u086e\u0007",
    "\b\u0002\u0002\u086e\u086f\u0005\n\u0006\u0002\u086f\u0870\u0005\u0192",
    "\u00ca\u0002\u0870\u0873\u0003\u0002\u0002\u0002\u0871\u0873\u0007\u000b",
    "\u0002\u0002\u0872\u086d\u0003\u0002\u0002\u0002\u0872\u0871\u0003\u0002",
    "\u0002\u0002\u0873\u018f\u0003\u0002\u0002\u0002\u0874\u0876\u0005\u0194",
    "\u00cb\u0002\u0875\u0874\u0003\u0002\u0002\u0002\u0875\u0876\u0003\u0002",
    "\u0002\u0002\u0876\u0877\u0003\u0002\u0002\u0002\u0877\u0878\u0007\n",
    "\u0002\u0002\u0878\u0191\u0003\u0002\u0002\u0002\u0879\u087b\u0005\u0196",
    "\u00cc\u0002\u087a\u0879\u0003\u0002\u0002\u0002\u087a\u087b\u0003\u0002",
    "\u0002\u0002\u087b\u087c\u0003\u0002\u0002\u0002\u087c\u087d\u0007\n",
    "\u0002\u0002\u087d\u0193\u0003\u0002\u0002\u0002\u087e\u0880\u0007\t",
    "\u0002\u0002\u087f\u0881\u0005\b\u0005\u0002\u0880\u087f\u0003\u0002",
    "\u0002\u0002\u0881\u0882\u0003\u0002\u0002\u0002\u0882\u0880\u0003\u0002",
    "\u0002\u0002\u0882\u0883\u0003\u0002\u0002\u0002\u0883\u0195\u0003\u0002",
    "\u0002\u0002\u0884\u0886\u0007\t\u0002\u0002\u0885\u0887\u0005\n\u0006",
    "\u0002\u0886\u0885\u0003\u0002\u0002\u0002\u0887\u0888\u0003\u0002\u0002",
    "\u0002\u0888\u0886\u0003\u0002\u0002\u0002\u0888\u0889\u0003\u0002\u0002",
    "\u0002\u0889\u0197\u0003\u0002\u0002\u0002\u088a\u088f\u0005\u019a\u00ce",
    "\u0002\u088b\u088f\u0005\u019c\u00cf\u0002\u088c\u088f\u0007C\u0002",
    "\u0002\u088d\u088f\u0007D\u0002\u0002\u088e\u088a\u0003\u0002\u0002",
    "\u0002\u088e\u088b\u0003\u0002\u0002\u0002\u088e\u088c\u0003\u0002\u0002",
    "\u0002\u088e\u088d\u0003\u0002\u0002\u0002\u088f\u0199\u0003\u0002\u0002",
    "\u0002\u0890\u0891\t\f\u0002\u0002\u0891\u019b\u0003\u0002\u0002\u0002",
    "\u0892\u0893\u0007g\u0002\u0002\u0893\u019d\u0003\u0002\u0002\u0002",
    "\u0894\u0895\t\r\u0002\u0002\u0895\u019f\u0003\u0002\u0002\u0002\u0896",
    "\u089a\u0007w\u0002\u0002\u0897\u089a\u0005\u0198\u00cd\u0002\u0898",
    "\u089a\u0005\u019e\u00d0\u0002\u0899\u0896\u0003\u0002\u0002\u0002\u0899",
    "\u0897\u0003\u0002\u0002\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u089a",
    "\u01a1\u0003\u0002\u0002\u0002\u00d2\u01a8\u01ae\u01b5\u01bd\u01c5\u01cc",
    "\u01d1\u01d6\u01da\u01de\u01e9\u01f2\u01f9\u01ff\u0204\u020a\u0214\u021f",
    "\u0223\u0227\u0232\u0236\u023a\u023e\u0241\u0246\u024c\u024f\u0251\u0256",
    "\u025a\u025d\u0262\u0268\u026b\u026d\u0273\u0280\u0284\u028b\u028f\u0296",
    "\u029e\u02a7\u02af\u02b3\u02b7\u02bc\u02ca\u02cc\u02d7\u02d9\u02e1\u02e5",
    "\u02ec\u02f0\u02f3\u02f8\u02fd\u0301\u0306\u030b\u0310\u0314\u0319\u031e",
    "\u0326\u0332\u0334\u033d\u0349\u034b\u0360\u039b\u039d\u03a8\u03e3\u03e5",
    "\u03f3\u0431\u0433\u043f\u047d\u047f\u049d\u04a1\u04a6\u04ab\u04b0\u04b5",
    "\u04b9\u04bd\u04c1\u04c7\u04cd\u04dc\u04de\u04e3\u04e5\u04ef\u04f3\u04f7",
    "\u04fb\u0508\u0515\u0519\u051c\u0527\u052a\u052e\u0532\u0535\u0540\u0543",
    "\u0547\u054e\u0556\u055e\u0565\u057a\u0582\u058a\u058f\u0594\u0598\u059d",
    "\u05a1\u05a6\u05ab\u05b0\u05b4\u05b8\u05cb\u05e4\u05e9\u05f3\u05f8\u05fc",
    "\u0600\u0605\u060b\u0610\u0623\u0627\u062b\u0635\u0639\u0642\u0646\u067d",
    "\u068b\u068f\u0697\u069f\u06a5\u06b2\u06ba\u06bf\u06c4\u06c8\u06cd\u06e3",
    "\u06f6\u06fc\u0701\u0705\u070a\u070e\u071f\u0724\u072a\u0730\u0749\u075a",
    "\u0760\u0766\u076c\u0773\u077b\u0788\u078f\u0792\u079b\u07a2\u07be\u07d9",
    "\u07e7\u07ec\u07f3\u07f8\u0803\u080c\u0819\u081d\u0827\u082f\u084f\u0856",
    "\u085a\u0861\u086b\u0872\u0875\u087a\u0882\u0888\u088e\u0899"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, "'{'", "'('", "')'", "'['", "']'", "'.'", 
                     "'...'", "';'", "','", "'<'", "'>'", "'<='", "'>='", 
                     "'=='", "'!='", "'==='", "'!=='", "'+'", "'-'", "'*'", 
                     "'%'", "'**'", "'++'", "'--'", "'<<'", "'>>'", "'>>>'", 
                     "'&'", "'|'", "'^'", "'!'", "'~'", "'&&'", "'||'", 
                     "'?'", "':'", "'='", "'+='", "'-='", "'*='", "'%='", 
                     "'**='", "'<<='", "'>>='", "'>>>='", "'&='", "'|='", 
                     "'^='", "'=>'", null, "'/'", "'/='", null, "'}'", null, 
                     null, "'await'", "'break'", "'case'", "'catch'", "'class'", 
                     "'const'", "'continue'", "'debugger'", "'default'", 
                     "'delete'", "'do'", "'else'", "'export'", "'extends'", 
                     "'finally'", "'for'", "'function'", "'if'", "'import'", 
                     "'in'", "'instanceof'", "'new'", "'return'", "'super'", 
                     "'switch'", "'this'", "'throw'", "'try'", "'typeof'", 
                     "'var'", "'void'", "'while'", "'with'", "'yield'", 
                     "'enum'", "'null'", "'true'", "'false'", "'as'", "'async'", 
                     "'from'", "'get'", "'let'", "'of'", "'set'", "'static'" ];

var symbolicNames = [ null, "SingleLineDelimitedComment", "MultiLineComment", 
                      "SingleLineHTMLOpenComment", "SingleLineHTMLCloseComment", 
                      "NumericLiteral", "TemplateHead", "TemplateMiddle", 
                      "TemplateTail", "NoSubstitutionTemplate", "RegularExpressionLiteral", 
                      "OpenBrace", "OpenParen", "CloseParen", "OpenBracket", 
                      "CloseBracket", "Dot", "Spread", "SemiColon", "Comma", 
                      "LessThan", "GreaterThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "Plus", "Minus", "Multiply", "Modulo", "Power", "PlusPlus", 
                      "MinusMinus", "LeftShiftArithmetic", "RightShiftArithmetic", 
                      "RightShiftLogical", "BitAnd", "BitOr", "BitXor", 
                      "Not", "BitNot", "And", "Or", "QuestionMark", "Colon", 
                      "Assign", "PlusAssign", "MinusAssign", "MultiplyAssign", 
                      "ModuloAssign", "PowerAssign", "LeftShiftArithmeticAssign", 
                      "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                      "BitAndAssign", "BitOrAssign", "BitXorAssign", "FatArrow", 
                      "Punctuator", "Divide", "DivideAssign", "DivPunctuator", 
                      "CloseBrace", "NullLiteral", "BooleanLiteral", "Await", 
                      "Break", "Case", "Catch", "Class", "Const", "Continue", 
                      "Debugger", "Default", "Delete", "Do", "Else", "Export", 
                      "Extends", "Finally", "For", "Function", "If", "Import", 
                      "In", "Instanceof", "New", "Return", "Super", "Switch", 
                      "This", "Throw", "Try", "Typeof", "Var", "Void", "While", 
                      "With", "Yield", "Enum", "Null", "True", "False", 
                      "As", "Async", "From", "Get", "Let", "Of", "Set", 
                      "Static", "StringLiteral", "BinaryIntegerLiteral", 
                      "OctalIntegerLiteral", "HexIntegerLiteral", "IdentifierName", 
                      "SingleLineComment", "WhiteSpace", "LineTerminator", 
                      "LineTerminatorSequence" ];

var ruleNames =  [ "file", "eos", "expression", "expression_In", "expression_In_Yield", 
                   "identifierReference", "identifierReference_Yield", "bindingIdentifier", 
                   "bindingIdentifier_Yield", "identifier", "primaryExpression", 
                   "primaryExpression_Yield", "literal", "coverParenthesizedExpressionAndArrowParameterList", 
                   "coverParenthesizedExpressionAndArrowParameterList_Yield", 
                   "coverCallExpressionAndAsyncArrowHead", "coverCallExpressionAndAsyncArrowHead_Yield", 
                   "arrayLiteral", "arrayLiteral_Yield", "elementList", 
                   "elementList_Yield", "elision", "spreadElement", "spreadElement_Yield", 
                   "objectLiteral", "objectLiteral_Yield", "propertyDefinitionList", 
                   "propertyDefinitionList_Yield", "propertyDefinition", 
                   "propertyDefinition_Yield", "propertyName", "propertyName_Yield", 
                   "literalPropertyName", "computedPropertyName", "computedPropertyName_Yield", 
                   "callExpression", "callExpression_Yield", "arguments", 
                   "arguments_Yield", "argumentList", "argumentList_Yield", 
                   "leftHandSideExpression", "leftHandSideExpression_Yield", 
                   "newExpression", "newExpression_Yield", "memberExpression", 
                   "memberExpression_Yield", "initializer", "initializer_Yield", 
                   "initializer_In", "initializer_In_Yield", "assignmentExpression", 
                   "assignmentExpression_Yield", "assignmentExpression_In", 
                   "assignmentExpression_In_Yield", "unaryOperator", "multiplicativeOperator", 
                   "additiveOperator", "shiftOperator", "relationalOperator", 
                   "equalityOperator", "assignmentOperator", "statement", 
                   "statement_Return", "statement_Yield_Return", "statementList", 
                   "statementList_Return", "statementList_Yield_Return", 
                   "statementListItem", "statementListItem_Return", "statementListItem_Yield_Return", 
                   "emptyStatement", "returnStatement", "returnStatement_Yield", 
                   "debuggerStatement", "expressionStatement", "expressionStatement_Yield", 
                   "bindingElement", "bindingElement_Yield", "bindingRestElement", 
                   "bindingRestElement_Yield", "singleNameBinding", "singleNameBinding_Yield", 
                   "bindingPattern", "bindingPattern_Yield", "objectBindingPattern", 
                   "objectBindingPattern_Yield", "arrayBindingPattern", 
                   "arrayBindingPattern_Yield", "bindingPropertyList", "bindingPropertyList_Yield", 
                   "bindingProperty", "bindingProperty_Yield", "lexicalDeclaration", 
                   "lexicalDeclaration_In", "lexicalDeclaration_In_Yield", 
                   "letOrConst", "bindingList", "bindingList_In", "bindingList_In_Yield", 
                   "lexicalBinding", "lexicalBinding_In", "lexicalBinding_In_Yield", 
                   "declaration", "declaration_Yield", "hoistableDeclaration", 
                   "hoistableDeclaration_Yield", "throwStatement", "tryStatement", 
                   "catchPart", "finallyPart", "catchParameter", "withStatement", 
                   "labelledStatement", "labelledItem", "labelIdentifier", 
                   "switchStatement", "caseBlock", "caseClauses", "caseClause", 
                   "defaultClause", "iterationStatement", "forDeclaration", 
                   "forBinding", "ifStatement", "breakableStatement", "continueStatement", 
                   "breakStatement", "blockStatement", "block", "variableStatement", 
                   "variableDeclarationList", "variableDeclarationList_In", 
                   "variableDeclaration", "variableDeclaration_In", "functionDeclaration", 
                   "functionDeclaration_Yield", "functionExpression", "classDeclaration", 
                   "classDeclaration_Yield", "classExpression", "classExpression_Yield", 
                   "classTail", "classTail_Yield", "classHeritage", "classHeritage_Yield", 
                   "classBody", "classBody_Yield", "classElementList", "classElementList_Yield", 
                   "classElement", "classElement_Yield", "generatorDeclaration", 
                   "generatorDeclaration_Yield", "generatorExpression", 
                   "uniqueFormalParameters", "uniqueFormalParameters_Yield", 
                   "formalParameters", "formalParameters_Yield", "formalParameterList", 
                   "formalParameterList_Yield", "functionRestParameter", 
                   "functionRestParameter_Yield", "formalParameter", "formalParameter_Yield", 
                   "arrowParameters", "functionBody", "functionBody_Yield", 
                   "functionStatementList", "functionStatementList_Yield", 
                   "generatorBody", "conciseBody", "conciseBody_In", "methodDefinition", 
                   "methodDefinition_Yield", "propertySetParameterList", 
                   "generatorMethod", "script", "scriptBody", "module", 
                   "moduleBody", "moduleItemList", "moduleItem", "importDeclaration", 
                   "importClause", "importedDefaultBinding", "nameSpaceImport", 
                   "namedImports", "fromClause", "importsList", "importSpecifier", 
                   "moduleSpecifier", "importedBinding", "exportDeclaration", 
                   "exportClause", "exportsList", "exportSpecifier", "templateLiteral", 
                   "templateLiteral_Yield", "templateSpans", "templateSpans_Yield", 
                   "templateMiddleList", "templateMiddleList_Yield", "reservedWord", 
                   "keyword", "futureReservedWord", "miscIdentifier", "identifierName" ];

function ECMAScriptPassParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	ECMAScriptPassParser.prototype.getHiddenToken = function () {
	  var previousTokenIndex = antlr4.Parser.prototype.getCurrentToken
	    .call(this).tokenIndex - 1;
	  var previousToken = this._input.get(previousTokenIndex);

	  return (previousToken &&
	    previousToken.channel === antlr4.Lexer.HIDDEN) ? previousToken : null;
	};

	ECMAScriptPassParser.prototype.isEndOfStatementToken = function (token) {
	// --- ECMAScript® 2018 Language Specification - Section 5.1.2
	// Simple white space and single-line comments are discarded and do not appear
	// in the stream of input elements for the syntactic grammar. A MultiLineComment
	// (that is, a comment of the form /*…*/ regardless of whether it spans more
	// than one line) is likewise simply discarded if it contains no line
	// terminator; but if a MultiLineComment contains one or more line terminators,
	// then it is replaced by a single line terminator, which becomes part of the
	// stream of input elements for the syntactic grammar.
	// --- ECMAScript® 2018 Language Specification - Annex B.1.3
	// Similar to a MultiLineComment that contains a line terminator code point,
	// a SingleLineHTMLCloseComment is considered to be a LineTerminator for
	// purposes of parsing by the syntactic grammar.
	  if (token === null)
	    return false;

	  var text = token.text;
	  var type = token.type;

	  return type === ECMAScriptPassParser.LineTerminator ||
	  (
	    type === ECMAScriptPassParser.MultiLineComment ||
	    type === ECMAScriptPassParser.SingleLineHTMLCloseComment &&
	    text.indexOf('\n') !== -1 ||
	    text.indexOf('\r') !== -1 ||
	    text.indexOf('\u2028') !== -1 ||
	    text.indexOf('\u2029') !== -1
	  );
	}

	ECMAScriptPassParser.prototype.isLineTerminatorEquivalent = function () {
	  return this.isEndOfStatementToken(this.getHiddenToken());
	};

    return this;
}

ECMAScriptPassParser.prototype = Object.create(antlr4.Parser.prototype);
ECMAScriptPassParser.prototype.constructor = ECMAScriptPassParser;

Object.defineProperty(ECMAScriptPassParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ECMAScriptPassParser.EOF = antlr4.Token.EOF;
ECMAScriptPassParser.SingleLineDelimitedComment = 1;
ECMAScriptPassParser.MultiLineComment = 2;
ECMAScriptPassParser.SingleLineHTMLOpenComment = 3;
ECMAScriptPassParser.SingleLineHTMLCloseComment = 4;
ECMAScriptPassParser.NumericLiteral = 5;
ECMAScriptPassParser.TemplateHead = 6;
ECMAScriptPassParser.TemplateMiddle = 7;
ECMAScriptPassParser.TemplateTail = 8;
ECMAScriptPassParser.NoSubstitutionTemplate = 9;
ECMAScriptPassParser.RegularExpressionLiteral = 10;
ECMAScriptPassParser.OpenBrace = 11;
ECMAScriptPassParser.OpenParen = 12;
ECMAScriptPassParser.CloseParen = 13;
ECMAScriptPassParser.OpenBracket = 14;
ECMAScriptPassParser.CloseBracket = 15;
ECMAScriptPassParser.Dot = 16;
ECMAScriptPassParser.Spread = 17;
ECMAScriptPassParser.SemiColon = 18;
ECMAScriptPassParser.Comma = 19;
ECMAScriptPassParser.LessThan = 20;
ECMAScriptPassParser.GreaterThan = 21;
ECMAScriptPassParser.LessThanEquals = 22;
ECMAScriptPassParser.GreaterThanEquals = 23;
ECMAScriptPassParser.Equals = 24;
ECMAScriptPassParser.NotEquals = 25;
ECMAScriptPassParser.IdentityEquals = 26;
ECMAScriptPassParser.IdentityNotEquals = 27;
ECMAScriptPassParser.Plus = 28;
ECMAScriptPassParser.Minus = 29;
ECMAScriptPassParser.Multiply = 30;
ECMAScriptPassParser.Modulo = 31;
ECMAScriptPassParser.Power = 32;
ECMAScriptPassParser.PlusPlus = 33;
ECMAScriptPassParser.MinusMinus = 34;
ECMAScriptPassParser.LeftShiftArithmetic = 35;
ECMAScriptPassParser.RightShiftArithmetic = 36;
ECMAScriptPassParser.RightShiftLogical = 37;
ECMAScriptPassParser.BitAnd = 38;
ECMAScriptPassParser.BitOr = 39;
ECMAScriptPassParser.BitXor = 40;
ECMAScriptPassParser.Not = 41;
ECMAScriptPassParser.BitNot = 42;
ECMAScriptPassParser.And = 43;
ECMAScriptPassParser.Or = 44;
ECMAScriptPassParser.QuestionMark = 45;
ECMAScriptPassParser.Colon = 46;
ECMAScriptPassParser.Assign = 47;
ECMAScriptPassParser.PlusAssign = 48;
ECMAScriptPassParser.MinusAssign = 49;
ECMAScriptPassParser.MultiplyAssign = 50;
ECMAScriptPassParser.ModuloAssign = 51;
ECMAScriptPassParser.PowerAssign = 52;
ECMAScriptPassParser.LeftShiftArithmeticAssign = 53;
ECMAScriptPassParser.RightShiftArithmeticAssign = 54;
ECMAScriptPassParser.RightShiftLogicalAssign = 55;
ECMAScriptPassParser.BitAndAssign = 56;
ECMAScriptPassParser.BitOrAssign = 57;
ECMAScriptPassParser.BitXorAssign = 58;
ECMAScriptPassParser.FatArrow = 59;
ECMAScriptPassParser.Punctuator = 60;
ECMAScriptPassParser.Divide = 61;
ECMAScriptPassParser.DivideAssign = 62;
ECMAScriptPassParser.DivPunctuator = 63;
ECMAScriptPassParser.CloseBrace = 64;
ECMAScriptPassParser.NullLiteral = 65;
ECMAScriptPassParser.BooleanLiteral = 66;
ECMAScriptPassParser.Await = 67;
ECMAScriptPassParser.Break = 68;
ECMAScriptPassParser.Case = 69;
ECMAScriptPassParser.Catch = 70;
ECMAScriptPassParser.Class = 71;
ECMAScriptPassParser.Const = 72;
ECMAScriptPassParser.Continue = 73;
ECMAScriptPassParser.Debugger = 74;
ECMAScriptPassParser.Default = 75;
ECMAScriptPassParser.Delete = 76;
ECMAScriptPassParser.Do = 77;
ECMAScriptPassParser.Else = 78;
ECMAScriptPassParser.Export = 79;
ECMAScriptPassParser.Extends = 80;
ECMAScriptPassParser.Finally = 81;
ECMAScriptPassParser.For = 82;
ECMAScriptPassParser.Function = 83;
ECMAScriptPassParser.If = 84;
ECMAScriptPassParser.Import = 85;
ECMAScriptPassParser.In = 86;
ECMAScriptPassParser.Instanceof = 87;
ECMAScriptPassParser.New = 88;
ECMAScriptPassParser.Return = 89;
ECMAScriptPassParser.Super = 90;
ECMAScriptPassParser.Switch = 91;
ECMAScriptPassParser.This = 92;
ECMAScriptPassParser.Throw = 93;
ECMAScriptPassParser.Try = 94;
ECMAScriptPassParser.Typeof = 95;
ECMAScriptPassParser.Var = 96;
ECMAScriptPassParser.Void = 97;
ECMAScriptPassParser.While = 98;
ECMAScriptPassParser.With = 99;
ECMAScriptPassParser.Yield = 100;
ECMAScriptPassParser.Enum = 101;
ECMAScriptPassParser.Null = 102;
ECMAScriptPassParser.True = 103;
ECMAScriptPassParser.False = 104;
ECMAScriptPassParser.As = 105;
ECMAScriptPassParser.Async = 106;
ECMAScriptPassParser.From = 107;
ECMAScriptPassParser.Get = 108;
ECMAScriptPassParser.Let = 109;
ECMAScriptPassParser.Of = 110;
ECMAScriptPassParser.Set = 111;
ECMAScriptPassParser.Static = 112;
ECMAScriptPassParser.StringLiteral = 113;
ECMAScriptPassParser.BinaryIntegerLiteral = 114;
ECMAScriptPassParser.OctalIntegerLiteral = 115;
ECMAScriptPassParser.HexIntegerLiteral = 116;
ECMAScriptPassParser.IdentifierName = 117;
ECMAScriptPassParser.SingleLineComment = 118;
ECMAScriptPassParser.WhiteSpace = 119;
ECMAScriptPassParser.LineTerminator = 120;
ECMAScriptPassParser.LineTerminatorSequence = 121;

ECMAScriptPassParser.RULE_file = 0;
ECMAScriptPassParser.RULE_eos = 1;
ECMAScriptPassParser.RULE_expression = 2;
ECMAScriptPassParser.RULE_expression_In = 3;
ECMAScriptPassParser.RULE_expression_In_Yield = 4;
ECMAScriptPassParser.RULE_identifierReference = 5;
ECMAScriptPassParser.RULE_identifierReference_Yield = 6;
ECMAScriptPassParser.RULE_bindingIdentifier = 7;
ECMAScriptPassParser.RULE_bindingIdentifier_Yield = 8;
ECMAScriptPassParser.RULE_identifier = 9;
ECMAScriptPassParser.RULE_primaryExpression = 10;
ECMAScriptPassParser.RULE_primaryExpression_Yield = 11;
ECMAScriptPassParser.RULE_literal = 12;
ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList = 13;
ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList_Yield = 14;
ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead = 15;
ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead_Yield = 16;
ECMAScriptPassParser.RULE_arrayLiteral = 17;
ECMAScriptPassParser.RULE_arrayLiteral_Yield = 18;
ECMAScriptPassParser.RULE_elementList = 19;
ECMAScriptPassParser.RULE_elementList_Yield = 20;
ECMAScriptPassParser.RULE_elision = 21;
ECMAScriptPassParser.RULE_spreadElement = 22;
ECMAScriptPassParser.RULE_spreadElement_Yield = 23;
ECMAScriptPassParser.RULE_objectLiteral = 24;
ECMAScriptPassParser.RULE_objectLiteral_Yield = 25;
ECMAScriptPassParser.RULE_propertyDefinitionList = 26;
ECMAScriptPassParser.RULE_propertyDefinitionList_Yield = 27;
ECMAScriptPassParser.RULE_propertyDefinition = 28;
ECMAScriptPassParser.RULE_propertyDefinition_Yield = 29;
ECMAScriptPassParser.RULE_propertyName = 30;
ECMAScriptPassParser.RULE_propertyName_Yield = 31;
ECMAScriptPassParser.RULE_literalPropertyName = 32;
ECMAScriptPassParser.RULE_computedPropertyName = 33;
ECMAScriptPassParser.RULE_computedPropertyName_Yield = 34;
ECMAScriptPassParser.RULE_callExpression = 35;
ECMAScriptPassParser.RULE_callExpression_Yield = 36;
ECMAScriptPassParser.RULE_arguments = 37;
ECMAScriptPassParser.RULE_arguments_Yield = 38;
ECMAScriptPassParser.RULE_argumentList = 39;
ECMAScriptPassParser.RULE_argumentList_Yield = 40;
ECMAScriptPassParser.RULE_leftHandSideExpression = 41;
ECMAScriptPassParser.RULE_leftHandSideExpression_Yield = 42;
ECMAScriptPassParser.RULE_newExpression = 43;
ECMAScriptPassParser.RULE_newExpression_Yield = 44;
ECMAScriptPassParser.RULE_memberExpression = 45;
ECMAScriptPassParser.RULE_memberExpression_Yield = 46;
ECMAScriptPassParser.RULE_initializer = 47;
ECMAScriptPassParser.RULE_initializer_Yield = 48;
ECMAScriptPassParser.RULE_initializer_In = 49;
ECMAScriptPassParser.RULE_initializer_In_Yield = 50;
ECMAScriptPassParser.RULE_assignmentExpression = 51;
ECMAScriptPassParser.RULE_assignmentExpression_Yield = 52;
ECMAScriptPassParser.RULE_assignmentExpression_In = 53;
ECMAScriptPassParser.RULE_assignmentExpression_In_Yield = 54;
ECMAScriptPassParser.RULE_unaryOperator = 55;
ECMAScriptPassParser.RULE_multiplicativeOperator = 56;
ECMAScriptPassParser.RULE_additiveOperator = 57;
ECMAScriptPassParser.RULE_shiftOperator = 58;
ECMAScriptPassParser.RULE_relationalOperator = 59;
ECMAScriptPassParser.RULE_equalityOperator = 60;
ECMAScriptPassParser.RULE_assignmentOperator = 61;
ECMAScriptPassParser.RULE_statement = 62;
ECMAScriptPassParser.RULE_statement_Return = 63;
ECMAScriptPassParser.RULE_statement_Yield_Return = 64;
ECMAScriptPassParser.RULE_statementList = 65;
ECMAScriptPassParser.RULE_statementList_Return = 66;
ECMAScriptPassParser.RULE_statementList_Yield_Return = 67;
ECMAScriptPassParser.RULE_statementListItem = 68;
ECMAScriptPassParser.RULE_statementListItem_Return = 69;
ECMAScriptPassParser.RULE_statementListItem_Yield_Return = 70;
ECMAScriptPassParser.RULE_emptyStatement = 71;
ECMAScriptPassParser.RULE_returnStatement = 72;
ECMAScriptPassParser.RULE_returnStatement_Yield = 73;
ECMAScriptPassParser.RULE_debuggerStatement = 74;
ECMAScriptPassParser.RULE_expressionStatement = 75;
ECMAScriptPassParser.RULE_expressionStatement_Yield = 76;
ECMAScriptPassParser.RULE_bindingElement = 77;
ECMAScriptPassParser.RULE_bindingElement_Yield = 78;
ECMAScriptPassParser.RULE_bindingRestElement = 79;
ECMAScriptPassParser.RULE_bindingRestElement_Yield = 80;
ECMAScriptPassParser.RULE_singleNameBinding = 81;
ECMAScriptPassParser.RULE_singleNameBinding_Yield = 82;
ECMAScriptPassParser.RULE_bindingPattern = 83;
ECMAScriptPassParser.RULE_bindingPattern_Yield = 84;
ECMAScriptPassParser.RULE_objectBindingPattern = 85;
ECMAScriptPassParser.RULE_objectBindingPattern_Yield = 86;
ECMAScriptPassParser.RULE_arrayBindingPattern = 87;
ECMAScriptPassParser.RULE_arrayBindingPattern_Yield = 88;
ECMAScriptPassParser.RULE_bindingPropertyList = 89;
ECMAScriptPassParser.RULE_bindingPropertyList_Yield = 90;
ECMAScriptPassParser.RULE_bindingProperty = 91;
ECMAScriptPassParser.RULE_bindingProperty_Yield = 92;
ECMAScriptPassParser.RULE_lexicalDeclaration = 93;
ECMAScriptPassParser.RULE_lexicalDeclaration_In = 94;
ECMAScriptPassParser.RULE_lexicalDeclaration_In_Yield = 95;
ECMAScriptPassParser.RULE_letOrConst = 96;
ECMAScriptPassParser.RULE_bindingList = 97;
ECMAScriptPassParser.RULE_bindingList_In = 98;
ECMAScriptPassParser.RULE_bindingList_In_Yield = 99;
ECMAScriptPassParser.RULE_lexicalBinding = 100;
ECMAScriptPassParser.RULE_lexicalBinding_In = 101;
ECMAScriptPassParser.RULE_lexicalBinding_In_Yield = 102;
ECMAScriptPassParser.RULE_declaration = 103;
ECMAScriptPassParser.RULE_declaration_Yield = 104;
ECMAScriptPassParser.RULE_hoistableDeclaration = 105;
ECMAScriptPassParser.RULE_hoistableDeclaration_Yield = 106;
ECMAScriptPassParser.RULE_throwStatement = 107;
ECMAScriptPassParser.RULE_tryStatement = 108;
ECMAScriptPassParser.RULE_catchPart = 109;
ECMAScriptPassParser.RULE_finallyPart = 110;
ECMAScriptPassParser.RULE_catchParameter = 111;
ECMAScriptPassParser.RULE_withStatement = 112;
ECMAScriptPassParser.RULE_labelledStatement = 113;
ECMAScriptPassParser.RULE_labelledItem = 114;
ECMAScriptPassParser.RULE_labelIdentifier = 115;
ECMAScriptPassParser.RULE_switchStatement = 116;
ECMAScriptPassParser.RULE_caseBlock = 117;
ECMAScriptPassParser.RULE_caseClauses = 118;
ECMAScriptPassParser.RULE_caseClause = 119;
ECMAScriptPassParser.RULE_defaultClause = 120;
ECMAScriptPassParser.RULE_iterationStatement = 121;
ECMAScriptPassParser.RULE_forDeclaration = 122;
ECMAScriptPassParser.RULE_forBinding = 123;
ECMAScriptPassParser.RULE_ifStatement = 124;
ECMAScriptPassParser.RULE_breakableStatement = 125;
ECMAScriptPassParser.RULE_continueStatement = 126;
ECMAScriptPassParser.RULE_breakStatement = 127;
ECMAScriptPassParser.RULE_blockStatement = 128;
ECMAScriptPassParser.RULE_block = 129;
ECMAScriptPassParser.RULE_variableStatement = 130;
ECMAScriptPassParser.RULE_variableDeclarationList = 131;
ECMAScriptPassParser.RULE_variableDeclarationList_In = 132;
ECMAScriptPassParser.RULE_variableDeclaration = 133;
ECMAScriptPassParser.RULE_variableDeclaration_In = 134;
ECMAScriptPassParser.RULE_functionDeclaration = 135;
ECMAScriptPassParser.RULE_functionDeclaration_Yield = 136;
ECMAScriptPassParser.RULE_functionExpression = 137;
ECMAScriptPassParser.RULE_classDeclaration = 138;
ECMAScriptPassParser.RULE_classDeclaration_Yield = 139;
ECMAScriptPassParser.RULE_classExpression = 140;
ECMAScriptPassParser.RULE_classExpression_Yield = 141;
ECMAScriptPassParser.RULE_classTail = 142;
ECMAScriptPassParser.RULE_classTail_Yield = 143;
ECMAScriptPassParser.RULE_classHeritage = 144;
ECMAScriptPassParser.RULE_classHeritage_Yield = 145;
ECMAScriptPassParser.RULE_classBody = 146;
ECMAScriptPassParser.RULE_classBody_Yield = 147;
ECMAScriptPassParser.RULE_classElementList = 148;
ECMAScriptPassParser.RULE_classElementList_Yield = 149;
ECMAScriptPassParser.RULE_classElement = 150;
ECMAScriptPassParser.RULE_classElement_Yield = 151;
ECMAScriptPassParser.RULE_generatorDeclaration = 152;
ECMAScriptPassParser.RULE_generatorDeclaration_Yield = 153;
ECMAScriptPassParser.RULE_generatorExpression = 154;
ECMAScriptPassParser.RULE_uniqueFormalParameters = 155;
ECMAScriptPassParser.RULE_uniqueFormalParameters_Yield = 156;
ECMAScriptPassParser.RULE_formalParameters = 157;
ECMAScriptPassParser.RULE_formalParameters_Yield = 158;
ECMAScriptPassParser.RULE_formalParameterList = 159;
ECMAScriptPassParser.RULE_formalParameterList_Yield = 160;
ECMAScriptPassParser.RULE_functionRestParameter = 161;
ECMAScriptPassParser.RULE_functionRestParameter_Yield = 162;
ECMAScriptPassParser.RULE_formalParameter = 163;
ECMAScriptPassParser.RULE_formalParameter_Yield = 164;
ECMAScriptPassParser.RULE_arrowParameters = 165;
ECMAScriptPassParser.RULE_functionBody = 166;
ECMAScriptPassParser.RULE_functionBody_Yield = 167;
ECMAScriptPassParser.RULE_functionStatementList = 168;
ECMAScriptPassParser.RULE_functionStatementList_Yield = 169;
ECMAScriptPassParser.RULE_generatorBody = 170;
ECMAScriptPassParser.RULE_conciseBody = 171;
ECMAScriptPassParser.RULE_conciseBody_In = 172;
ECMAScriptPassParser.RULE_methodDefinition = 173;
ECMAScriptPassParser.RULE_methodDefinition_Yield = 174;
ECMAScriptPassParser.RULE_propertySetParameterList = 175;
ECMAScriptPassParser.RULE_generatorMethod = 176;
ECMAScriptPassParser.RULE_script = 177;
ECMAScriptPassParser.RULE_scriptBody = 178;
ECMAScriptPassParser.RULE_module = 179;
ECMAScriptPassParser.RULE_moduleBody = 180;
ECMAScriptPassParser.RULE_moduleItemList = 181;
ECMAScriptPassParser.RULE_moduleItem = 182;
ECMAScriptPassParser.RULE_importDeclaration = 183;
ECMAScriptPassParser.RULE_importClause = 184;
ECMAScriptPassParser.RULE_importedDefaultBinding = 185;
ECMAScriptPassParser.RULE_nameSpaceImport = 186;
ECMAScriptPassParser.RULE_namedImports = 187;
ECMAScriptPassParser.RULE_fromClause = 188;
ECMAScriptPassParser.RULE_importsList = 189;
ECMAScriptPassParser.RULE_importSpecifier = 190;
ECMAScriptPassParser.RULE_moduleSpecifier = 191;
ECMAScriptPassParser.RULE_importedBinding = 192;
ECMAScriptPassParser.RULE_exportDeclaration = 193;
ECMAScriptPassParser.RULE_exportClause = 194;
ECMAScriptPassParser.RULE_exportsList = 195;
ECMAScriptPassParser.RULE_exportSpecifier = 196;
ECMAScriptPassParser.RULE_templateLiteral = 197;
ECMAScriptPassParser.RULE_templateLiteral_Yield = 198;
ECMAScriptPassParser.RULE_templateSpans = 199;
ECMAScriptPassParser.RULE_templateSpans_Yield = 200;
ECMAScriptPassParser.RULE_templateMiddleList = 201;
ECMAScriptPassParser.RULE_templateMiddleList_Yield = 202;
ECMAScriptPassParser.RULE_reservedWord = 203;
ECMAScriptPassParser.RULE_keyword = 204;
ECMAScriptPassParser.RULE_futureReservedWord = 205;
ECMAScriptPassParser.RULE_miscIdentifier = 206;
ECMAScriptPassParser.RULE_identifierName = 207;

function FileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_file;
    return this;
}

FileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileContext.prototype.constructor = FileContext;

FileContext.prototype.script = function() {
    return this.getTypedRuleContext(ScriptContext,0);
};

FileContext.prototype.EOF = function() {
    return this.getToken(ECMAScriptPassParser.EOF, 0);
};

FileContext.prototype.module = function() {
    return this.getTypedRuleContext(ModuleContext,0);
};

FileContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFile(this);
	}
};

FileContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFile(this);
	}
};




ECMAScriptPassParser.FileContext = FileContext;

ECMAScriptPassParser.prototype.file = function() {

    var localctx = new FileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ECMAScriptPassParser.RULE_file);
    try {
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 416;
            this.script();
            this.state = 417;
            this.match(ECMAScriptPassParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this.module();
            this.state = 420;
            this.match(ECMAScriptPassParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

EosContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEos(this);
	}
};

EosContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEos(this);
	}
};




ECMAScriptPassParser.EosContext = EosContext;

ECMAScriptPassParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ECMAScriptPassParser.RULE_eos);
    try {
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 424;
            this.match(ECMAScriptPassParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 425;
            if (!( this.isLineTerminatorEquivalent())) {
                throw new antlr4.error.FailedPredicateException(this, "this.isLineTerminatorEquivalent()");
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 426;
            if (!( this._input.LT(1).type === ECMAScriptPassParser.CloseBrace)) {
                throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).type === ECMAScriptPassParser.CloseBrace");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 427;
            if (!( this._input.LT(1).type === ECMAScriptPassParser.EOF)) {
                throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).type === ECMAScriptPassParser.EOF");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExpressionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpression(this);
	}
};




ECMAScriptPassParser.ExpressionContext = ExpressionContext;

ECMAScriptPassParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ECMAScriptPassParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.assignmentExpression(0);
        this.state = 435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 431;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 432;
            this.assignmentExpression(0);
            this.state = 437;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expression_In;
    return this;
}

Expression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_InContext.prototype.constructor = Expression_InContext;

Expression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

Expression_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


Expression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpression_In(this);
	}
};

Expression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpression_In(this);
	}
};




ECMAScriptPassParser.Expression_InContext = Expression_InContext;

ECMAScriptPassParser.prototype.expression_In = function() {

    var localctx = new Expression_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ECMAScriptPassParser.RULE_expression_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.assignmentExpression_In(0);
        this.state = 443;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 439;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 440;
                this.assignmentExpression_In(0); 
            }
            this.state = 445;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expression_In_Yield;
    return this;
}

Expression_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_In_YieldContext.prototype.constructor = Expression_In_YieldContext;

Expression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

Expression_In_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


Expression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpression_In_Yield(this);
	}
};

Expression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpression_In_Yield(this);
	}
};




ECMAScriptPassParser.Expression_In_YieldContext = Expression_In_YieldContext;

ECMAScriptPassParser.prototype.expression_In_Yield = function() {

    var localctx = new Expression_In_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ECMAScriptPassParser.RULE_expression_In_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.assignmentExpression_In_Yield(0);
        this.state = 451;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 447;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 448;
                this.assignmentExpression_In_Yield(0); 
            }
            this.state = 453;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifierReference;
    return this;
}

IdentifierReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReferenceContext.prototype.constructor = IdentifierReferenceContext;

IdentifierReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReferenceContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

IdentifierReferenceContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

IdentifierReferenceContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

IdentifierReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifierReference(this);
	}
};

IdentifierReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifierReference(this);
	}
};




ECMAScriptPassParser.IdentifierReferenceContext = IdentifierReferenceContext;

ECMAScriptPassParser.prototype.identifierReference = function() {

    var localctx = new IdentifierReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ECMAScriptPassParser.RULE_identifierReference);
    try {
        this.state = 458;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 454;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 455;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 456;
            this.match(ECMAScriptPassParser.Await);
            this.state = 457;
            this.match(ECMAScriptPassParser.Multiply);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierReference_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifierReference_Yield;
    return this;
}

IdentifierReference_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierReference_YieldContext.prototype.constructor = IdentifierReference_YieldContext;

IdentifierReference_YieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierReference_YieldContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

IdentifierReference_YieldContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

IdentifierReference_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifierReference_Yield(this);
	}
};

IdentifierReference_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifierReference_Yield(this);
	}
};




ECMAScriptPassParser.IdentifierReference_YieldContext = IdentifierReference_YieldContext;

ECMAScriptPassParser.prototype.identifierReference_Yield = function() {

    var localctx = new IdentifierReference_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ECMAScriptPassParser.RULE_identifierReference_Yield);
    try {
        this.state = 463;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 460;
            this.identifier();
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 2);
            this.state = 461;
            this.match(ECMAScriptPassParser.Await);
            this.state = 462;
            this.match(ECMAScriptPassParser.Multiply);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingIdentifier;
    return this;
}

BindingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifierContext.prototype.constructor = BindingIdentifierContext;

BindingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

BindingIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

BindingIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingIdentifier(this);
	}
};

BindingIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingIdentifier(this);
	}
};




ECMAScriptPassParser.BindingIdentifierContext = BindingIdentifierContext;

ECMAScriptPassParser.prototype.bindingIdentifier = function() {

    var localctx = new BindingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ECMAScriptPassParser.RULE_bindingIdentifier);
    try {
        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 465;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 466;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 467;
            this.match(ECMAScriptPassParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingIdentifier_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingIdentifier_Yield;
    return this;
}

BindingIdentifier_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingIdentifier_YieldContext.prototype.constructor = BindingIdentifier_YieldContext;

BindingIdentifier_YieldContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BindingIdentifier_YieldContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

BindingIdentifier_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingIdentifier_Yield(this);
	}
};

BindingIdentifier_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingIdentifier_Yield(this);
	}
};




ECMAScriptPassParser.BindingIdentifier_YieldContext = BindingIdentifier_YieldContext;

ECMAScriptPassParser.prototype.bindingIdentifier_Yield = function() {

    var localctx = new BindingIdentifier_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ECMAScriptPassParser.RULE_bindingIdentifier_Yield);
    try {
        this.state = 472;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 470;
            this.identifier();
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 2);
            this.state = 471;
            this.match(ECMAScriptPassParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptPassParser.IdentifierName, 0);
};

IdentifierContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifier(this);
	}
};




ECMAScriptPassParser.IdentifierContext = IdentifierContext;

ECMAScriptPassParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ECMAScriptPassParser.RULE_identifier);
    try {
        this.state = 476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 474;
            this.match(ECMAScriptPassParser.IdentifierName);
            break;
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
            this.enterOuterAlt(localctx, 2);
            this.state = 475;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.This = function() {
    return this.getToken(ECMAScriptPassParser.This, 0);
};

PrimaryExpressionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PrimaryExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

PrimaryExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

PrimaryExpressionContext.prototype.classExpression = function() {
    return this.getTypedRuleContext(ClassExpressionContext,0);
};

PrimaryExpressionContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(ECMAScriptPassParser.RegularExpressionLiteral, 0);
};

PrimaryExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};

PrimaryExpressionContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPrimaryExpression(this);
	}
};




ECMAScriptPassParser.PrimaryExpressionContext = PrimaryExpressionContext;

ECMAScriptPassParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ECMAScriptPassParser.RULE_primaryExpression);
    try {
        this.state = 487;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.This:
            this.enterOuterAlt(localctx, 1);
            this.state = 478;
            this.match(ECMAScriptPassParser.This);
            break;
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 2);
            this.state = 479;
            this.identifierReference();
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 480;
            this.literal();
            break;
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 4);
            this.state = 481;
            this.arrayLiteral();
            break;
        case ECMAScriptPassParser.OpenBrace:
            this.enterOuterAlt(localctx, 5);
            this.state = 482;
            this.objectLiteral();
            break;
        case ECMAScriptPassParser.Class:
            this.enterOuterAlt(localctx, 6);
            this.state = 483;
            this.classExpression();
            break;
        case ECMAScriptPassParser.RegularExpressionLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 484;
            this.match(ECMAScriptPassParser.RegularExpressionLiteral);
            break;
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
            this.enterOuterAlt(localctx, 8);
            this.state = 485;
            this.templateLiteral();
            break;
        case ECMAScriptPassParser.OpenParen:
            this.enterOuterAlt(localctx, 9);
            this.state = 486;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_primaryExpression_Yield;
    return this;
}

PrimaryExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpression_YieldContext.prototype.constructor = PrimaryExpression_YieldContext;

PrimaryExpression_YieldContext.prototype.This = function() {
    return this.getToken(ECMAScriptPassParser.This, 0);
};

PrimaryExpression_YieldContext.prototype.identifierReference_Yield = function() {
    return this.getTypedRuleContext(IdentifierReference_YieldContext,0);
};

PrimaryExpression_YieldContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryExpression_YieldContext.prototype.arrayLiteral_Yield = function() {
    return this.getTypedRuleContext(ArrayLiteral_YieldContext,0);
};

PrimaryExpression_YieldContext.prototype.objectLiteral_Yield = function() {
    return this.getTypedRuleContext(ObjectLiteral_YieldContext,0);
};

PrimaryExpression_YieldContext.prototype.classExpression_Yield = function() {
    return this.getTypedRuleContext(ClassExpression_YieldContext,0);
};

PrimaryExpression_YieldContext.prototype.coverParenthesizedExpressionAndArrowParameterList_Yield = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterList_YieldContext,0);
};

PrimaryExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPrimaryExpression_Yield(this);
	}
};

PrimaryExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPrimaryExpression_Yield(this);
	}
};




ECMAScriptPassParser.PrimaryExpression_YieldContext = PrimaryExpression_YieldContext;

ECMAScriptPassParser.prototype.primaryExpression_Yield = function() {

    var localctx = new PrimaryExpression_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ECMAScriptPassParser.RULE_primaryExpression_Yield);
    try {
        this.state = 496;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.This:
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.match(ECMAScriptPassParser.This);
            break;
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 2);
            this.state = 490;
            this.identifierReference_Yield();
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 491;
            this.literal();
            break;
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 4);
            this.state = 492;
            this.arrayLiteral_Yield();
            break;
        case ECMAScriptPassParser.OpenBrace:
            this.enterOuterAlt(localctx, 5);
            this.state = 493;
            this.objectLiteral_Yield();
            break;
        case ECMAScriptPassParser.Class:
            this.enterOuterAlt(localctx, 6);
            this.state = 494;
            this.classExpression_Yield();
            break;
        case ECMAScriptPassParser.OpenParen:
            this.enterOuterAlt(localctx, 7);
            this.state = 495;
            this.coverParenthesizedExpressionAndArrowParameterList_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptPassParser.BooleanLiteral, 0);
};

LiteralContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NumericLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptPassParser.StringLiteral, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLiteral(this);
	}
};




ECMAScriptPassParser.LiteralContext = LiteralContext;

ECMAScriptPassParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ECMAScriptPassParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.NumericLiteral || _la===ECMAScriptPassParser.NullLiteral || _la===ECMAScriptPassParser.BooleanLiteral || _la===ECMAScriptPassParser.StringLiteral)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverParenthesizedExpressionAndArrowParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList;
    return this;
}

CoverParenthesizedExpressionAndArrowParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverParenthesizedExpressionAndArrowParameterListContext.prototype.constructor = CoverParenthesizedExpressionAndArrowParameterListContext;

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};

CoverParenthesizedExpressionAndArrowParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverParenthesizedExpressionAndArrowParameterList(this);
	}
};




ECMAScriptPassParser.CoverParenthesizedExpressionAndArrowParameterListContext = CoverParenthesizedExpressionAndArrowParameterListContext;

ECMAScriptPassParser.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {

    var localctx = new CoverParenthesizedExpressionAndArrowParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList);
    var _la = 0; // Token type
    try {
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 500;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 501;
            this.expression_In();
            this.state = 503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 502;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 505;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 507;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 508;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverParenthesizedExpressionAndArrowParameterList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList_Yield;
    return this;
}

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.constructor = CoverParenthesizedExpressionAndArrowParameterList_YieldContext;

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.expression_In_Yield = function() {
    return this.getTypedRuleContext(Expression_In_YieldContext,0);
};

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverParenthesizedExpressionAndArrowParameterList_Yield(this);
	}
};

CoverParenthesizedExpressionAndArrowParameterList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverParenthesizedExpressionAndArrowParameterList_Yield(this);
	}
};




ECMAScriptPassParser.CoverParenthesizedExpressionAndArrowParameterList_YieldContext = CoverParenthesizedExpressionAndArrowParameterList_YieldContext;

ECMAScriptPassParser.prototype.coverParenthesizedExpressionAndArrowParameterList_Yield = function() {

    var localctx = new CoverParenthesizedExpressionAndArrowParameterList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ECMAScriptPassParser.RULE_coverParenthesizedExpressionAndArrowParameterList_Yield);
    var _la = 0; // Token type
    try {
        this.state = 520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 511;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 512;
            this.expression_In_Yield();
            this.state = 514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 513;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 516;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 518;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 519;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverCallExpressionAndAsyncArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead;
    return this;
}

CoverCallExpressionAndAsyncArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverCallExpressionAndAsyncArrowHeadContext.prototype.constructor = CoverCallExpressionAndAsyncArrowHeadContext;

CoverCallExpressionAndAsyncArrowHeadContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverCallExpressionAndAsyncArrowHead(this);
	}
};

CoverCallExpressionAndAsyncArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverCallExpressionAndAsyncArrowHead(this);
	}
};




ECMAScriptPassParser.CoverCallExpressionAndAsyncArrowHeadContext = CoverCallExpressionAndAsyncArrowHeadContext;

ECMAScriptPassParser.prototype.coverCallExpressionAndAsyncArrowHead = function() {

    var localctx = new CoverCallExpressionAndAsyncArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.memberExpression(0);
        this.state = 523;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverCallExpressionAndAsyncArrowHead_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead_Yield;
    return this;
}

CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype.constructor = CoverCallExpressionAndAsyncArrowHead_YieldContext;

CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype.memberExpression_Yield = function() {
    return this.getTypedRuleContext(MemberExpression_YieldContext,0);
};

CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype.arguments_Yield = function() {
    return this.getTypedRuleContext(Arguments_YieldContext,0);
};

CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCoverCallExpressionAndAsyncArrowHead_Yield(this);
	}
};

CoverCallExpressionAndAsyncArrowHead_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCoverCallExpressionAndAsyncArrowHead_Yield(this);
	}
};




ECMAScriptPassParser.CoverCallExpressionAndAsyncArrowHead_YieldContext = CoverCallExpressionAndAsyncArrowHead_YieldContext;

ECMAScriptPassParser.prototype.coverCallExpressionAndAsyncArrowHead_Yield = function() {

    var localctx = new CoverCallExpressionAndAsyncArrowHead_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ECMAScriptPassParser.RULE_coverCallExpressionAndAsyncArrowHead_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.memberExpression_Yield(0);
        this.state = 526;
        this.arguments_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArrayLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrayLiteral(this);
	}
};

ArrayLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrayLiteral(this);
	}
};




ECMAScriptPassParser.ArrayLiteralContext = ArrayLiteralContext;

ECMAScriptPassParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ECMAScriptPassParser.RULE_arrayLiteral);
    var _la = 0; // Token type
    try {
        this.state = 545;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 528;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 529;
                this.elision();
            }

            this.state = 532;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 533;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 534;
            this.elementList(0);
            this.state = 535;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 537;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 538;
            this.elementList(0);
            this.state = 539;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 540;
                this.elision();
            }

            this.state = 543;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayLiteral_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrayLiteral_Yield;
    return this;
}

ArrayLiteral_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteral_YieldContext.prototype.constructor = ArrayLiteral_YieldContext;

ArrayLiteral_YieldContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

ArrayLiteral_YieldContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

ArrayLiteral_YieldContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayLiteral_YieldContext.prototype.elementList_Yield = function() {
    return this.getTypedRuleContext(ElementList_YieldContext,0);
};

ArrayLiteral_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArrayLiteral_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrayLiteral_Yield(this);
	}
};

ArrayLiteral_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrayLiteral_Yield(this);
	}
};




ECMAScriptPassParser.ArrayLiteral_YieldContext = ArrayLiteral_YieldContext;

ECMAScriptPassParser.prototype.arrayLiteral_Yield = function() {

    var localctx = new ArrayLiteral_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ECMAScriptPassParser.RULE_arrayLiteral_Yield);
    var _la = 0; // Token type
    try {
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 547;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 548;
                this.elision();
            }

            this.state = 551;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 552;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 553;
            this.elementList_Yield(0);
            this.state = 554;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 556;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 557;
            this.elementList_Yield(0);
            this.state = 558;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 559;
                this.elision();
            }

            this.state = 562;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ElementListContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ElementListContext.prototype.spreadElement = function() {
    return this.getTypedRuleContext(SpreadElementContext,0);
};

ElementListContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ElementListContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterElementList(this);
	}
};

ElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitElementList(this);
	}
};



ECMAScriptPassParser.prototype.elementList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ElementListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 38;
    this.enterRecursionRule(localctx, 38, ECMAScriptPassParser.RULE_elementList, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.state = 568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 567;
                this.elision();
            }

            this.state = 570;
            this.assignmentExpression_In(0);
            break;

        case 2:
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 571;
                this.elision();
            }

            this.state = 574;
            this.spreadElement();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 591;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 589;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList);
                    this.state = 577;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 578;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 580;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 579;
                        this.elision();
                    }

                    this.state = 582;
                    this.assignmentExpression_In(0);
                    break;

                case 2:
                    localctx = new ElementListContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList);
                    this.state = 583;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 584;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 586;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 585;
                        this.elision();
                    }

                    this.state = 588;
                    this.spreadElement();
                    break;

                } 
            }
            this.state = 593;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ElementList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_elementList_Yield;
    return this;
}

ElementList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementList_YieldContext.prototype.constructor = ElementList_YieldContext;

ElementList_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

ElementList_YieldContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ElementList_YieldContext.prototype.spreadElement_Yield = function() {
    return this.getTypedRuleContext(SpreadElement_YieldContext,0);
};

ElementList_YieldContext.prototype.elementList_Yield = function() {
    return this.getTypedRuleContext(ElementList_YieldContext,0);
};

ElementList_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ElementList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterElementList_Yield(this);
	}
};

ElementList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitElementList_Yield(this);
	}
};



ECMAScriptPassParser.prototype.elementList_Yield = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ElementList_YieldContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, ECMAScriptPassParser.RULE_elementList_Yield, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 595;
                this.elision();
            }

            this.state = 598;
            this.assignmentExpression_In_Yield(0);
            break;

        case 2:
            this.state = 600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 599;
                this.elision();
            }

            this.state = 602;
            this.spreadElement_Yield();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 619;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 617;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ElementList_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList_Yield);
                    this.state = 605;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 606;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 608;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 607;
                        this.elision();
                    }

                    this.state = 610;
                    this.assignmentExpression_In_Yield(0);
                    break;

                case 2:
                    localctx = new ElementList_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_elementList_Yield);
                    this.state = 611;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 612;
                    this.match(ECMAScriptPassParser.Comma);
                    this.state = 614;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ECMAScriptPassParser.Comma) {
                        this.state = 613;
                        this.elision();
                    }

                    this.state = 616;
                    this.spreadElement_Yield();
                    break;

                } 
            }
            this.state = 621;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ElisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_elision;
    return this;
}

ElisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElisionContext.prototype.constructor = ElisionContext;

ElisionContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ElisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterElision(this);
	}
};

ElisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitElision(this);
	}
};




ECMAScriptPassParser.ElisionContext = ElisionContext;

ECMAScriptPassParser.prototype.elision = function() {

    var localctx = new ElisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ECMAScriptPassParser.RULE_elision);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 622;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 625; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptPassParser.Comma);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpreadElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_spreadElement;
    return this;
}

SpreadElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadElementContext.prototype.constructor = SpreadElementContext;

SpreadElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptPassParser.Spread, 0);
};

SpreadElementContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

SpreadElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSpreadElement(this);
	}
};

SpreadElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSpreadElement(this);
	}
};




ECMAScriptPassParser.SpreadElementContext = SpreadElementContext;

ECMAScriptPassParser.prototype.spreadElement = function() {

    var localctx = new SpreadElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ECMAScriptPassParser.RULE_spreadElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(ECMAScriptPassParser.Spread);
        this.state = 628;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpreadElement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_spreadElement_Yield;
    return this;
}

SpreadElement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpreadElement_YieldContext.prototype.constructor = SpreadElement_YieldContext;

SpreadElement_YieldContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptPassParser.Spread, 0);
};

SpreadElement_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

SpreadElement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSpreadElement_Yield(this);
	}
};

SpreadElement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSpreadElement_Yield(this);
	}
};




ECMAScriptPassParser.SpreadElement_YieldContext = SpreadElement_YieldContext;

ECMAScriptPassParser.prototype.spreadElement_Yield = function() {

    var localctx = new SpreadElement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ECMAScriptPassParser.RULE_spreadElement_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(ECMAScriptPassParser.Spread);
        this.state = 631;
        this.assignmentExpression_In_Yield(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyDefinitionList = function() {
    return this.getTypedRuleContext(PropertyDefinitionListContext,0);
};

ObjectLiteralContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ObjectLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterObjectLiteral(this);
	}
};

ObjectLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitObjectLiteral(this);
	}
};




ECMAScriptPassParser.ObjectLiteralContext = ObjectLiteralContext;

ECMAScriptPassParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ECMAScriptPassParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.state = 642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 633;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 634;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 635;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 636;
            this.propertyDefinitionList();
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 637;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 640;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectLiteral_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_objectLiteral_Yield;
    return this;
}

ObjectLiteral_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteral_YieldContext.prototype.constructor = ObjectLiteral_YieldContext;

ObjectLiteral_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ObjectLiteral_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ObjectLiteral_YieldContext.prototype.propertyDefinitionList_Yield = function() {
    return this.getTypedRuleContext(PropertyDefinitionList_YieldContext,0);
};

ObjectLiteral_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ObjectLiteral_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterObjectLiteral_Yield(this);
	}
};

ObjectLiteral_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitObjectLiteral_Yield(this);
	}
};




ECMAScriptPassParser.ObjectLiteral_YieldContext = ObjectLiteral_YieldContext;

ECMAScriptPassParser.prototype.objectLiteral_Yield = function() {

    var localctx = new ObjectLiteral_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ECMAScriptPassParser.RULE_objectLiteral_Yield);
    var _la = 0; // Token type
    try {
        this.state = 653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 644;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 645;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 646;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 647;
            this.propertyDefinitionList_Yield();
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 648;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 651;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinitionList;
    return this;
}

PropertyDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionListContext.prototype.constructor = PropertyDefinitionListContext;

PropertyDefinitionListContext.prototype.propertyDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefinitionContext);
    } else {
        return this.getTypedRuleContext(PropertyDefinitionContext,i);
    }
};

PropertyDefinitionListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


PropertyDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinitionList(this);
	}
};

PropertyDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinitionList(this);
	}
};




ECMAScriptPassParser.PropertyDefinitionListContext = PropertyDefinitionListContext;

ECMAScriptPassParser.prototype.propertyDefinitionList = function() {

    var localctx = new PropertyDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ECMAScriptPassParser.RULE_propertyDefinitionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.propertyDefinition();
        this.state = 660;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 656;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 657;
                this.propertyDefinition(); 
            }
            this.state = 662;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinitionList_Yield;
    return this;
}

PropertyDefinitionList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionList_YieldContext.prototype.constructor = PropertyDefinitionList_YieldContext;

PropertyDefinitionList_YieldContext.prototype.propertyDefinition_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDefinition_YieldContext);
    } else {
        return this.getTypedRuleContext(PropertyDefinition_YieldContext,i);
    }
};

PropertyDefinitionList_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


PropertyDefinitionList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinitionList_Yield(this);
	}
};

PropertyDefinitionList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinitionList_Yield(this);
	}
};




ECMAScriptPassParser.PropertyDefinitionList_YieldContext = PropertyDefinitionList_YieldContext;

ECMAScriptPassParser.prototype.propertyDefinitionList_Yield = function() {

    var localctx = new PropertyDefinitionList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ECMAScriptPassParser.RULE_propertyDefinitionList_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this.propertyDefinition_Yield();
        this.state = 668;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 664;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 665;
                this.propertyDefinition_Yield(); 
            }
            this.state = 670;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinition;
    return this;
}

PropertyDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinitionContext.prototype.constructor = PropertyDefinitionContext;

PropertyDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

PropertyDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyDefinitionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

PropertyDefinitionContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

PropertyDefinitionContext.prototype.identifierReference = function() {
    return this.getTypedRuleContext(IdentifierReferenceContext,0);
};

PropertyDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinition(this);
	}
};

PropertyDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinition(this);
	}
};




ECMAScriptPassParser.PropertyDefinitionContext = PropertyDefinitionContext;

ECMAScriptPassParser.prototype.propertyDefinition = function() {

    var localctx = new PropertyDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ECMAScriptPassParser.RULE_propertyDefinition);
    try {
        this.state = 677;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 671;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 672;
            this.propertyName();
            this.state = 673;
            this.match(ECMAScriptPassParser.Colon);
            this.state = 674;
            this.assignmentExpression_In(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 676;
            this.identifierReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDefinition_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyDefinition_Yield;
    return this;
}

PropertyDefinition_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDefinition_YieldContext.prototype.constructor = PropertyDefinition_YieldContext;

PropertyDefinition_YieldContext.prototype.methodDefinition_Yield = function() {
    return this.getTypedRuleContext(MethodDefinition_YieldContext,0);
};

PropertyDefinition_YieldContext.prototype.propertyName_Yield = function() {
    return this.getTypedRuleContext(PropertyName_YieldContext,0);
};

PropertyDefinition_YieldContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

PropertyDefinition_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

PropertyDefinition_YieldContext.prototype.identifierReference_Yield = function() {
    return this.getTypedRuleContext(IdentifierReference_YieldContext,0);
};

PropertyDefinition_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyDefinition_Yield(this);
	}
};

PropertyDefinition_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyDefinition_Yield(this);
	}
};




ECMAScriptPassParser.PropertyDefinition_YieldContext = PropertyDefinition_YieldContext;

ECMAScriptPassParser.prototype.propertyDefinition_Yield = function() {

    var localctx = new PropertyDefinition_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ECMAScriptPassParser.RULE_propertyDefinition_Yield);
    try {
        this.state = 685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 679;
            this.methodDefinition_Yield();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 680;
            this.propertyName_Yield();
            this.state = 681;
            this.match(ECMAScriptPassParser.Colon);
            this.state = 682;
            this.assignmentExpression_In_Yield(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 684;
            this.identifierReference_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.literalPropertyName = function() {
    return this.getTypedRuleContext(LiteralPropertyNameContext,0);
};

PropertyNameContext.prototype.computedPropertyName = function() {
    return this.getTypedRuleContext(ComputedPropertyNameContext,0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyName(this);
	}
};




ECMAScriptPassParser.PropertyNameContext = PropertyNameContext;

ECMAScriptPassParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ECMAScriptPassParser.RULE_propertyName);
    try {
        this.state = 689;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.literalPropertyName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 688;
            this.computedPropertyName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyName_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertyName_Yield;
    return this;
}

PropertyName_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyName_YieldContext.prototype.constructor = PropertyName_YieldContext;

PropertyName_YieldContext.prototype.literalPropertyName = function() {
    return this.getTypedRuleContext(LiteralPropertyNameContext,0);
};

PropertyName_YieldContext.prototype.computedPropertyName_Yield = function() {
    return this.getTypedRuleContext(ComputedPropertyName_YieldContext,0);
};

PropertyName_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertyName_Yield(this);
	}
};

PropertyName_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertyName_Yield(this);
	}
};




ECMAScriptPassParser.PropertyName_YieldContext = PropertyName_YieldContext;

ECMAScriptPassParser.prototype.propertyName_Yield = function() {

    var localctx = new PropertyName_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ECMAScriptPassParser.RULE_propertyName_Yield);
    try {
        this.state = 693;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 691;
            this.literalPropertyName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 692;
            this.computedPropertyName_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_literalPropertyName;
    return this;
}

LiteralPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralPropertyNameContext.prototype.constructor = LiteralPropertyNameContext;

LiteralPropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

LiteralPropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptPassParser.StringLiteral, 0);
};

LiteralPropertyNameContext.prototype.NumericLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NumericLiteral, 0);
};

LiteralPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLiteralPropertyName(this);
	}
};

LiteralPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLiteralPropertyName(this);
	}
};




ECMAScriptPassParser.LiteralPropertyNameContext = LiteralPropertyNameContext;

ECMAScriptPassParser.prototype.literalPropertyName = function() {

    var localctx = new LiteralPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ECMAScriptPassParser.RULE_literalPropertyName);
    try {
        this.state = 698;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.Enum:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 695;
            this.identifierName();
            break;
        case ECMAScriptPassParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 696;
            this.match(ECMAScriptPassParser.StringLiteral);
            break;
        case ECMAScriptPassParser.NumericLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 697;
            this.match(ECMAScriptPassParser.NumericLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComputedPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_computedPropertyName;
    return this;
}

ComputedPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedPropertyNameContext.prototype.constructor = ComputedPropertyNameContext;

ComputedPropertyNameContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ComputedPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterComputedPropertyName(this);
	}
};

ComputedPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitComputedPropertyName(this);
	}
};




ECMAScriptPassParser.ComputedPropertyNameContext = ComputedPropertyNameContext;

ECMAScriptPassParser.prototype.computedPropertyName = function() {

    var localctx = new ComputedPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ECMAScriptPassParser.RULE_computedPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComputedPropertyName_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_computedPropertyName_Yield;
    return this;
}

ComputedPropertyName_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedPropertyName_YieldContext.prototype.constructor = ComputedPropertyName_YieldContext;

ComputedPropertyName_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

ComputedPropertyName_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterComputedPropertyName_Yield(this);
	}
};

ComputedPropertyName_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitComputedPropertyName_Yield(this);
	}
};




ECMAScriptPassParser.ComputedPropertyName_YieldContext = ComputedPropertyName_YieldContext;

ECMAScriptPassParser.prototype.computedPropertyName_Yield = function() {

    var localctx = new ComputedPropertyName_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ECMAScriptPassParser.RULE_computedPropertyName_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.assignmentExpression_In_Yield(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_callExpression;
    return this;
}

CallExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallExpressionContext.prototype.constructor = CallExpressionContext;

CallExpressionContext.prototype.coverCallExpressionAndAsyncArrowHead = function() {
    return this.getTypedRuleContext(CoverCallExpressionAndAsyncArrowHeadContext,0);
};

CallExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

CallExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

CallExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

CallExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

CallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCallExpression(this);
	}
};

CallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCallExpression(this);
	}
};



ECMAScriptPassParser.prototype.callExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, ECMAScriptPassParser.RULE_callExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.coverCallExpressionAndAsyncArrowHead();
        this._ctx.stop = this._input.LT(-1);
        this.state = 714;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 712;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression);
                    this.state = 707;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 708;
                    this.arguments();
                    break;

                case 2:
                    localctx = new CallExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression);
                    this.state = 709;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 710;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 711;
                    this.identifierName();
                    break;

                } 
            }
            this.state = 716;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CallExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_callExpression_Yield;
    return this;
}

CallExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallExpression_YieldContext.prototype.constructor = CallExpression_YieldContext;

CallExpression_YieldContext.prototype.coverCallExpressionAndAsyncArrowHead_Yield = function() {
    return this.getTypedRuleContext(CoverCallExpressionAndAsyncArrowHead_YieldContext,0);
};

CallExpression_YieldContext.prototype.callExpression_Yield = function() {
    return this.getTypedRuleContext(CallExpression_YieldContext,0);
};

CallExpression_YieldContext.prototype.arguments_Yield = function() {
    return this.getTypedRuleContext(Arguments_YieldContext,0);
};

CallExpression_YieldContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

CallExpression_YieldContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

CallExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCallExpression_Yield(this);
	}
};

CallExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCallExpression_Yield(this);
	}
};



ECMAScriptPassParser.prototype.callExpression_Yield = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CallExpression_YieldContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, ECMAScriptPassParser.RULE_callExpression_Yield, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 718;
        this.coverCallExpressionAndAsyncArrowHead_Yield();
        this._ctx.stop = this._input.LT(-1);
        this.state = 727;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 725;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new CallExpression_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression_Yield);
                    this.state = 720;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 721;
                    this.arguments_Yield();
                    break;

                case 2:
                    localctx = new CallExpression_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_callExpression_Yield);
                    this.state = 722;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 723;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 724;
                    this.identifierName();
                    break;

                } 
            }
            this.state = 729;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

ArgumentsContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ArgumentsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArguments(this);
	}
};




ECMAScriptPassParser.ArgumentsContext = ArgumentsContext;

ECMAScriptPassParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ECMAScriptPassParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.state = 739;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 730;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 731;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 732;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 733;
            this.argumentList();
            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 734;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 737;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arguments_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arguments_Yield;
    return this;
}

Arguments_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arguments_YieldContext.prototype.constructor = Arguments_YieldContext;

Arguments_YieldContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

Arguments_YieldContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

Arguments_YieldContext.prototype.argumentList_Yield = function() {
    return this.getTypedRuleContext(ArgumentList_YieldContext,0);
};

Arguments_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

Arguments_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArguments_Yield(this);
	}
};

Arguments_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArguments_Yield(this);
	}
};




ECMAScriptPassParser.Arguments_YieldContext = Arguments_YieldContext;

ECMAScriptPassParser.prototype.arguments_Yield = function() {

    var localctx = new Arguments_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ECMAScriptPassParser.RULE_arguments_Yield);
    var _la = 0; // Token type
    try {
        this.state = 750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 741;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 742;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 743;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 744;
            this.argumentList_Yield();
            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 745;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 748;
            this.match(ECMAScriptPassParser.CloseParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ArgumentListContext.prototype.Spread = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Spread);
    } else {
        return this.getToken(ECMAScriptPassParser.Spread, i);
    }
};


ArgumentListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArgumentList(this);
	}
};




ECMAScriptPassParser.ArgumentListContext = ArgumentListContext;

ECMAScriptPassParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ECMAScriptPassParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Spread) {
            this.state = 752;
            this.match(ECMAScriptPassParser.Spread);
        }

        this.state = 755;
        this.assignmentExpression_In(0);
        this.state = 763;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 756;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptPassParser.Spread) {
                    this.state = 757;
                    this.match(ECMAScriptPassParser.Spread);
                }

                this.state = 760;
                this.assignmentExpression_In(0); 
            }
            this.state = 765;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_argumentList_Yield;
    return this;
}

ArgumentList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentList_YieldContext.prototype.constructor = ArgumentList_YieldContext;

ArgumentList_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

ArgumentList_YieldContext.prototype.Spread = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Spread);
    } else {
        return this.getToken(ECMAScriptPassParser.Spread, i);
    }
};


ArgumentList_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ArgumentList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArgumentList_Yield(this);
	}
};

ArgumentList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArgumentList_Yield(this);
	}
};




ECMAScriptPassParser.ArgumentList_YieldContext = ArgumentList_YieldContext;

ECMAScriptPassParser.prototype.argumentList_Yield = function() {

    var localctx = new ArgumentList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ECMAScriptPassParser.RULE_argumentList_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Spread) {
            this.state = 766;
            this.match(ECMAScriptPassParser.Spread);
        }

        this.state = 769;
        this.assignmentExpression_In_Yield(0);
        this.state = 777;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 770;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 772;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ECMAScriptPassParser.Spread) {
                    this.state = 771;
                    this.match(ECMAScriptPassParser.Spread);
                }

                this.state = 774;
                this.assignmentExpression_In_Yield(0); 
            }
            this.state = 779;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftHandSideExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_leftHandSideExpression;
    return this;
}

LeftHandSideExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftHandSideExpressionContext.prototype.constructor = LeftHandSideExpressionContext;

LeftHandSideExpressionContext.prototype.callExpression = function() {
    return this.getTypedRuleContext(CallExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

LeftHandSideExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLeftHandSideExpression(this);
	}
};

LeftHandSideExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLeftHandSideExpression(this);
	}
};




ECMAScriptPassParser.LeftHandSideExpressionContext = LeftHandSideExpressionContext;

ECMAScriptPassParser.prototype.leftHandSideExpression = function() {

    var localctx = new LeftHandSideExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ECMAScriptPassParser.RULE_leftHandSideExpression);
    try {
        this.state = 782;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 780;
            this.callExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 781;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftHandSideExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_leftHandSideExpression_Yield;
    return this;
}

LeftHandSideExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftHandSideExpression_YieldContext.prototype.constructor = LeftHandSideExpression_YieldContext;

LeftHandSideExpression_YieldContext.prototype.callExpression_Yield = function() {
    return this.getTypedRuleContext(CallExpression_YieldContext,0);
};

LeftHandSideExpression_YieldContext.prototype.newExpression_Yield = function() {
    return this.getTypedRuleContext(NewExpression_YieldContext,0);
};

LeftHandSideExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLeftHandSideExpression_Yield(this);
	}
};

LeftHandSideExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLeftHandSideExpression_Yield(this);
	}
};




ECMAScriptPassParser.LeftHandSideExpression_YieldContext = LeftHandSideExpression_YieldContext;

ECMAScriptPassParser.prototype.leftHandSideExpression_Yield = function() {

    var localctx = new LeftHandSideExpression_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ECMAScriptPassParser.RULE_leftHandSideExpression_Yield);
    try {
        this.state = 786;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 784;
            this.callExpression_Yield(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 785;
            this.newExpression_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_newExpression;
    return this;
}

NewExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

NewExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

NewExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

NewExpressionContext.prototype.newExpression = function() {
    return this.getTypedRuleContext(NewExpressionContext,0);
};

NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitNewExpression(this);
	}
};




ECMAScriptPassParser.NewExpressionContext = NewExpressionContext;

ECMAScriptPassParser.prototype.newExpression = function() {

    var localctx = new NewExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ECMAScriptPassParser.RULE_newExpression);
    try {
        this.state = 791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 788;
            this.memberExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 789;
            this.match(ECMAScriptPassParser.New);
            this.state = 790;
            this.newExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_newExpression_Yield;
    return this;
}

NewExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExpression_YieldContext.prototype.constructor = NewExpression_YieldContext;

NewExpression_YieldContext.prototype.memberExpression_Yield = function() {
    return this.getTypedRuleContext(MemberExpression_YieldContext,0);
};

NewExpression_YieldContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

NewExpression_YieldContext.prototype.newExpression_Yield = function() {
    return this.getTypedRuleContext(NewExpression_YieldContext,0);
};

NewExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterNewExpression_Yield(this);
	}
};

NewExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitNewExpression_Yield(this);
	}
};




ECMAScriptPassParser.NewExpression_YieldContext = NewExpression_YieldContext;

ECMAScriptPassParser.prototype.newExpression_Yield = function() {

    var localctx = new NewExpression_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ECMAScriptPassParser.RULE_newExpression_Yield);
    try {
        this.state = 796;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this.memberExpression_Yield(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 794;
            this.match(ECMAScriptPassParser.New);
            this.state = 795;
            this.newExpression_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_memberExpression;
    return this;
}

MemberExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberExpressionContext.prototype.constructor = MemberExpressionContext;

MemberExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

MemberExpressionContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

MemberExpressionContext.prototype.memberExpression = function() {
    return this.getTypedRuleContext(MemberExpressionContext,0);
};

MemberExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

MemberExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

MemberExpressionContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

MemberExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

MemberExpressionContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

MemberExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberExpressionContext.prototype.templateLiteral = function() {
    return this.getTypedRuleContext(TemplateLiteralContext,0);
};

MemberExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMemberExpression(this);
	}
};

MemberExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMemberExpression(this);
	}
};



ECMAScriptPassParser.prototype.memberExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 90;
    this.enterRecursionRule(localctx, 90, ECMAScriptPassParser.RULE_memberExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.state = 799;
            this.primaryExpression();
            break;
        case ECMAScriptPassParser.New:
            this.state = 800;
            this.match(ECMAScriptPassParser.New);
            this.state = 801;
            this.memberExpression(0);
            this.state = 802;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 818;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 816;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression);
                    this.state = 806;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 807;
                    this.match(ECMAScriptPassParser.OpenBracket);
                    this.state = 808;
                    this.expression_In();
                    this.state = 809;
                    this.match(ECMAScriptPassParser.CloseBracket);
                    break;

                case 2:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression);
                    this.state = 811;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 812;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 813;
                    this.identifierName();
                    break;

                case 3:
                    localctx = new MemberExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression);
                    this.state = 814;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 815;
                    this.templateLiteral();
                    break;

                } 
            }
            this.state = 820;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MemberExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_memberExpression_Yield;
    return this;
}

MemberExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberExpression_YieldContext.prototype.constructor = MemberExpression_YieldContext;

MemberExpression_YieldContext.prototype.primaryExpression_Yield = function() {
    return this.getTypedRuleContext(PrimaryExpression_YieldContext,0);
};

MemberExpression_YieldContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

MemberExpression_YieldContext.prototype.memberExpression_Yield = function() {
    return this.getTypedRuleContext(MemberExpression_YieldContext,0);
};

MemberExpression_YieldContext.prototype.arguments_Yield = function() {
    return this.getTypedRuleContext(Arguments_YieldContext,0);
};

MemberExpression_YieldContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

MemberExpression_YieldContext.prototype.expression_In_Yield = function() {
    return this.getTypedRuleContext(Expression_In_YieldContext,0);
};

MemberExpression_YieldContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

MemberExpression_YieldContext.prototype.Dot = function() {
    return this.getToken(ECMAScriptPassParser.Dot, 0);
};

MemberExpression_YieldContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberExpression_YieldContext.prototype.templateLiteral_Yield = function() {
    return this.getTypedRuleContext(TemplateLiteral_YieldContext,0);
};

MemberExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMemberExpression_Yield(this);
	}
};

MemberExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMemberExpression_Yield(this);
	}
};



ECMAScriptPassParser.prototype.memberExpression_Yield = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberExpression_YieldContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 92;
    this.enterRecursionRule(localctx, 92, ECMAScriptPassParser.RULE_memberExpression_Yield, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.state = 822;
            this.primaryExpression_Yield();
            break;
        case ECMAScriptPassParser.New:
            this.state = 823;
            this.match(ECMAScriptPassParser.New);
            this.state = 824;
            this.memberExpression_Yield(0);
            this.state = 825;
            this.arguments_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 841;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 839;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MemberExpression_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression_Yield);
                    this.state = 829;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 830;
                    this.match(ECMAScriptPassParser.OpenBracket);
                    this.state = 831;
                    this.expression_In_Yield();
                    this.state = 832;
                    this.match(ECMAScriptPassParser.CloseBracket);
                    break;

                case 2:
                    localctx = new MemberExpression_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression_Yield);
                    this.state = 834;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 835;
                    this.match(ECMAScriptPassParser.Dot);
                    this.state = 836;
                    this.identifierName();
                    break;

                case 3:
                    localctx = new MemberExpression_YieldContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_memberExpression_Yield);
                    this.state = 837;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 838;
                    this.templateLiteral_Yield();
                    break;

                } 
            }
            this.state = 843;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer(this);
	}
};




ECMAScriptPassParser.InitializerContext = InitializerContext;

ECMAScriptPassParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ECMAScriptPassParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 845;
        this.assignmentExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer_Yield;
    return this;
}

Initializer_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_YieldContext.prototype.constructor = Initializer_YieldContext;

Initializer_YieldContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

Initializer_YieldContext.prototype.assignmentExpression_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_YieldContext,0);
};

Initializer_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer_Yield(this);
	}
};

Initializer_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer_Yield(this);
	}
};




ECMAScriptPassParser.Initializer_YieldContext = Initializer_YieldContext;

ECMAScriptPassParser.prototype.initializer_Yield = function() {

    var localctx = new Initializer_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ECMAScriptPassParser.RULE_initializer_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 847;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 848;
        this.assignmentExpression_Yield(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer_In;
    return this;
}

Initializer_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_InContext.prototype.constructor = Initializer_InContext;

Initializer_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

Initializer_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

Initializer_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer_In(this);
	}
};

Initializer_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer_In(this);
	}
};




ECMAScriptPassParser.Initializer_InContext = Initializer_InContext;

ECMAScriptPassParser.prototype.initializer_In = function() {

    var localctx = new Initializer_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ECMAScriptPassParser.RULE_initializer_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 851;
        this.assignmentExpression_In(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_initializer_In_Yield;
    return this;
}

Initializer_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_In_YieldContext.prototype.constructor = Initializer_In_YieldContext;

Initializer_In_YieldContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};

Initializer_In_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

Initializer_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInitializer_In_Yield(this);
	}
};

Initializer_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInitializer_In_Yield(this);
	}
};




ECMAScriptPassParser.Initializer_In_YieldContext = Initializer_In_YieldContext;

ECMAScriptPassParser.prototype.initializer_In_Yield = function() {

    var localctx = new Initializer_In_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ECMAScriptPassParser.RULE_initializer_In_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this.match(ECMAScriptPassParser.Assign);
        this.state = 854;
        this.assignmentExpression_In_Yield(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;


 
AssignmentExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BitwiseANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseANDExpressionContext.prototype.constructor = BitwiseANDExpressionContext;

ECMAScriptPassParser.BitwiseANDExpressionContext = BitwiseANDExpressionContext;

BitwiseANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseANDExpressionContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression(this);
	}
};

BitwiseANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression(this);
	}
};


function ShiftExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ECMAScriptPassParser.ShiftExpressionContext = ShiftExpressionContext;

ShiftExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ShiftExpressionContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression(this);
	}
};


function BitwiseORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseORExpressionContext.prototype.constructor = BitwiseORExpressionContext;

ECMAScriptPassParser.BitwiseORExpressionContext = BitwiseORExpressionContext;

BitwiseORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseORExpressionContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression(this);
	}
};

BitwiseORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression(this);
	}
};


function AdditiveExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

ECMAScriptPassParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression(this);
	}
};


function RelationalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

ECMAScriptPassParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression(this);
	}
};


function ConditionalExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ECMAScriptPassParser.ConditionalExpressionContext = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ConditionalExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpressionContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression(this);
	}
};


function AssignExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignExpressionContext.prototype.constructor = AssignExpressionContext;

ECMAScriptPassParser.AssignExpressionContext = AssignExpressionContext;

AssignExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AssignExpressionContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};
AssignExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression(this);
	}
};

AssignExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression(this);
	}
};


function MultiplicativeExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

ECMAScriptPassParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};


function FuncExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
FuncExpressionContext.prototype.constructor = FuncExpressionContext;

ECMAScriptPassParser.FuncExpressionContext = FuncExpressionContext;

FuncExpressionContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFuncExpression(this);
	}
};

FuncExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFuncExpression(this);
	}
};


function LhsExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LhsExpressionContext.prototype.constructor = LhsExpressionContext;

ECMAScriptPassParser.LhsExpressionContext = LhsExpressionContext;

LhsExpressionContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression(this);
	}
};

LhsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression(this);
	}
};


function BitwiseXORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
BitwiseXORExpressionContext.prototype.constructor = BitwiseXORExpressionContext;

ECMAScriptPassParser.BitwiseXORExpressionContext = BitwiseXORExpressionContext;

BitwiseXORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

BitwiseXORExpressionContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression(this);
	}
};

BitwiseXORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression(this);
	}
};


function LogicalANDExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalANDExpressionContext.prototype.constructor = LogicalANDExpressionContext;

ECMAScriptPassParser.LogicalANDExpressionContext = LogicalANDExpressionContext;

LogicalANDExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalANDExpressionContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression(this);
	}
};

LogicalANDExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression(this);
	}
};


function EqualityExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

ECMAScriptPassParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression(this);
	}
};


function UpdateExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UpdateExpressionContext.prototype.constructor = UpdateExpressionContext;

ECMAScriptPassParser.UpdateExpressionContext = UpdateExpressionContext;

UpdateExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

UpdateExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression(this);
	}
};

UpdateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression(this);
	}
};


function ExponentiationExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
ExponentiationExpressionContext.prototype.constructor = ExponentiationExpressionContext;

ECMAScriptPassParser.ExponentiationExpressionContext = ExponentiationExpressionContext;

ExponentiationExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExponentiationExpressionContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression(this);
	}
};

ExponentiationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression(this);
	}
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

ECMAScriptPassParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression(this);
	}
};

AssignmentOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression(this);
	}
};


function UnaryExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

ECMAScriptPassParser.UnaryExpressionContext = UnaryExpressionContext;

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};
UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression(this);
	}
};


function LogicalORExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
LogicalORExpressionContext.prototype.constructor = LogicalORExpressionContext;

ECMAScriptPassParser.LogicalORExpressionContext = LogicalORExpressionContext;

LogicalORExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

LogicalORExpressionContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression(this);
	}
};

LogicalORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression(this);
	}
};


function InstanceOfExpressionContext(parser, ctx) {
	AssignmentExpressionContext.call(this, parser);
    AssignmentExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpressionContext.prototype = Object.create(AssignmentExpressionContext.prototype);
InstanceOfExpressionContext.prototype.constructor = InstanceOfExpressionContext;

ECMAScriptPassParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

InstanceOfExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

InstanceOfExpressionContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression(this);
	}
};

InstanceOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 102;
    this.enterRecursionRule(localctx, 102, ECMAScriptPassParser.RULE_assignmentExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 862;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Function:
            localctx = new FuncExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 857;
            this.functionExpression();
            break;
        case ECMAScriptPassParser.Plus:
        case ECMAScriptPassParser.Minus:
        case ECMAScriptPassParser.PlusPlus:
        case ECMAScriptPassParser.MinusMinus:
        case ECMAScriptPassParser.Not:
        case ECMAScriptPassParser.BitNot:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Void:
            localctx = new UnaryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 858;
            this.unaryOperator();
            this.state = 859;
            this.assignmentExpression(17);
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            localctx = new LhsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 861;
            this.leftHandSideExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 923;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 921;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 864;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 865;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 866;
                    this.assignmentExpression(17);
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 867;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 868;
                    this.multiplicativeOperator();
                    this.state = 869;
                    this.assignmentExpression(16);
                    break;

                case 3:
                    localctx = new AdditiveExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 871;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 872;
                    this.additiveOperator();
                    this.state = 873;
                    this.assignmentExpression(15);
                    break;

                case 4:
                    localctx = new ShiftExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 875;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 876;
                    this.shiftOperator();
                    this.state = 877;
                    this.assignmentExpression(14);
                    break;

                case 5:
                    localctx = new RelationalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 879;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 880;
                    this.relationalOperator();
                    this.state = 881;
                    this.assignmentExpression(13);
                    break;

                case 6:
                    localctx = new InstanceOfExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 883;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 884;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 885;
                    this.assignmentExpression(12);
                    break;

                case 7:
                    localctx = new EqualityExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 886;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 887;
                    this.equalityOperator();
                    this.state = 888;
                    this.assignmentExpression(11);
                    break;

                case 8:
                    localctx = new BitwiseANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 890;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 891;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 892;
                    this.assignmentExpression(10);
                    break;

                case 9:
                    localctx = new BitwiseXORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 893;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 894;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 895;
                    this.assignmentExpression(9);
                    break;

                case 10:
                    localctx = new BitwiseORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 896;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 897;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 898;
                    this.assignmentExpression(8);
                    break;

                case 11:
                    localctx = new LogicalANDExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 899;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 900;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 901;
                    this.assignmentExpression(7);
                    break;

                case 12:
                    localctx = new LogicalORExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 902;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 903;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 904;
                    this.assignmentExpression(6);
                    break;

                case 13:
                    localctx = new ConditionalExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 905;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 906;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 907;
                    this.assignmentExpression(0);
                    this.state = 908;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 909;
                    this.assignmentExpression(5);
                    break;

                case 14:
                    localctx = new AssignExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 911;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 912;
                    this.match(ECMAScriptPassParser.Assign);
                    this.state = 913;
                    this.assignmentExpression(4);
                    break;

                case 15:
                    localctx = new AssignmentOperatorExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 914;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 915;
                    this.assignmentOperator();
                    this.state = 916;
                    this.assignmentExpression(3);
                    break;

                case 16:
                    localctx = new UpdateExpressionContext(this, new AssignmentExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression);
                    this.state = 918;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 919;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 920;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 925;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AssignmentExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression_Yield;
    return this;
}

AssignmentExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpression_YieldContext.prototype.constructor = AssignmentExpression_YieldContext;


 
AssignmentExpression_YieldContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function FuncExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
FuncExpression_YieldContext.prototype.constructor = FuncExpression_YieldContext;

ECMAScriptPassParser.FuncExpression_YieldContext = FuncExpression_YieldContext;

FuncExpression_YieldContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFuncExpression_Yield(this);
	}
};

FuncExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFuncExpression_Yield(this);
	}
};


function AssignmentOperatorExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
AssignmentOperatorExpression_YieldContext.prototype.constructor = AssignmentOperatorExpression_YieldContext;

ECMAScriptPassParser.AssignmentOperatorExpression_YieldContext = AssignmentOperatorExpression_YieldContext;

AssignmentOperatorExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

AssignmentOperatorExpression_YieldContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression_Yield(this);
	}
};

AssignmentOperatorExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression_Yield(this);
	}
};


function LogicalANDExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
LogicalANDExpression_YieldContext.prototype.constructor = LogicalANDExpression_YieldContext;

ECMAScriptPassParser.LogicalANDExpression_YieldContext = LogicalANDExpression_YieldContext;

LogicalANDExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

LogicalANDExpression_YieldContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression_Yield(this);
	}
};

LogicalANDExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression_Yield(this);
	}
};


function UnaryExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
UnaryExpression_YieldContext.prototype.constructor = UnaryExpression_YieldContext;

ECMAScriptPassParser.UnaryExpression_YieldContext = UnaryExpression_YieldContext;

UnaryExpression_YieldContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpression_YieldContext.prototype.assignmentExpression_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_YieldContext,0);
};
UnaryExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression_Yield(this);
	}
};

UnaryExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression_Yield(this);
	}
};


function LogicalORExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
LogicalORExpression_YieldContext.prototype.constructor = LogicalORExpression_YieldContext;

ECMAScriptPassParser.LogicalORExpression_YieldContext = LogicalORExpression_YieldContext;

LogicalORExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

LogicalORExpression_YieldContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression_Yield(this);
	}
};

LogicalORExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression_Yield(this);
	}
};


function AdditiveExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
AdditiveExpression_YieldContext.prototype.constructor = AdditiveExpression_YieldContext;

ECMAScriptPassParser.AdditiveExpression_YieldContext = AdditiveExpression_YieldContext;

AdditiveExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

AdditiveExpression_YieldContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression_Yield(this);
	}
};

AdditiveExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression_Yield(this);
	}
};


function ShiftExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
ShiftExpression_YieldContext.prototype.constructor = ShiftExpression_YieldContext;

ECMAScriptPassParser.ShiftExpression_YieldContext = ShiftExpression_YieldContext;

ShiftExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

ShiftExpression_YieldContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression_Yield(this);
	}
};

ShiftExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression_Yield(this);
	}
};


function RelationalExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
RelationalExpression_YieldContext.prototype.constructor = RelationalExpression_YieldContext;

ECMAScriptPassParser.RelationalExpression_YieldContext = RelationalExpression_YieldContext;

RelationalExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

RelationalExpression_YieldContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression_Yield(this);
	}
};

RelationalExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression_Yield(this);
	}
};


function AssignExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
AssignExpression_YieldContext.prototype.constructor = AssignExpression_YieldContext;

ECMAScriptPassParser.AssignExpression_YieldContext = AssignExpression_YieldContext;

AssignExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

AssignExpression_YieldContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};
AssignExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression_Yield(this);
	}
};

AssignExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression_Yield(this);
	}
};


function BitwiseXORExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
BitwiseXORExpression_YieldContext.prototype.constructor = BitwiseXORExpression_YieldContext;

ECMAScriptPassParser.BitwiseXORExpression_YieldContext = BitwiseXORExpression_YieldContext;

BitwiseXORExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

BitwiseXORExpression_YieldContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression_Yield(this);
	}
};

BitwiseXORExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression_Yield(this);
	}
};


function ConditionalExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
ConditionalExpression_YieldContext.prototype.constructor = ConditionalExpression_YieldContext;

ECMAScriptPassParser.ConditionalExpression_YieldContext = ConditionalExpression_YieldContext;

ConditionalExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

ConditionalExpression_YieldContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpression_YieldContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression_Yield(this);
	}
};

ConditionalExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression_Yield(this);
	}
};


function UpdateExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
UpdateExpression_YieldContext.prototype.constructor = UpdateExpression_YieldContext;

ECMAScriptPassParser.UpdateExpression_YieldContext = UpdateExpression_YieldContext;

UpdateExpression_YieldContext.prototype.assignmentExpression_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_YieldContext,0);
};

UpdateExpression_YieldContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpression_YieldContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression_Yield(this);
	}
};

UpdateExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression_Yield(this);
	}
};


function MultiplicativeExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
MultiplicativeExpression_YieldContext.prototype.constructor = MultiplicativeExpression_YieldContext;

ECMAScriptPassParser.MultiplicativeExpression_YieldContext = MultiplicativeExpression_YieldContext;

MultiplicativeExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

MultiplicativeExpression_YieldContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression_Yield(this);
	}
};

MultiplicativeExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression_Yield(this);
	}
};


function EqualityExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
EqualityExpression_YieldContext.prototype.constructor = EqualityExpression_YieldContext;

ECMAScriptPassParser.EqualityExpression_YieldContext = EqualityExpression_YieldContext;

EqualityExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

EqualityExpression_YieldContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression_Yield(this);
	}
};

EqualityExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression_Yield(this);
	}
};


function YieldExpressionContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpressionContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

ECMAScriptPassParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

YieldExpressionContext.prototype.assignmentExpression_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_YieldContext,0);
};
YieldExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterYieldExpression(this);
	}
};

YieldExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitYieldExpression(this);
	}
};


function BitwiseORExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
BitwiseORExpression_YieldContext.prototype.constructor = BitwiseORExpression_YieldContext;

ECMAScriptPassParser.BitwiseORExpression_YieldContext = BitwiseORExpression_YieldContext;

BitwiseORExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

BitwiseORExpression_YieldContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression_Yield(this);
	}
};

BitwiseORExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression_Yield(this);
	}
};


function ExponentiationExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
ExponentiationExpression_YieldContext.prototype.constructor = ExponentiationExpression_YieldContext;

ECMAScriptPassParser.ExponentiationExpression_YieldContext = ExponentiationExpression_YieldContext;

ExponentiationExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

ExponentiationExpression_YieldContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression_Yield(this);
	}
};

ExponentiationExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression_Yield(this);
	}
};


function LhsExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
LhsExpression_YieldContext.prototype.constructor = LhsExpression_YieldContext;

ECMAScriptPassParser.LhsExpression_YieldContext = LhsExpression_YieldContext;

LhsExpression_YieldContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression_Yield(this);
	}
};

LhsExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression_Yield(this);
	}
};


function InstanceOfExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
InstanceOfExpression_YieldContext.prototype.constructor = InstanceOfExpression_YieldContext;

ECMAScriptPassParser.InstanceOfExpression_YieldContext = InstanceOfExpression_YieldContext;

InstanceOfExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

InstanceOfExpression_YieldContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression_Yield(this);
	}
};

InstanceOfExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression_Yield(this);
	}
};


function BitwiseANDExpression_YieldContext(parser, ctx) {
	AssignmentExpression_YieldContext.call(this, parser);
    AssignmentExpression_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpression_YieldContext.prototype = Object.create(AssignmentExpression_YieldContext.prototype);
BitwiseANDExpression_YieldContext.prototype.constructor = BitwiseANDExpression_YieldContext;

ECMAScriptPassParser.BitwiseANDExpression_YieldContext = BitwiseANDExpression_YieldContext;

BitwiseANDExpression_YieldContext.prototype.assignmentExpression_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_YieldContext,i);
    }
};

BitwiseANDExpression_YieldContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression_Yield(this);
	}
};

BitwiseANDExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression_Yield(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression_Yield = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpression_YieldContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, ECMAScriptPassParser.RULE_assignmentExpression_Yield, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 934;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FuncExpression_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 927;
            this.functionExpression();
            break;

        case 2:
            localctx = new UnaryExpression_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 928;
            this.unaryOperator();
            this.state = 929;
            this.assignmentExpression_Yield(18);
            break;

        case 3:
            localctx = new YieldExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 931;
            this.match(ECMAScriptPassParser.Yield);
            this.state = 932;
            this.assignmentExpression_Yield(2);
            break;

        case 4:
            localctx = new LhsExpression_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 933;
            this.leftHandSideExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 995;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 993;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 936;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 937;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 938;
                    this.assignmentExpression_Yield(18);
                    break;

                case 2:
                    localctx = new MultiplicativeExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 939;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 940;
                    this.multiplicativeOperator();
                    this.state = 941;
                    this.assignmentExpression_Yield(17);
                    break;

                case 3:
                    localctx = new AdditiveExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 943;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 944;
                    this.additiveOperator();
                    this.state = 945;
                    this.assignmentExpression_Yield(16);
                    break;

                case 4:
                    localctx = new ShiftExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 947;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 948;
                    this.shiftOperator();
                    this.state = 949;
                    this.assignmentExpression_Yield(15);
                    break;

                case 5:
                    localctx = new RelationalExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 951;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 952;
                    this.relationalOperator();
                    this.state = 953;
                    this.assignmentExpression_Yield(14);
                    break;

                case 6:
                    localctx = new InstanceOfExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 955;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 956;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 957;
                    this.assignmentExpression_Yield(13);
                    break;

                case 7:
                    localctx = new EqualityExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 958;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 959;
                    this.equalityOperator();
                    this.state = 960;
                    this.assignmentExpression_Yield(12);
                    break;

                case 8:
                    localctx = new BitwiseANDExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 962;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 963;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 964;
                    this.assignmentExpression_Yield(11);
                    break;

                case 9:
                    localctx = new BitwiseXORExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 965;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 966;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 967;
                    this.assignmentExpression_Yield(10);
                    break;

                case 10:
                    localctx = new BitwiseORExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 968;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 969;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 970;
                    this.assignmentExpression_Yield(9);
                    break;

                case 11:
                    localctx = new LogicalANDExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 971;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 972;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 973;
                    this.assignmentExpression_Yield(8);
                    break;

                case 12:
                    localctx = new LogicalORExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 974;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 975;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 976;
                    this.assignmentExpression_Yield(7);
                    break;

                case 13:
                    localctx = new ConditionalExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 977;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 978;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 979;
                    this.assignmentExpression_Yield(0);
                    this.state = 980;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 981;
                    this.assignmentExpression_Yield(6);
                    break;

                case 14:
                    localctx = new AssignExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 983;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 984;
                    this.match(ECMAScriptPassParser.Assign);
                    this.state = 985;
                    this.assignmentExpression_Yield(5);
                    break;

                case 15:
                    localctx = new AssignmentOperatorExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 986;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 987;
                    this.assignmentOperator();
                    this.state = 988;
                    this.assignmentExpression_Yield(4);
                    break;

                case 16:
                    localctx = new UpdateExpression_YieldContext(this, new AssignmentExpression_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_Yield);
                    this.state = 990;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 991;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 992;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 997;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AssignmentExpression_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression_In;
    return this;
}

AssignmentExpression_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpression_InContext.prototype.constructor = AssignmentExpression_InContext;


 
AssignmentExpression_InContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalANDExpression_InContext.prototype.constructor = LogicalANDExpression_InContext;

ECMAScriptPassParser.LogicalANDExpression_InContext = LogicalANDExpression_InContext;

LogicalANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalANDExpression_InContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression_In(this);
	}
};

LogicalANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression_In(this);
	}
};


function LhsExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LhsExpression_InContext.prototype.constructor = LhsExpression_InContext;

ECMAScriptPassParser.LhsExpression_InContext = LhsExpression_InContext;

LhsExpression_InContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression_In(this);
	}
};

LhsExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression_In(this);
	}
};


function BitwiseANDExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseANDExpression_InContext.prototype.constructor = BitwiseANDExpression_InContext;

ECMAScriptPassParser.BitwiseANDExpression_InContext = BitwiseANDExpression_InContext;

BitwiseANDExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseANDExpression_InContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression_In(this);
	}
};

BitwiseANDExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression_In(this);
	}
};


function ArrowFunction_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFunction_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ArrowFunction_InContext.prototype.constructor = ArrowFunction_InContext;

ECMAScriptPassParser.ArrowFunction_InContext = ArrowFunction_InContext;

ArrowFunction_InContext.prototype.arrowParameters = function() {
    return this.getTypedRuleContext(ArrowParametersContext,0);
};

ArrowFunction_InContext.prototype.FatArrow = function() {
    return this.getToken(ECMAScriptPassParser.FatArrow, 0);
};

ArrowFunction_InContext.prototype.conciseBody_In = function() {
    return this.getTypedRuleContext(ConciseBody_InContext,0);
};
ArrowFunction_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrowFunction_In(this);
	}
};

ArrowFunction_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrowFunction_In(this);
	}
};


function UpdateExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UpdateExpression_InContext.prototype.constructor = UpdateExpression_InContext;

ECMAScriptPassParser.UpdateExpression_InContext = UpdateExpression_InContext;

UpdateExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

UpdateExpression_InContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpression_InContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression_In(this);
	}
};

UpdateExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression_In(this);
	}
};


function FuncExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
FuncExpression_InContext.prototype.constructor = FuncExpression_InContext;

ECMAScriptPassParser.FuncExpression_InContext = FuncExpression_InContext;

FuncExpression_InContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFuncExpression_In(this);
	}
};

FuncExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFuncExpression_In(this);
	}
};


function EqualityExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
EqualityExpression_InContext.prototype.constructor = EqualityExpression_InContext;

ECMAScriptPassParser.EqualityExpression_InContext = EqualityExpression_InContext;

EqualityExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

EqualityExpression_InContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression_In(this);
	}
};

EqualityExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression_In(this);
	}
};


function MultiplicativeExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
MultiplicativeExpression_InContext.prototype.constructor = MultiplicativeExpression_InContext;

ECMAScriptPassParser.MultiplicativeExpression_InContext = MultiplicativeExpression_InContext;

MultiplicativeExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

MultiplicativeExpression_InContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression_In(this);
	}
};

MultiplicativeExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression_In(this);
	}
};


function BitwiseORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseORExpression_InContext.prototype.constructor = BitwiseORExpression_InContext;

ECMAScriptPassParser.BitwiseORExpression_InContext = BitwiseORExpression_InContext;

BitwiseORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseORExpression_InContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression_In(this);
	}
};

BitwiseORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression_In(this);
	}
};


function ConditionalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ConditionalExpression_InContext.prototype.constructor = ConditionalExpression_InContext;

ECMAScriptPassParser.ConditionalExpression_InContext = ConditionalExpression_InContext;

ConditionalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ConditionalExpression_InContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpression_InContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression_In(this);
	}
};

ConditionalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression_In(this);
	}
};


function ExponentiationExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ExponentiationExpression_InContext.prototype.constructor = ExponentiationExpression_InContext;

ECMAScriptPassParser.ExponentiationExpression_InContext = ExponentiationExpression_InContext;

ExponentiationExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ExponentiationExpression_InContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression_In(this);
	}
};

ExponentiationExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression_In(this);
	}
};


function AdditiveExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AdditiveExpression_InContext.prototype.constructor = AdditiveExpression_InContext;

ECMAScriptPassParser.AdditiveExpression_InContext = AdditiveExpression_InContext;

AdditiveExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AdditiveExpression_InContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression_In(this);
	}
};

AdditiveExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression_In(this);
	}
};


function GenExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
GenExpression_InContext.prototype.constructor = GenExpression_InContext;

ECMAScriptPassParser.GenExpression_InContext = GenExpression_InContext;

GenExpression_InContext.prototype.generatorExpression = function() {
    return this.getTypedRuleContext(GeneratorExpressionContext,0);
};
GenExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGenExpression_In(this);
	}
};

GenExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGenExpression_In(this);
	}
};


function AssignExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignExpression_InContext.prototype.constructor = AssignExpression_InContext;

ECMAScriptPassParser.AssignExpression_InContext = AssignExpression_InContext;

AssignExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AssignExpression_InContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};
AssignExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression_In(this);
	}
};

AssignExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression_In(this);
	}
};


function RelationalExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
RelationalExpression_InContext.prototype.constructor = RelationalExpression_InContext;

ECMAScriptPassParser.RelationalExpression_InContext = RelationalExpression_InContext;

RelationalExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

RelationalExpression_InContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression_In(this);
	}
};

RelationalExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression_In(this);
	}
};


function AssignmentOperatorExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
AssignmentOperatorExpression_InContext.prototype.constructor = AssignmentOperatorExpression_InContext;

ECMAScriptPassParser.AssignmentOperatorExpression_InContext = AssignmentOperatorExpression_InContext;

AssignmentOperatorExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

AssignmentOperatorExpression_InContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression_In(this);
	}
};

AssignmentOperatorExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression_In(this);
	}
};


function InstanceOfExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InstanceOfExpression_InContext.prototype.constructor = InstanceOfExpression_InContext;

ECMAScriptPassParser.InstanceOfExpression_InContext = InstanceOfExpression_InContext;

InstanceOfExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InstanceOfExpression_InContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression_In(this);
	}
};

InstanceOfExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression_In(this);
	}
};


function InExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
InExpression_InContext.prototype.constructor = InExpression_InContext;

ECMAScriptPassParser.InExpression_InContext = InExpression_InContext;

InExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

InExpression_InContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};
InExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInExpression_In(this);
	}
};

InExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInExpression_In(this);
	}
};


function LogicalORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
LogicalORExpression_InContext.prototype.constructor = LogicalORExpression_InContext;

ECMAScriptPassParser.LogicalORExpression_InContext = LogicalORExpression_InContext;

LogicalORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

LogicalORExpression_InContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression_In(this);
	}
};

LogicalORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression_In(this);
	}
};


function ShiftExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
ShiftExpression_InContext.prototype.constructor = ShiftExpression_InContext;

ECMAScriptPassParser.ShiftExpression_InContext = ShiftExpression_InContext;

ShiftExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

ShiftExpression_InContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression_In(this);
	}
};

ShiftExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression_In(this);
	}
};


function UnaryExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
UnaryExpression_InContext.prototype.constructor = UnaryExpression_InContext;

ECMAScriptPassParser.UnaryExpression_InContext = UnaryExpression_InContext;

UnaryExpression_InContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpression_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};
UnaryExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression_In(this);
	}
};

UnaryExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression_In(this);
	}
};


function BitwiseXORExpression_InContext(parser, ctx) {
	AssignmentExpression_InContext.call(this, parser);
    AssignmentExpression_InContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpression_InContext.prototype = Object.create(AssignmentExpression_InContext.prototype);
BitwiseXORExpression_InContext.prototype.constructor = BitwiseXORExpression_InContext;

ECMAScriptPassParser.BitwiseXORExpression_InContext = BitwiseXORExpression_InContext;

BitwiseXORExpression_InContext.prototype.assignmentExpression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_InContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_InContext,i);
    }
};

BitwiseXORExpression_InContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression_In(this);
	}
};

BitwiseXORExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression_In(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression_In = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpression_InContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 106;
    this.enterRecursionRule(localctx, 106, ECMAScriptPassParser.RULE_assignmentExpression_In, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GenExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 999;
            this.generatorExpression();
            break;

        case 2:
            localctx = new FuncExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1000;
            this.functionExpression();
            break;

        case 3:
            localctx = new UnaryExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1001;
            this.unaryOperator();
            this.state = 1002;
            this.assignmentExpression_In(19);
            break;

        case 4:
            localctx = new ArrowFunction_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1004;
            this.arrowParameters();
            this.state = 1005;
            this.match(ECMAScriptPassParser.FatArrow);
            this.state = 1006;
            this.conciseBody_In();
            break;

        case 5:
            localctx = new LhsExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1008;
            this.leftHandSideExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1073;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1071;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1011;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1012;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 1013;
                    this.assignmentExpression_In(19);
                    break;

                case 2:
                    localctx = new MultiplicativeExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1014;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1015;
                    this.multiplicativeOperator();
                    this.state = 1016;
                    this.assignmentExpression_In(18);
                    break;

                case 3:
                    localctx = new AdditiveExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1018;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1019;
                    this.additiveOperator();
                    this.state = 1020;
                    this.assignmentExpression_In(17);
                    break;

                case 4:
                    localctx = new ShiftExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1022;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1023;
                    this.shiftOperator();
                    this.state = 1024;
                    this.assignmentExpression_In(16);
                    break;

                case 5:
                    localctx = new RelationalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1026;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1027;
                    this.relationalOperator();
                    this.state = 1028;
                    this.assignmentExpression_In(15);
                    break;

                case 6:
                    localctx = new InExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1030;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1031;
                    this.match(ECMAScriptPassParser.In);
                    this.state = 1032;
                    this.assignmentExpression_In(14);
                    break;

                case 7:
                    localctx = new InstanceOfExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1033;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1034;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 1035;
                    this.assignmentExpression_In(13);
                    break;

                case 8:
                    localctx = new EqualityExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1036;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1037;
                    this.equalityOperator();
                    this.state = 1038;
                    this.assignmentExpression_In(12);
                    break;

                case 9:
                    localctx = new BitwiseANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1040;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1041;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 1042;
                    this.assignmentExpression_In(11);
                    break;

                case 10:
                    localctx = new BitwiseXORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1043;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1044;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 1045;
                    this.assignmentExpression_In(10);
                    break;

                case 11:
                    localctx = new BitwiseORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1046;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1047;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 1048;
                    this.assignmentExpression_In(9);
                    break;

                case 12:
                    localctx = new LogicalANDExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1049;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1050;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 1051;
                    this.assignmentExpression_In(8);
                    break;

                case 13:
                    localctx = new LogicalORExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1052;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1053;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 1054;
                    this.assignmentExpression_In(7);
                    break;

                case 14:
                    localctx = new ConditionalExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1055;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1056;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 1057;
                    this.assignmentExpression_In(0);
                    this.state = 1058;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 1059;
                    this.assignmentExpression_In(6);
                    break;

                case 15:
                    localctx = new AssignExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1061;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1062;
                    this.match(ECMAScriptPassParser.Assign);
                    this.state = 1063;
                    this.assignmentExpression_In(4);
                    break;

                case 16:
                    localctx = new AssignmentOperatorExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1064;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1065;
                    this.assignmentOperator();
                    this.state = 1066;
                    this.assignmentExpression_In(3);
                    break;

                case 17:
                    localctx = new UpdateExpression_InContext(this, new AssignmentExpression_InContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In);
                    this.state = 1068;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1069;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 1070;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 1075;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AssignmentExpression_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentExpression_In_Yield;
    return this;
}

AssignmentExpression_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpression_In_YieldContext.prototype.constructor = AssignmentExpression_In_YieldContext;


 
AssignmentExpression_In_YieldContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AssignExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
AssignExpression_In_YieldContext.prototype.constructor = AssignExpression_In_YieldContext;

ECMAScriptPassParser.AssignExpression_In_YieldContext = AssignExpression_In_YieldContext;

AssignExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

AssignExpression_In_YieldContext.prototype.Assign = function() {
    return this.getToken(ECMAScriptPassParser.Assign, 0);
};
AssignExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignExpression_In_Yield(this);
	}
};

AssignExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignExpression_In_Yield(this);
	}
};


function ConditionalExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
ConditionalExpression_In_YieldContext.prototype.constructor = ConditionalExpression_In_YieldContext;

ECMAScriptPassParser.ConditionalExpression_In_YieldContext = ConditionalExpression_In_YieldContext;

ConditionalExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

ConditionalExpression_In_YieldContext.prototype.QuestionMark = function() {
    return this.getToken(ECMAScriptPassParser.QuestionMark, 0);
};

ConditionalExpression_In_YieldContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};
ConditionalExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConditionalExpression_In_Yield(this);
	}
};

ConditionalExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConditionalExpression_In_Yield(this);
	}
};


function LogicalANDExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalANDExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
LogicalANDExpression_In_YieldContext.prototype.constructor = LogicalANDExpression_In_YieldContext;

ECMAScriptPassParser.LogicalANDExpression_In_YieldContext = LogicalANDExpression_In_YieldContext;

LogicalANDExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

LogicalANDExpression_In_YieldContext.prototype.And = function() {
    return this.getToken(ECMAScriptPassParser.And, 0);
};
LogicalANDExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalANDExpression_In_Yield(this);
	}
};

LogicalANDExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalANDExpression_In_Yield(this);
	}
};


function LhsExpression_Yield_InContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LhsExpression_Yield_InContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
LhsExpression_Yield_InContext.prototype.constructor = LhsExpression_Yield_InContext;

ECMAScriptPassParser.LhsExpression_Yield_InContext = LhsExpression_Yield_InContext;

LhsExpression_Yield_InContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};
LhsExpression_Yield_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLhsExpression_Yield_In(this);
	}
};

LhsExpression_Yield_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLhsExpression_Yield_In(this);
	}
};


function InstanceOfExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
InstanceOfExpression_In_YieldContext.prototype.constructor = InstanceOfExpression_In_YieldContext;

ECMAScriptPassParser.InstanceOfExpression_In_YieldContext = InstanceOfExpression_In_YieldContext;

InstanceOfExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

InstanceOfExpression_In_YieldContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};
InstanceOfExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInstanceOfExpression_In_Yield(this);
	}
};

InstanceOfExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInstanceOfExpression_In_Yield(this);
	}
};


function ExponentiationExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentiationExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
ExponentiationExpression_In_YieldContext.prototype.constructor = ExponentiationExpression_In_YieldContext;

ECMAScriptPassParser.ExponentiationExpression_In_YieldContext = ExponentiationExpression_In_YieldContext;

ExponentiationExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

ExponentiationExpression_In_YieldContext.prototype.Power = function() {
    return this.getToken(ECMAScriptPassParser.Power, 0);
};
ExponentiationExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExponentiationExpression_In_Yield(this);
	}
};

ExponentiationExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExponentiationExpression_In_Yield(this);
	}
};


function UnaryExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
UnaryExpression_In_YieldContext.prototype.constructor = UnaryExpression_In_YieldContext;

ECMAScriptPassParser.UnaryExpression_In_YieldContext = UnaryExpression_In_YieldContext;

UnaryExpression_In_YieldContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};
UnaryExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryExpression_In_Yield(this);
	}
};

UnaryExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryExpression_In_Yield(this);
	}
};


function MultiplicativeExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
MultiplicativeExpression_In_YieldContext.prototype.constructor = MultiplicativeExpression_In_YieldContext;

ECMAScriptPassParser.MultiplicativeExpression_In_YieldContext = MultiplicativeExpression_In_YieldContext;

MultiplicativeExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

MultiplicativeExpression_In_YieldContext.prototype.multiplicativeOperator = function() {
    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
};
MultiplicativeExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeExpression_In_Yield(this);
	}
};

MultiplicativeExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeExpression_In_Yield(this);
	}
};


function BitwiseXORExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseXORExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
BitwiseXORExpression_In_YieldContext.prototype.constructor = BitwiseXORExpression_In_YieldContext;

ECMAScriptPassParser.BitwiseXORExpression_In_YieldContext = BitwiseXORExpression_In_YieldContext;

BitwiseXORExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

BitwiseXORExpression_In_YieldContext.prototype.BitXor = function() {
    return this.getToken(ECMAScriptPassParser.BitXor, 0);
};
BitwiseXORExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseXORExpression_In_Yield(this);
	}
};

BitwiseXORExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseXORExpression_In_Yield(this);
	}
};


function LogicalORExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalORExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
LogicalORExpression_In_YieldContext.prototype.constructor = LogicalORExpression_In_YieldContext;

ECMAScriptPassParser.LogicalORExpression_In_YieldContext = LogicalORExpression_In_YieldContext;

LogicalORExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

LogicalORExpression_In_YieldContext.prototype.Or = function() {
    return this.getToken(ECMAScriptPassParser.Or, 0);
};
LogicalORExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLogicalORExpression_In_Yield(this);
	}
};

LogicalORExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLogicalORExpression_In_Yield(this);
	}
};


function GenExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GenExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
GenExpression_In_YieldContext.prototype.constructor = GenExpression_In_YieldContext;

ECMAScriptPassParser.GenExpression_In_YieldContext = GenExpression_In_YieldContext;

GenExpression_In_YieldContext.prototype.generatorExpression = function() {
    return this.getTypedRuleContext(GeneratorExpressionContext,0);
};
GenExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGenExpression_In_Yield(this);
	}
};

GenExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGenExpression_In_Yield(this);
	}
};


function AssignmentOperatorExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
AssignmentOperatorExpression_In_YieldContext.prototype.constructor = AssignmentOperatorExpression_In_YieldContext;

ECMAScriptPassParser.AssignmentOperatorExpression_In_YieldContext = AssignmentOperatorExpression_In_YieldContext;

AssignmentOperatorExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

AssignmentOperatorExpression_In_YieldContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperatorExpression_In_Yield(this);
	}
};

AssignmentOperatorExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperatorExpression_In_Yield(this);
	}
};


function InExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
InExpression_In_YieldContext.prototype.constructor = InExpression_In_YieldContext;

ECMAScriptPassParser.InExpression_In_YieldContext = InExpression_In_YieldContext;

InExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

InExpression_In_YieldContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};
InExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterInExpression_In_Yield(this);
	}
};

InExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitInExpression_In_Yield(this);
	}
};


function AdditiveExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
AdditiveExpression_In_YieldContext.prototype.constructor = AdditiveExpression_In_YieldContext;

ECMAScriptPassParser.AdditiveExpression_In_YieldContext = AdditiveExpression_In_YieldContext;

AdditiveExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

AdditiveExpression_In_YieldContext.prototype.additiveOperator = function() {
    return this.getTypedRuleContext(AdditiveOperatorContext,0);
};
AdditiveExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveExpression_In_Yield(this);
	}
};

AdditiveExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveExpression_In_Yield(this);
	}
};


function FuncExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuncExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
FuncExpression_In_YieldContext.prototype.constructor = FuncExpression_In_YieldContext;

ECMAScriptPassParser.FuncExpression_In_YieldContext = FuncExpression_In_YieldContext;

FuncExpression_In_YieldContext.prototype.functionExpression = function() {
    return this.getTypedRuleContext(FunctionExpressionContext,0);
};
FuncExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFuncExpression_In_Yield(this);
	}
};

FuncExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFuncExpression_In_Yield(this);
	}
};


function BitwiseANDExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseANDExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
BitwiseANDExpression_In_YieldContext.prototype.constructor = BitwiseANDExpression_In_YieldContext;

ECMAScriptPassParser.BitwiseANDExpression_In_YieldContext = BitwiseANDExpression_In_YieldContext;

BitwiseANDExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

BitwiseANDExpression_In_YieldContext.prototype.BitAnd = function() {
    return this.getToken(ECMAScriptPassParser.BitAnd, 0);
};
BitwiseANDExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseANDExpression_In_Yield(this);
	}
};

BitwiseANDExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseANDExpression_In_Yield(this);
	}
};


function ShiftExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShiftExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
ShiftExpression_In_YieldContext.prototype.constructor = ShiftExpression_In_YieldContext;

ECMAScriptPassParser.ShiftExpression_In_YieldContext = ShiftExpression_In_YieldContext;

ShiftExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

ShiftExpression_In_YieldContext.prototype.shiftOperator = function() {
    return this.getTypedRuleContext(ShiftOperatorContext,0);
};
ShiftExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftExpression_In_Yield(this);
	}
};

ShiftExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftExpression_In_Yield(this);
	}
};


function YieldExpression_InContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpression_InContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
YieldExpression_InContext.prototype.constructor = YieldExpression_InContext;

ECMAScriptPassParser.YieldExpression_InContext = YieldExpression_InContext;

YieldExpression_InContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

YieldExpression_InContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};
YieldExpression_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterYieldExpression_In(this);
	}
};

YieldExpression_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitYieldExpression_In(this);
	}
};


function RelationalExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
RelationalExpression_In_YieldContext.prototype.constructor = RelationalExpression_In_YieldContext;

ECMAScriptPassParser.RelationalExpression_In_YieldContext = RelationalExpression_In_YieldContext;

RelationalExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

RelationalExpression_In_YieldContext.prototype.relationalOperator = function() {
    return this.getTypedRuleContext(RelationalOperatorContext,0);
};
RelationalExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalExpression_In_Yield(this);
	}
};

RelationalExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalExpression_In_Yield(this);
	}
};


function BitwiseORExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseORExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
BitwiseORExpression_In_YieldContext.prototype.constructor = BitwiseORExpression_In_YieldContext;

ECMAScriptPassParser.BitwiseORExpression_In_YieldContext = BitwiseORExpression_In_YieldContext;

BitwiseORExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

BitwiseORExpression_In_YieldContext.prototype.BitOr = function() {
    return this.getToken(ECMAScriptPassParser.BitOr, 0);
};
BitwiseORExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBitwiseORExpression_In_Yield(this);
	}
};

BitwiseORExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBitwiseORExpression_In_Yield(this);
	}
};


function UpdateExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UpdateExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
UpdateExpression_In_YieldContext.prototype.constructor = UpdateExpression_In_YieldContext;

ECMAScriptPassParser.UpdateExpression_In_YieldContext = UpdateExpression_In_YieldContext;

UpdateExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function() {
    return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,0);
};

UpdateExpression_In_YieldContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UpdateExpression_In_YieldContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};
UpdateExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUpdateExpression_In_Yield(this);
	}
};

UpdateExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUpdateExpression_In_Yield(this);
	}
};


function EqualityExpression_In_YieldContext(parser, ctx) {
	AssignmentExpression_In_YieldContext.call(this, parser);
    AssignmentExpression_In_YieldContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpression_In_YieldContext.prototype = Object.create(AssignmentExpression_In_YieldContext.prototype);
EqualityExpression_In_YieldContext.prototype.constructor = EqualityExpression_In_YieldContext;

ECMAScriptPassParser.EqualityExpression_In_YieldContext = EqualityExpression_In_YieldContext;

EqualityExpression_In_YieldContext.prototype.assignmentExpression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpression_In_YieldContext,i);
    }
};

EqualityExpression_In_YieldContext.prototype.equalityOperator = function() {
    return this.getTypedRuleContext(EqualityOperatorContext,0);
};
EqualityExpression_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityExpression_In_Yield(this);
	}
};

EqualityExpression_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityExpression_In_Yield(this);
	}
};



ECMAScriptPassParser.prototype.assignmentExpression_In_Yield = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AssignmentExpression_In_YieldContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 108;
    this.enterRecursionRule(localctx, 108, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GenExpression_In_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1077;
            this.generatorExpression();
            break;

        case 2:
            localctx = new FuncExpression_In_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1078;
            this.functionExpression();
            break;

        case 3:
            localctx = new UnaryExpression_In_YieldContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1079;
            this.unaryOperator();
            this.state = 1080;
            this.assignmentExpression_In_Yield(19);
            break;

        case 4:
            localctx = new YieldExpression_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1082;
            this.match(ECMAScriptPassParser.Yield);
            this.state = 1083;
            this.assignmentExpression_In_Yield(2);
            break;

        case 5:
            localctx = new LhsExpression_Yield_InContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1084;
            this.leftHandSideExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1149;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1147;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExponentiationExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1087;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1088;
                    this.match(ECMAScriptPassParser.Power);
                    this.state = 1089;
                    this.assignmentExpression_In_Yield(19);
                    break;

                case 2:
                    localctx = new MultiplicativeExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1090;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1091;
                    this.multiplicativeOperator();
                    this.state = 1092;
                    this.assignmentExpression_In_Yield(18);
                    break;

                case 3:
                    localctx = new AdditiveExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1094;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1095;
                    this.additiveOperator();
                    this.state = 1096;
                    this.assignmentExpression_In_Yield(17);
                    break;

                case 4:
                    localctx = new ShiftExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1098;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1099;
                    this.shiftOperator();
                    this.state = 1100;
                    this.assignmentExpression_In_Yield(16);
                    break;

                case 5:
                    localctx = new RelationalExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1102;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1103;
                    this.relationalOperator();
                    this.state = 1104;
                    this.assignmentExpression_In_Yield(15);
                    break;

                case 6:
                    localctx = new InExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1106;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1107;
                    this.match(ECMAScriptPassParser.In);
                    this.state = 1108;
                    this.assignmentExpression_In_Yield(14);
                    break;

                case 7:
                    localctx = new InstanceOfExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1109;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1110;
                    this.match(ECMAScriptPassParser.Instanceof);
                    this.state = 1111;
                    this.assignmentExpression_In_Yield(13);
                    break;

                case 8:
                    localctx = new EqualityExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1112;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1113;
                    this.equalityOperator();
                    this.state = 1114;
                    this.assignmentExpression_In_Yield(12);
                    break;

                case 9:
                    localctx = new BitwiseANDExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1116;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1117;
                    this.match(ECMAScriptPassParser.BitAnd);
                    this.state = 1118;
                    this.assignmentExpression_In_Yield(11);
                    break;

                case 10:
                    localctx = new BitwiseXORExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1119;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1120;
                    this.match(ECMAScriptPassParser.BitXor);
                    this.state = 1121;
                    this.assignmentExpression_In_Yield(10);
                    break;

                case 11:
                    localctx = new BitwiseORExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1122;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1123;
                    this.match(ECMAScriptPassParser.BitOr);
                    this.state = 1124;
                    this.assignmentExpression_In_Yield(9);
                    break;

                case 12:
                    localctx = new LogicalANDExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1125;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1126;
                    this.match(ECMAScriptPassParser.And);
                    this.state = 1127;
                    this.assignmentExpression_In_Yield(8);
                    break;

                case 13:
                    localctx = new LogicalORExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1128;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1129;
                    this.match(ECMAScriptPassParser.Or);
                    this.state = 1130;
                    this.assignmentExpression_In_Yield(7);
                    break;

                case 14:
                    localctx = new ConditionalExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1131;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1132;
                    this.match(ECMAScriptPassParser.QuestionMark);
                    this.state = 1133;
                    this.assignmentExpression_In_Yield(0);
                    this.state = 1134;
                    this.match(ECMAScriptPassParser.Colon);
                    this.state = 1135;
                    this.assignmentExpression_In_Yield(6);
                    break;

                case 15:
                    localctx = new AssignExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1137;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1138;
                    this.match(ECMAScriptPassParser.Assign);
                    this.state = 1139;
                    this.assignmentExpression_In_Yield(5);
                    break;

                case 16:
                    localctx = new AssignmentOperatorExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1140;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1141;
                    this.assignmentOperator();
                    this.state = 1142;
                    this.assignmentExpression_In_Yield(4);
                    break;

                case 17:
                    localctx = new UpdateExpression_In_YieldContext(this, new AssignmentExpression_In_YieldContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptPassParser.RULE_assignmentExpression_In_Yield);
                    this.state = 1144;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1145;
                    if (!( !this.isLineTerminatorEquivalent())) {
                        throw new antlr4.error.FailedPredicateException(this, "!this.isLineTerminatorEquivalent()");
                    }
                    this.state = 1146;
                    _la = this._input.LA(1);
                    if(!(_la===ECMAScriptPassParser.PlusPlus || _la===ECMAScriptPassParser.MinusMinus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 1151;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptPassParser.Delete, 0);
};

UnaryOperatorContext.prototype.Void = function() {
    return this.getToken(ECMAScriptPassParser.Void, 0);
};

UnaryOperatorContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptPassParser.Typeof, 0);
};

UnaryOperatorContext.prototype.PlusPlus = function() {
    return this.getToken(ECMAScriptPassParser.PlusPlus, 0);
};

UnaryOperatorContext.prototype.MinusMinus = function() {
    return this.getToken(ECMAScriptPassParser.MinusMinus, 0);
};

UnaryOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptPassParser.Plus, 0);
};

UnaryOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptPassParser.Minus, 0);
};

UnaryOperatorContext.prototype.BitNot = function() {
    return this.getToken(ECMAScriptPassParser.BitNot, 0);
};

UnaryOperatorContext.prototype.Not = function() {
    return this.getToken(ECMAScriptPassParser.Not, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUnaryOperator(this);
	}
};




ECMAScriptPassParser.UnaryOperatorContext = UnaryOperatorContext;

ECMAScriptPassParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ECMAScriptPassParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        _la = this._input.LA(1);
        if(!(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (ECMAScriptPassParser.Plus - 28)) | (1 << (ECMAScriptPassParser.Minus - 28)) | (1 << (ECMAScriptPassParser.PlusPlus - 28)) | (1 << (ECMAScriptPassParser.MinusMinus - 28)) | (1 << (ECMAScriptPassParser.Not - 28)) | (1 << (ECMAScriptPassParser.BitNot - 28)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ECMAScriptPassParser.Delete - 76)) | (1 << (ECMAScriptPassParser.Typeof - 76)) | (1 << (ECMAScriptPassParser.Void - 76)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_multiplicativeOperator;
    return this;
}

MultiplicativeOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeOperatorContext.prototype.constructor = MultiplicativeOperatorContext;

MultiplicativeOperatorContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

MultiplicativeOperatorContext.prototype.Divide = function() {
    return this.getToken(ECMAScriptPassParser.Divide, 0);
};

MultiplicativeOperatorContext.prototype.Modulo = function() {
    return this.getToken(ECMAScriptPassParser.Modulo, 0);
};

MultiplicativeOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMultiplicativeOperator(this);
	}
};

MultiplicativeOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMultiplicativeOperator(this);
	}
};




ECMAScriptPassParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext;

ECMAScriptPassParser.prototype.multiplicativeOperator = function() {

    var localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ECMAScriptPassParser.RULE_multiplicativeOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1154;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ECMAScriptPassParser.Multiply - 30)) | (1 << (ECMAScriptPassParser.Modulo - 30)) | (1 << (ECMAScriptPassParser.Divide - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_additiveOperator;
    return this;
}

AdditiveOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveOperatorContext.prototype.constructor = AdditiveOperatorContext;

AdditiveOperatorContext.prototype.Plus = function() {
    return this.getToken(ECMAScriptPassParser.Plus, 0);
};

AdditiveOperatorContext.prototype.Minus = function() {
    return this.getToken(ECMAScriptPassParser.Minus, 0);
};

AdditiveOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAdditiveOperator(this);
	}
};

AdditiveOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAdditiveOperator(this);
	}
};




ECMAScriptPassParser.AdditiveOperatorContext = AdditiveOperatorContext;

ECMAScriptPassParser.prototype.additiveOperator = function() {

    var localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ECMAScriptPassParser.RULE_additiveOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1156;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.Plus || _la===ECMAScriptPassParser.Minus)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShiftOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_shiftOperator;
    return this;
}

ShiftOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftOperatorContext.prototype.constructor = ShiftOperatorContext;

ShiftOperatorContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(ECMAScriptPassParser.LeftShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftArithmetic, 0);
};

ShiftOperatorContext.prototype.RightShiftLogical = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftLogical, 0);
};

ShiftOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterShiftOperator(this);
	}
};

ShiftOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitShiftOperator(this);
	}
};




ECMAScriptPassParser.ShiftOperatorContext = ShiftOperatorContext;

ECMAScriptPassParser.prototype.shiftOperator = function() {

    var localctx = new ShiftOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ECMAScriptPassParser.RULE_shiftOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1158;
        _la = this._input.LA(1);
        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (ECMAScriptPassParser.LeftShiftArithmetic - 35)) | (1 << (ECMAScriptPassParser.RightShiftArithmetic - 35)) | (1 << (ECMAScriptPassParser.RightShiftLogical - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_relationalOperator;
    return this;
}

RelationalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalOperatorContext.prototype.constructor = RelationalOperatorContext;

RelationalOperatorContext.prototype.LessThan = function() {
    return this.getToken(ECMAScriptPassParser.LessThan, 0);
};

RelationalOperatorContext.prototype.GreaterThan = function() {
    return this.getToken(ECMAScriptPassParser.GreaterThan, 0);
};

RelationalOperatorContext.prototype.LessThanEquals = function() {
    return this.getToken(ECMAScriptPassParser.LessThanEquals, 0);
};

RelationalOperatorContext.prototype.GreaterThanEquals = function() {
    return this.getToken(ECMAScriptPassParser.GreaterThanEquals, 0);
};

RelationalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterRelationalOperator(this);
	}
};

RelationalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitRelationalOperator(this);
	}
};




ECMAScriptPassParser.RelationalOperatorContext = RelationalOperatorContext;

ECMAScriptPassParser.prototype.relationalOperator = function() {

    var localctx = new RelationalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ECMAScriptPassParser.RULE_relationalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1160;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.LessThan) | (1 << ECMAScriptPassParser.GreaterThan) | (1 << ECMAScriptPassParser.LessThanEquals) | (1 << ECMAScriptPassParser.GreaterThanEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_equalityOperator;
    return this;
}

EqualityOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityOperatorContext.prototype.constructor = EqualityOperatorContext;

EqualityOperatorContext.prototype.Equals = function() {
    return this.getToken(ECMAScriptPassParser.Equals, 0);
};

EqualityOperatorContext.prototype.NotEquals = function() {
    return this.getToken(ECMAScriptPassParser.NotEquals, 0);
};

EqualityOperatorContext.prototype.IdentityEquals = function() {
    return this.getToken(ECMAScriptPassParser.IdentityEquals, 0);
};

EqualityOperatorContext.prototype.IdentityNotEquals = function() {
    return this.getToken(ECMAScriptPassParser.IdentityNotEquals, 0);
};

EqualityOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEqualityOperator(this);
	}
};

EqualityOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEqualityOperator(this);
	}
};




ECMAScriptPassParser.EqualityOperatorContext = EqualityOperatorContext;

ECMAScriptPassParser.prototype.equalityOperator = function() {

    var localctx = new EqualityOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ECMAScriptPassParser.RULE_equalityOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1162;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.Equals) | (1 << ECMAScriptPassParser.NotEquals) | (1 << ECMAScriptPassParser.IdentityEquals) | (1 << ECMAScriptPassParser.IdentityNotEquals))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(ECMAScriptPassParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(ECMAScriptPassParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(ECMAScriptPassParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(ECMAScriptPassParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModuloAssign = function() {
    return this.getToken(ECMAScriptPassParser.ModuloAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(ECMAScriptPassParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptPassParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(ECMAScriptPassParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(ECMAScriptPassParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ECMAScriptPassParser.AssignmentOperatorContext = AssignmentOperatorContext;

ECMAScriptPassParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ECMAScriptPassParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1164;
        _la = this._input.LA(1);
        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (ECMAScriptPassParser.PlusAssign - 48)) | (1 << (ECMAScriptPassParser.MinusAssign - 48)) | (1 << (ECMAScriptPassParser.MultiplyAssign - 48)) | (1 << (ECMAScriptPassParser.ModuloAssign - 48)) | (1 << (ECMAScriptPassParser.PowerAssign - 48)) | (1 << (ECMAScriptPassParser.LeftShiftArithmeticAssign - 48)) | (1 << (ECMAScriptPassParser.RightShiftArithmeticAssign - 48)) | (1 << (ECMAScriptPassParser.RightShiftLogicalAssign - 48)) | (1 << (ECMAScriptPassParser.BitAndAssign - 48)) | (1 << (ECMAScriptPassParser.BitOrAssign - 48)) | (1 << (ECMAScriptPassParser.BitXorAssign - 48)) | (1 << (ECMAScriptPassParser.DivideAssign - 48)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.breakableStatement = function() {
    return this.getTypedRuleContext(BreakableStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatement(this);
	}
};




ECMAScriptPassParser.StatementContext = StatementContext;

ECMAScriptPassParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ECMAScriptPassParser.RULE_statement);
    try {
        this.state = 1179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1166;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1167;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1168;
            this.emptyStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1169;
            this.expressionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1170;
            this.ifStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1171;
            this.breakableStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1172;
            this.continueStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1173;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1174;
            this.withStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1175;
            this.labelledStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1176;
            this.throwStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1177;
            this.tryStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1178;
            this.debuggerStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statement_Return;
    return this;
}

Statement_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_ReturnContext.prototype.constructor = Statement_ReturnContext;

Statement_ReturnContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

Statement_ReturnContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

Statement_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatement_Return(this);
	}
};

Statement_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatement_Return(this);
	}
};




ECMAScriptPassParser.Statement_ReturnContext = Statement_ReturnContext;

ECMAScriptPassParser.prototype.statement_Return = function() {

    var localctx = new Statement_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ECMAScriptPassParser.RULE_statement_Return);
    try {
        this.state = 1183;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.Plus:
        case ECMAScriptPassParser.Minus:
        case ECMAScriptPassParser.PlusPlus:
        case ECMAScriptPassParser.MinusMinus:
        case ECMAScriptPassParser.Not:
        case ECMAScriptPassParser.BitNot:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1181;
            this.expressionStatement();
            break;
        case ECMAScriptPassParser.Return:
            this.enterOuterAlt(localctx, 2);
            this.state = 1182;
            this.returnStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Statement_Yield_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statement_Yield_Return;
    return this;
}

Statement_Yield_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_Yield_ReturnContext.prototype.constructor = Statement_Yield_ReturnContext;

Statement_Yield_ReturnContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

Statement_Yield_ReturnContext.prototype.expressionStatement_Yield = function() {
    return this.getTypedRuleContext(ExpressionStatement_YieldContext,0);
};

Statement_Yield_ReturnContext.prototype.returnStatement_Yield = function() {
    return this.getTypedRuleContext(ReturnStatement_YieldContext,0);
};

Statement_Yield_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatement_Yield_Return(this);
	}
};

Statement_Yield_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatement_Yield_Return(this);
	}
};




ECMAScriptPassParser.Statement_Yield_ReturnContext = Statement_Yield_ReturnContext;

ECMAScriptPassParser.prototype.statement_Yield_Return = function() {

    var localctx = new Statement_Yield_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ECMAScriptPassParser.RULE_statement_Yield_Return);
    try {
        this.state = 1188;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.SemiColon:
            this.enterOuterAlt(localctx, 1);
            this.state = 1185;
            this.emptyStatement();
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.Plus:
        case ECMAScriptPassParser.Minus:
        case ECMAScriptPassParser.PlusPlus:
        case ECMAScriptPassParser.MinusMinus:
        case ECMAScriptPassParser.Not:
        case ECMAScriptPassParser.BitNot:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 2);
            this.state = 1186;
            this.expressionStatement_Yield();
            break;
        case ECMAScriptPassParser.Return:
            this.enterOuterAlt(localctx, 3);
            this.state = 1187;
            this.returnStatement_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statementListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItemContext);
    } else {
        return this.getTypedRuleContext(StatementListItemContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementList(this);
	}
};




ECMAScriptPassParser.StatementListContext = StatementListContext;

ECMAScriptPassParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ECMAScriptPassParser.RULE_statementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1191; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1190;
            this.statementListItem();
            this.state = 1193; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementList_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementList_Return;
    return this;
}

StatementList_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementList_ReturnContext.prototype.constructor = StatementList_ReturnContext;

StatementList_ReturnContext.prototype.statementListItem_Return = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItem_ReturnContext);
    } else {
        return this.getTypedRuleContext(StatementListItem_ReturnContext,i);
    }
};

StatementList_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementList_Return(this);
	}
};

StatementList_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementList_Return(this);
	}
};




ECMAScriptPassParser.StatementList_ReturnContext = StatementList_ReturnContext;

ECMAScriptPassParser.prototype.statementList_Return = function() {

    var localctx = new StatementList_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ECMAScriptPassParser.RULE_statementList_Return);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1196; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1195;
            this.statementListItem_Return();
            this.state = 1198; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementList_Yield_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementList_Yield_Return;
    return this;
}

StatementList_Yield_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementList_Yield_ReturnContext.prototype.constructor = StatementList_Yield_ReturnContext;

StatementList_Yield_ReturnContext.prototype.statementListItem_Yield_Return = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListItem_Yield_ReturnContext);
    } else {
        return this.getTypedRuleContext(StatementListItem_Yield_ReturnContext,i);
    }
};

StatementList_Yield_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementList_Yield_Return(this);
	}
};

StatementList_Yield_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementList_Yield_Return(this);
	}
};




ECMAScriptPassParser.StatementList_Yield_ReturnContext = StatementList_Yield_ReturnContext;

ECMAScriptPassParser.prototype.statementList_Yield_Return = function() {

    var localctx = new StatementList_Yield_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ECMAScriptPassParser.RULE_statementList_Yield_Return);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1201; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1200;
            this.statementListItem_Yield_Return();
            this.state = 1203; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementListItem;
    return this;
}

StatementListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItemContext.prototype.constructor = StatementListItemContext;

StatementListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

StatementListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementListItem(this);
	}
};

StatementListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementListItem(this);
	}
};




ECMAScriptPassParser.StatementListItemContext = StatementListItemContext;

ECMAScriptPassParser.prototype.statementListItem = function() {

    var localctx = new StatementListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ECMAScriptPassParser.RULE_statementListItem);
    try {
        this.state = 1207;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1205;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1206;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItem_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementListItem_Return;
    return this;
}

StatementListItem_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItem_ReturnContext.prototype.constructor = StatementListItem_ReturnContext;

StatementListItem_ReturnContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementListItem_ReturnContext.prototype.statement_Return = function() {
    return this.getTypedRuleContext(Statement_ReturnContext,0);
};

StatementListItem_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementListItem_Return(this);
	}
};

StatementListItem_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementListItem_Return(this);
	}
};




ECMAScriptPassParser.StatementListItem_ReturnContext = StatementListItem_ReturnContext;

ECMAScriptPassParser.prototype.statementListItem_Return = function() {

    var localctx = new StatementListItem_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ECMAScriptPassParser.RULE_statementListItem_Return);
    try {
        this.state = 1211;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1209;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1210;
            this.statement_Return();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListItem_Yield_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_statementListItem_Yield_Return;
    return this;
}

StatementListItem_Yield_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListItem_Yield_ReturnContext.prototype.constructor = StatementListItem_Yield_ReturnContext;

StatementListItem_Yield_ReturnContext.prototype.declaration_Yield = function() {
    return this.getTypedRuleContext(Declaration_YieldContext,0);
};

StatementListItem_Yield_ReturnContext.prototype.statement_Yield_Return = function() {
    return this.getTypedRuleContext(Statement_Yield_ReturnContext,0);
};

StatementListItem_Yield_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterStatementListItem_Yield_Return(this);
	}
};

StatementListItem_Yield_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitStatementListItem_Yield_Return(this);
	}
};




ECMAScriptPassParser.StatementListItem_Yield_ReturnContext = StatementListItem_Yield_ReturnContext;

ECMAScriptPassParser.prototype.statementListItem_Yield_Return = function() {

    var localctx = new StatementListItem_Yield_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ECMAScriptPassParser.RULE_statementListItem_Yield_Return);
    try {
        this.state = 1215;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1213;
            this.declaration_Yield();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1214;
            this.statement_Yield_Return();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitEmptyStatement(this);
	}
};




ECMAScriptPassParser.EmptyStatementContext = EmptyStatementContext;

ECMAScriptPassParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ECMAScriptPassParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1217;
        this.match(ECMAScriptPassParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(ECMAScriptPassParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitReturnStatement(this);
	}
};




ECMAScriptPassParser.ReturnStatementContext = ReturnStatementContext;

ECMAScriptPassParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ECMAScriptPassParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1219;
        this.match(ECMAScriptPassParser.Return);
        this.state = 1221;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1220;
            this.expression_In();

        }
        this.state = 1223;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_returnStatement_Yield;
    return this;
}

ReturnStatement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatement_YieldContext.prototype.constructor = ReturnStatement_YieldContext;

ReturnStatement_YieldContext.prototype.Return = function() {
    return this.getToken(ECMAScriptPassParser.Return, 0);
};

ReturnStatement_YieldContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatement_YieldContext.prototype.expression_In_Yield = function() {
    return this.getTypedRuleContext(Expression_In_YieldContext,0);
};

ReturnStatement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterReturnStatement_Yield(this);
	}
};

ReturnStatement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitReturnStatement_Yield(this);
	}
};




ECMAScriptPassParser.ReturnStatement_YieldContext = ReturnStatement_YieldContext;

ECMAScriptPassParser.prototype.returnStatement_Yield = function() {

    var localctx = new ReturnStatement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ECMAScriptPassParser.RULE_returnStatement_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1225;
        this.match(ECMAScriptPassParser.Return);
        this.state = 1227;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 1226;
            this.expression_In_Yield();

        }
        this.state = 1229;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptPassParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDebuggerStatement(this);
	}
};

DebuggerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDebuggerStatement(this);
	}
};




ECMAScriptPassParser.DebuggerStatementContext = DebuggerStatementContext;

ECMAScriptPassParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ECMAScriptPassParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1231;
        this.match(ECMAScriptPassParser.Debugger);
        this.state = 1232;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpressionStatement(this);
	}
};




ECMAScriptPassParser.ExpressionStatementContext = ExpressionStatementContext;

ECMAScriptPassParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ECMAScriptPassParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1234;
        this.expression_In();
        this.state = 1235;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_expressionStatement_Yield;
    return this;
}

ExpressionStatement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatement_YieldContext.prototype.constructor = ExpressionStatement_YieldContext;

ExpressionStatement_YieldContext.prototype.expression_In_Yield = function() {
    return this.getTypedRuleContext(Expression_In_YieldContext,0);
};

ExpressionStatement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExpressionStatement_Yield(this);
	}
};

ExpressionStatement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExpressionStatement_Yield(this);
	}
};




ECMAScriptPassParser.ExpressionStatement_YieldContext = ExpressionStatement_YieldContext;

ECMAScriptPassParser.prototype.expressionStatement_Yield = function() {

    var localctx = new ExpressionStatement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ECMAScriptPassParser.RULE_expressionStatement_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        this.expression_In_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingElement;
    return this;
}

BindingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElementContext.prototype.constructor = BindingElementContext;

BindingElementContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingElementContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

BindingElementContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

BindingElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingElement(this);
	}
};

BindingElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingElement(this);
	}
};




ECMAScriptPassParser.BindingElementContext = BindingElementContext;

ECMAScriptPassParser.prototype.bindingElement = function() {

    var localctx = new BindingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ECMAScriptPassParser.RULE_bindingElement);
    var _la = 0; // Token type
    try {
        this.state = 1244;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1239;
            this.singleNameBinding();
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1240;
            this.bindingPattern();
            this.state = 1242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Assign) {
                this.state = 1241;
                this.initializer_In();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingElement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingElement_Yield;
    return this;
}

BindingElement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingElement_YieldContext.prototype.constructor = BindingElement_YieldContext;

BindingElement_YieldContext.prototype.singleNameBinding_Yield = function() {
    return this.getTypedRuleContext(SingleNameBinding_YieldContext,0);
};

BindingElement_YieldContext.prototype.bindingPattern_Yield = function() {
    return this.getTypedRuleContext(BindingPattern_YieldContext,0);
};

BindingElement_YieldContext.prototype.initializer_In_Yield = function() {
    return this.getTypedRuleContext(Initializer_In_YieldContext,0);
};

BindingElement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingElement_Yield(this);
	}
};

BindingElement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingElement_Yield(this);
	}
};




ECMAScriptPassParser.BindingElement_YieldContext = BindingElement_YieldContext;

ECMAScriptPassParser.prototype.bindingElement_Yield = function() {

    var localctx = new BindingElement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ECMAScriptPassParser.RULE_bindingElement_Yield);
    var _la = 0; // Token type
    try {
        this.state = 1251;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1246;
            this.singleNameBinding_Yield();
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1247;
            this.bindingPattern_Yield();
            this.state = 1249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Assign) {
                this.state = 1248;
                this.initializer_In_Yield();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingRestElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingRestElement;
    return this;
}

BindingRestElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingRestElementContext.prototype.constructor = BindingRestElementContext;

BindingRestElementContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptPassParser.Spread, 0);
};

BindingRestElementContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

BindingRestElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingRestElement(this);
	}
};

BindingRestElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingRestElement(this);
	}
};




ECMAScriptPassParser.BindingRestElementContext = BindingRestElementContext;

ECMAScriptPassParser.prototype.bindingRestElement = function() {

    var localctx = new BindingRestElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ECMAScriptPassParser.RULE_bindingRestElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1253;
        this.match(ECMAScriptPassParser.Spread);
        this.state = 1254;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingRestElement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingRestElement_Yield;
    return this;
}

BindingRestElement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingRestElement_YieldContext.prototype.constructor = BindingRestElement_YieldContext;

BindingRestElement_YieldContext.prototype.Spread = function() {
    return this.getToken(ECMAScriptPassParser.Spread, 0);
};

BindingRestElement_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

BindingRestElement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingRestElement_Yield(this);
	}
};

BindingRestElement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingRestElement_Yield(this);
	}
};




ECMAScriptPassParser.BindingRestElement_YieldContext = BindingRestElement_YieldContext;

ECMAScriptPassParser.prototype.bindingRestElement_Yield = function() {

    var localctx = new BindingRestElement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ECMAScriptPassParser.RULE_bindingRestElement_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.match(ECMAScriptPassParser.Spread);
        this.state = 1257;
        this.bindingIdentifier_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleNameBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_singleNameBinding;
    return this;
}

SingleNameBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleNameBindingContext.prototype.constructor = SingleNameBindingContext;

SingleNameBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

SingleNameBindingContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

SingleNameBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSingleNameBinding(this);
	}
};

SingleNameBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSingleNameBinding(this);
	}
};




ECMAScriptPassParser.SingleNameBindingContext = SingleNameBindingContext;

ECMAScriptPassParser.prototype.singleNameBinding = function() {

    var localctx = new SingleNameBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ECMAScriptPassParser.RULE_singleNameBinding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1259;
        this.bindingIdentifier();
        this.state = 1261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 1260;
            this.initializer_In();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleNameBinding_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_singleNameBinding_Yield;
    return this;
}

SingleNameBinding_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleNameBinding_YieldContext.prototype.constructor = SingleNameBinding_YieldContext;

SingleNameBinding_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

SingleNameBinding_YieldContext.prototype.initializer_In_Yield = function() {
    return this.getTypedRuleContext(Initializer_In_YieldContext,0);
};

SingleNameBinding_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSingleNameBinding_Yield(this);
	}
};

SingleNameBinding_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSingleNameBinding_Yield(this);
	}
};




ECMAScriptPassParser.SingleNameBinding_YieldContext = SingleNameBinding_YieldContext;

ECMAScriptPassParser.prototype.singleNameBinding_Yield = function() {

    var localctx = new SingleNameBinding_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ECMAScriptPassParser.RULE_singleNameBinding_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1263;
        this.bindingIdentifier_Yield();
        this.state = 1265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Assign) {
            this.state = 1264;
            this.initializer_In_Yield();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingPattern;
    return this;
}

BindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPatternContext.prototype.constructor = BindingPatternContext;

BindingPatternContext.prototype.objectBindingPattern = function() {
    return this.getTypedRuleContext(ObjectBindingPatternContext,0);
};

BindingPatternContext.prototype.arrayBindingPattern = function() {
    return this.getTypedRuleContext(ArrayBindingPatternContext,0);
};

BindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingPattern(this);
	}
};

BindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingPattern(this);
	}
};




ECMAScriptPassParser.BindingPatternContext = BindingPatternContext;

ECMAScriptPassParser.prototype.bindingPattern = function() {

    var localctx = new BindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ECMAScriptPassParser.RULE_bindingPattern);
    try {
        this.state = 1269;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.OpenBrace:
            this.enterOuterAlt(localctx, 1);
            this.state = 1267;
            this.objectBindingPattern();
            break;
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1268;
            this.arrayBindingPattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPattern_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingPattern_Yield;
    return this;
}

BindingPattern_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPattern_YieldContext.prototype.constructor = BindingPattern_YieldContext;

BindingPattern_YieldContext.prototype.objectBindingPattern_Yield = function() {
    return this.getTypedRuleContext(ObjectBindingPattern_YieldContext,0);
};

BindingPattern_YieldContext.prototype.arrayBindingPattern_Yield = function() {
    return this.getTypedRuleContext(ArrayBindingPattern_YieldContext,0);
};

BindingPattern_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingPattern_Yield(this);
	}
};

BindingPattern_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingPattern_Yield(this);
	}
};




ECMAScriptPassParser.BindingPattern_YieldContext = BindingPattern_YieldContext;

ECMAScriptPassParser.prototype.bindingPattern_Yield = function() {

    var localctx = new BindingPattern_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ECMAScriptPassParser.RULE_bindingPattern_Yield);
    try {
        this.state = 1273;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.OpenBrace:
            this.enterOuterAlt(localctx, 1);
            this.state = 1271;
            this.objectBindingPattern_Yield();
            break;
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1272;
            this.arrayBindingPattern_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_objectBindingPattern;
    return this;
}

ObjectBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectBindingPatternContext.prototype.constructor = ObjectBindingPatternContext;

ObjectBindingPatternContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ObjectBindingPatternContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ObjectBindingPatternContext.prototype.bindingPropertyList = function() {
    return this.getTypedRuleContext(BindingPropertyListContext,0);
};

ObjectBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ObjectBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterObjectBindingPattern(this);
	}
};

ObjectBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitObjectBindingPattern(this);
	}
};




ECMAScriptPassParser.ObjectBindingPatternContext = ObjectBindingPatternContext;

ECMAScriptPassParser.prototype.objectBindingPattern = function() {

    var localctx = new ObjectBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ECMAScriptPassParser.RULE_objectBindingPattern);
    try {
        this.state = 1286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1275;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1276;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1277;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1278;
            this.bindingPropertyList();
            this.state = 1279;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1281;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1282;
            this.bindingPropertyList();
            this.state = 1283;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1284;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectBindingPattern_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_objectBindingPattern_Yield;
    return this;
}

ObjectBindingPattern_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectBindingPattern_YieldContext.prototype.constructor = ObjectBindingPattern_YieldContext;

ObjectBindingPattern_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ObjectBindingPattern_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ObjectBindingPattern_YieldContext.prototype.bindingPropertyList_Yield = function() {
    return this.getTypedRuleContext(BindingPropertyList_YieldContext,0);
};

ObjectBindingPattern_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ObjectBindingPattern_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterObjectBindingPattern_Yield(this);
	}
};

ObjectBindingPattern_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitObjectBindingPattern_Yield(this);
	}
};




ECMAScriptPassParser.ObjectBindingPattern_YieldContext = ObjectBindingPattern_YieldContext;

ECMAScriptPassParser.prototype.objectBindingPattern_Yield = function() {

    var localctx = new ObjectBindingPattern_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ECMAScriptPassParser.RULE_objectBindingPattern_Yield);
    try {
        this.state = 1299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1288;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1289;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1290;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1291;
            this.bindingPropertyList_Yield();
            this.state = 1292;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1294;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1295;
            this.bindingPropertyList_Yield();
            this.state = 1296;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1297;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayBindingPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrayBindingPattern;
    return this;
}

ArrayBindingPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayBindingPatternContext.prototype.constructor = ArrayBindingPatternContext;

ArrayBindingPatternContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

ArrayBindingPatternContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

ArrayBindingPatternContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayBindingPatternContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

ArrayBindingPatternContext.prototype.bindingPropertyList = function() {
    return this.getTypedRuleContext(BindingPropertyListContext,0);
};

ArrayBindingPatternContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArrayBindingPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrayBindingPattern(this);
	}
};

ArrayBindingPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrayBindingPattern(this);
	}
};




ECMAScriptPassParser.ArrayBindingPatternContext = ArrayBindingPatternContext;

ECMAScriptPassParser.prototype.arrayBindingPattern = function() {

    var localctx = new ArrayBindingPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ECMAScriptPassParser.RULE_arrayBindingPattern);
    var _la = 0; // Token type
    try {
        this.state = 1324;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1301;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1302;
                this.elision();
            }

            this.state = 1306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Spread) {
                this.state = 1305;
                this.bindingRestElement();
            }

            this.state = 1308;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1309;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1310;
            this.bindingPropertyList();
            this.state = 1311;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1313;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1314;
            this.bindingPropertyList();
            this.state = 1315;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1316;
                this.elision();
            }

            this.state = 1320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Spread) {
                this.state = 1319;
                this.bindingRestElement();
            }

            this.state = 1322;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayBindingPattern_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrayBindingPattern_Yield;
    return this;
}

ArrayBindingPattern_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayBindingPattern_YieldContext.prototype.constructor = ArrayBindingPattern_YieldContext;

ArrayBindingPattern_YieldContext.prototype.OpenBracket = function() {
    return this.getToken(ECMAScriptPassParser.OpenBracket, 0);
};

ArrayBindingPattern_YieldContext.prototype.CloseBracket = function() {
    return this.getToken(ECMAScriptPassParser.CloseBracket, 0);
};

ArrayBindingPattern_YieldContext.prototype.elision = function() {
    return this.getTypedRuleContext(ElisionContext,0);
};

ArrayBindingPattern_YieldContext.prototype.bindingRestElement_Yield = function() {
    return this.getTypedRuleContext(BindingRestElement_YieldContext,0);
};

ArrayBindingPattern_YieldContext.prototype.bindingPropertyList_Yield = function() {
    return this.getTypedRuleContext(BindingPropertyList_YieldContext,0);
};

ArrayBindingPattern_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ArrayBindingPattern_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrayBindingPattern_Yield(this);
	}
};

ArrayBindingPattern_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrayBindingPattern_Yield(this);
	}
};




ECMAScriptPassParser.ArrayBindingPattern_YieldContext = ArrayBindingPattern_YieldContext;

ECMAScriptPassParser.prototype.arrayBindingPattern_Yield = function() {

    var localctx = new ArrayBindingPattern_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ECMAScriptPassParser.RULE_arrayBindingPattern_Yield);
    var _la = 0; // Token type
    try {
        this.state = 1349;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1326;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1327;
                this.elision();
            }

            this.state = 1331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Spread) {
                this.state = 1330;
                this.bindingRestElement_Yield();
            }

            this.state = 1333;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1334;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1335;
            this.bindingPropertyList_Yield();
            this.state = 1336;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1338;
            this.match(ECMAScriptPassParser.OpenBracket);
            this.state = 1339;
            this.bindingPropertyList_Yield();
            this.state = 1340;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1341;
                this.elision();
            }

            this.state = 1345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Spread) {
                this.state = 1344;
                this.bindingRestElement_Yield();
            }

            this.state = 1347;
            this.match(ECMAScriptPassParser.CloseBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingPropertyList;
    return this;
}

BindingPropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyListContext.prototype.constructor = BindingPropertyListContext;

BindingPropertyListContext.prototype.bindingProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingPropertyContext);
    } else {
        return this.getTypedRuleContext(BindingPropertyContext,i);
    }
};

BindingPropertyListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingPropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingPropertyList(this);
	}
};

BindingPropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingPropertyList(this);
	}
};




ECMAScriptPassParser.BindingPropertyListContext = BindingPropertyListContext;

ECMAScriptPassParser.prototype.bindingPropertyList = function() {

    var localctx = new BindingPropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ECMAScriptPassParser.RULE_bindingPropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this.bindingProperty();
        this.state = 1356;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1352;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1353;
                this.bindingProperty(); 
            }
            this.state = 1358;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingPropertyList_Yield;
    return this;
}

BindingPropertyList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyList_YieldContext.prototype.constructor = BindingPropertyList_YieldContext;

BindingPropertyList_YieldContext.prototype.bindingProperty_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BindingProperty_YieldContext);
    } else {
        return this.getTypedRuleContext(BindingProperty_YieldContext,i);
    }
};

BindingPropertyList_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingPropertyList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingPropertyList_Yield(this);
	}
};

BindingPropertyList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingPropertyList_Yield(this);
	}
};




ECMAScriptPassParser.BindingPropertyList_YieldContext = BindingPropertyList_YieldContext;

ECMAScriptPassParser.prototype.bindingPropertyList_Yield = function() {

    var localctx = new BindingPropertyList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ECMAScriptPassParser.RULE_bindingPropertyList_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1359;
        this.bindingProperty_Yield();
        this.state = 1364;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1360;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1361;
                this.bindingProperty_Yield(); 
            }
            this.state = 1366;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingProperty;
    return this;
}

BindingPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingPropertyContext.prototype.constructor = BindingPropertyContext;

BindingPropertyContext.prototype.singleNameBinding = function() {
    return this.getTypedRuleContext(SingleNameBindingContext,0);
};

BindingPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

BindingPropertyContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

BindingPropertyContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

BindingPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingProperty(this);
	}
};

BindingPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingProperty(this);
	}
};




ECMAScriptPassParser.BindingPropertyContext = BindingPropertyContext;

ECMAScriptPassParser.prototype.bindingProperty = function() {

    var localctx = new BindingPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ECMAScriptPassParser.RULE_bindingProperty);
    try {
        this.state = 1372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1367;
            this.singleNameBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1368;
            this.propertyName();
            this.state = 1369;
            this.match(ECMAScriptPassParser.Colon);
            this.state = 1370;
            this.bindingElement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingProperty_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingProperty_Yield;
    return this;
}

BindingProperty_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingProperty_YieldContext.prototype.constructor = BindingProperty_YieldContext;

BindingProperty_YieldContext.prototype.singleNameBinding_Yield = function() {
    return this.getTypedRuleContext(SingleNameBinding_YieldContext,0);
};

BindingProperty_YieldContext.prototype.propertyName_Yield = function() {
    return this.getTypedRuleContext(PropertyName_YieldContext,0);
};

BindingProperty_YieldContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

BindingProperty_YieldContext.prototype.bindingElement_Yield = function() {
    return this.getTypedRuleContext(BindingElement_YieldContext,0);
};

BindingProperty_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingProperty_Yield(this);
	}
};

BindingProperty_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingProperty_Yield(this);
	}
};




ECMAScriptPassParser.BindingProperty_YieldContext = BindingProperty_YieldContext;

ECMAScriptPassParser.prototype.bindingProperty_Yield = function() {

    var localctx = new BindingProperty_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ECMAScriptPassParser.RULE_bindingProperty_Yield);
    try {
        this.state = 1379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1374;
            this.singleNameBinding_Yield();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1375;
            this.propertyName_Yield();
            this.state = 1376;
            this.match(ECMAScriptPassParser.Colon);
            this.state = 1377;
            this.bindingElement_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalDeclaration;
    return this;
}

LexicalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclarationContext.prototype.constructor = LexicalDeclarationContext;

LexicalDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclarationContext.prototype.bindingList = function() {
    return this.getTypedRuleContext(BindingListContext,0);
};

LexicalDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalDeclaration(this);
	}
};

LexicalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalDeclaration(this);
	}
};




ECMAScriptPassParser.LexicalDeclarationContext = LexicalDeclarationContext;

ECMAScriptPassParser.prototype.lexicalDeclaration = function() {

    var localctx = new LexicalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ECMAScriptPassParser.RULE_lexicalDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        this.letOrConst();
        this.state = 1382;
        this.bindingList();
        this.state = 1383;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalDeclaration_In;
    return this;
}

LexicalDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclaration_InContext.prototype.constructor = LexicalDeclaration_InContext;

LexicalDeclaration_InContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclaration_InContext.prototype.bindingList_In = function() {
    return this.getTypedRuleContext(BindingList_InContext,0);
};

LexicalDeclaration_InContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalDeclaration_In(this);
	}
};

LexicalDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalDeclaration_In(this);
	}
};




ECMAScriptPassParser.LexicalDeclaration_InContext = LexicalDeclaration_InContext;

ECMAScriptPassParser.prototype.lexicalDeclaration_In = function() {

    var localctx = new LexicalDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ECMAScriptPassParser.RULE_lexicalDeclaration_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1385;
        this.letOrConst();
        this.state = 1386;
        this.bindingList_In();
        this.state = 1387;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalDeclaration_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalDeclaration_In_Yield;
    return this;
}

LexicalDeclaration_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalDeclaration_In_YieldContext.prototype.constructor = LexicalDeclaration_In_YieldContext;

LexicalDeclaration_In_YieldContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

LexicalDeclaration_In_YieldContext.prototype.bindingList_In_Yield = function() {
    return this.getTypedRuleContext(BindingList_In_YieldContext,0);
};

LexicalDeclaration_In_YieldContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

LexicalDeclaration_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalDeclaration_In_Yield(this);
	}
};

LexicalDeclaration_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalDeclaration_In_Yield(this);
	}
};




ECMAScriptPassParser.LexicalDeclaration_In_YieldContext = LexicalDeclaration_In_YieldContext;

ECMAScriptPassParser.prototype.lexicalDeclaration_In_Yield = function() {

    var localctx = new LexicalDeclaration_In_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ECMAScriptPassParser.RULE_lexicalDeclaration_In_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1389;
        this.letOrConst();
        this.state = 1390;
        this.bindingList_In_Yield();
        this.state = 1391;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetOrConstContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_letOrConst;
    return this;
}

LetOrConstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetOrConstContext.prototype.constructor = LetOrConstContext;

LetOrConstContext.prototype.Let = function() {
    return this.getToken(ECMAScriptPassParser.Let, 0);
};

LetOrConstContext.prototype.Const = function() {
    return this.getToken(ECMAScriptPassParser.Const, 0);
};

LetOrConstContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLetOrConst(this);
	}
};

LetOrConstContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLetOrConst(this);
	}
};




ECMAScriptPassParser.LetOrConstContext = LetOrConstContext;

ECMAScriptPassParser.prototype.letOrConst = function() {

    var localctx = new LetOrConstContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ECMAScriptPassParser.RULE_letOrConst);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1393;
        _la = this._input.LA(1);
        if(!(_la===ECMAScriptPassParser.Const || _la===ECMAScriptPassParser.Let)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingList;
    return this;
}

BindingListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingListContext.prototype.constructor = BindingListContext;

BindingListContext.prototype.lexicalBinding = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBindingContext);
    } else {
        return this.getTypedRuleContext(LexicalBindingContext,i);
    }
};

BindingListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingList(this);
	}
};

BindingListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingList(this);
	}
};




ECMAScriptPassParser.BindingListContext = BindingListContext;

ECMAScriptPassParser.prototype.bindingList = function() {

    var localctx = new BindingListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ECMAScriptPassParser.RULE_bindingList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1395;
        this.lexicalBinding();
        this.state = 1400;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1396;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1397;
                this.lexicalBinding(); 
            }
            this.state = 1402;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingList_In;
    return this;
}

BindingList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingList_InContext.prototype.constructor = BindingList_InContext;

BindingList_InContext.prototype.lexicalBinding_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBinding_InContext);
    } else {
        return this.getTypedRuleContext(LexicalBinding_InContext,i);
    }
};

BindingList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingList_In(this);
	}
};

BindingList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingList_In(this);
	}
};




ECMAScriptPassParser.BindingList_InContext = BindingList_InContext;

ECMAScriptPassParser.prototype.bindingList_In = function() {

    var localctx = new BindingList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ECMAScriptPassParser.RULE_bindingList_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.lexicalBinding_In();
        this.state = 1408;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1404;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1405;
                this.lexicalBinding_In(); 
            }
            this.state = 1410;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindingList_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_bindingList_In_Yield;
    return this;
}

BindingList_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindingList_In_YieldContext.prototype.constructor = BindingList_In_YieldContext;

BindingList_In_YieldContext.prototype.lexicalBinding_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LexicalBinding_In_YieldContext);
    } else {
        return this.getTypedRuleContext(LexicalBinding_In_YieldContext,i);
    }
};

BindingList_In_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


BindingList_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBindingList_In_Yield(this);
	}
};

BindingList_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBindingList_In_Yield(this);
	}
};




ECMAScriptPassParser.BindingList_In_YieldContext = BindingList_In_YieldContext;

ECMAScriptPassParser.prototype.bindingList_In_Yield = function() {

    var localctx = new BindingList_In_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ECMAScriptPassParser.RULE_bindingList_In_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1411;
        this.lexicalBinding_In_Yield();
        this.state = 1416;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1412;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1413;
                this.lexicalBinding_In_Yield(); 
            }
            this.state = 1418;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalBinding;
    return this;
}

LexicalBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBindingContext.prototype.constructor = LexicalBindingContext;

LexicalBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBindingContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

LexicalBindingContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

LexicalBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalBinding(this);
	}
};

LexicalBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalBinding(this);
	}
};




ECMAScriptPassParser.LexicalBindingContext = LexicalBindingContext;

ECMAScriptPassParser.prototype.lexicalBinding = function() {

    var localctx = new LexicalBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ECMAScriptPassParser.RULE_lexicalBinding);
    try {
        this.state = 1426;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1419;
            this.bindingIdentifier();
            this.state = 1421;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
            if(la_===1) {
                this.state = 1420;
                this.initializer();

            }
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1423;
            this.bindingPattern();
            this.state = 1424;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBinding_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalBinding_In;
    return this;
}

LexicalBinding_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBinding_InContext.prototype.constructor = LexicalBinding_InContext;

LexicalBinding_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

LexicalBinding_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

LexicalBinding_InContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

LexicalBinding_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalBinding_In(this);
	}
};

LexicalBinding_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalBinding_In(this);
	}
};




ECMAScriptPassParser.LexicalBinding_InContext = LexicalBinding_InContext;

ECMAScriptPassParser.prototype.lexicalBinding_In = function() {

    var localctx = new LexicalBinding_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ECMAScriptPassParser.RULE_lexicalBinding_In);
    try {
        this.state = 1435;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.bindingIdentifier();
            this.state = 1430;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1429;
                this.initializer_In();

            }
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1432;
            this.bindingPattern();
            this.state = 1433;
            this.initializer_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LexicalBinding_In_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_lexicalBinding_In_Yield;
    return this;
}

LexicalBinding_In_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LexicalBinding_In_YieldContext.prototype.constructor = LexicalBinding_In_YieldContext;

LexicalBinding_In_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

LexicalBinding_In_YieldContext.prototype.initializer_In_Yield = function() {
    return this.getTypedRuleContext(Initializer_In_YieldContext,0);
};

LexicalBinding_In_YieldContext.prototype.bindingPattern_Yield = function() {
    return this.getTypedRuleContext(BindingPattern_YieldContext,0);
};

LexicalBinding_In_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLexicalBinding_In_Yield(this);
	}
};

LexicalBinding_In_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLexicalBinding_In_Yield(this);
	}
};




ECMAScriptPassParser.LexicalBinding_In_YieldContext = LexicalBinding_In_YieldContext;

ECMAScriptPassParser.prototype.lexicalBinding_In_Yield = function() {

    var localctx = new LexicalBinding_In_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ECMAScriptPassParser.RULE_lexicalBinding_In_Yield);
    try {
        this.state = 1444;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1437;
            this.bindingIdentifier_Yield();
            this.state = 1439;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
            if(la_===1) {
                this.state = 1438;
                this.initializer_In_Yield();

            }
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1441;
            this.bindingPattern_Yield();
            this.state = 1442;
            this.initializer_In_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.hoistableDeclaration = function() {
    return this.getTypedRuleContext(HoistableDeclarationContext,0);
};

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.lexicalDeclaration_In = function() {
    return this.getTypedRuleContext(LexicalDeclaration_InContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDeclaration(this);
	}
};




ECMAScriptPassParser.DeclarationContext = DeclarationContext;

ECMAScriptPassParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ECMAScriptPassParser.RULE_declaration);
    try {
        this.state = 1449;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 1446;
            this.hoistableDeclaration();
            break;
        case ECMAScriptPassParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 1447;
            this.classDeclaration();
            break;
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Let:
            this.enterOuterAlt(localctx, 3);
            this.state = 1448;
            this.lexicalDeclaration_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declaration_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_declaration_Yield;
    return this;
}

Declaration_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_YieldContext.prototype.constructor = Declaration_YieldContext;

Declaration_YieldContext.prototype.hoistableDeclaration_Yield = function() {
    return this.getTypedRuleContext(HoistableDeclaration_YieldContext,0);
};

Declaration_YieldContext.prototype.classDeclaration_Yield = function() {
    return this.getTypedRuleContext(ClassDeclaration_YieldContext,0);
};

Declaration_YieldContext.prototype.lexicalDeclaration_In_Yield = function() {
    return this.getTypedRuleContext(LexicalDeclaration_In_YieldContext,0);
};

Declaration_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDeclaration_Yield(this);
	}
};

Declaration_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDeclaration_Yield(this);
	}
};




ECMAScriptPassParser.Declaration_YieldContext = Declaration_YieldContext;

ECMAScriptPassParser.prototype.declaration_Yield = function() {

    var localctx = new Declaration_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ECMAScriptPassParser.RULE_declaration_Yield);
    try {
        this.state = 1454;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 1451;
            this.hoistableDeclaration_Yield();
            break;
        case ECMAScriptPassParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 1452;
            this.classDeclaration_Yield();
            break;
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Let:
            this.enterOuterAlt(localctx, 3);
            this.state = 1453;
            this.lexicalDeclaration_In_Yield();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_hoistableDeclaration;
    return this;
}

HoistableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclarationContext.prototype.constructor = HoistableDeclarationContext;

HoistableDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

HoistableDeclarationContext.prototype.generatorDeclaration = function() {
    return this.getTypedRuleContext(GeneratorDeclarationContext,0);
};

HoistableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterHoistableDeclaration(this);
	}
};

HoistableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitHoistableDeclaration(this);
	}
};




ECMAScriptPassParser.HoistableDeclarationContext = HoistableDeclarationContext;

ECMAScriptPassParser.prototype.hoistableDeclaration = function() {

    var localctx = new HoistableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ECMAScriptPassParser.RULE_hoistableDeclaration);
    try {
        this.state = 1458;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1456;
            this.functionDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1457;
            this.generatorDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoistableDeclaration_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_hoistableDeclaration_Yield;
    return this;
}

HoistableDeclaration_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoistableDeclaration_YieldContext.prototype.constructor = HoistableDeclaration_YieldContext;

HoistableDeclaration_YieldContext.prototype.functionDeclaration_Yield = function() {
    return this.getTypedRuleContext(FunctionDeclaration_YieldContext,0);
};

HoistableDeclaration_YieldContext.prototype.generatorDeclaration_Yield = function() {
    return this.getTypedRuleContext(GeneratorDeclaration_YieldContext,0);
};

HoistableDeclaration_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterHoistableDeclaration_Yield(this);
	}
};

HoistableDeclaration_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitHoistableDeclaration_Yield(this);
	}
};




ECMAScriptPassParser.HoistableDeclaration_YieldContext = HoistableDeclaration_YieldContext;

ECMAScriptPassParser.prototype.hoistableDeclaration_Yield = function() {

    var localctx = new HoistableDeclaration_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ECMAScriptPassParser.RULE_hoistableDeclaration_Yield);
    try {
        this.state = 1462;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1460;
            this.functionDeclaration_Yield();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1461;
            this.generatorDeclaration_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptPassParser.Throw, 0);
};

ThrowStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitThrowStatement(this);
	}
};




ECMAScriptPassParser.ThrowStatementContext = ThrowStatementContext;

ECMAScriptPassParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ECMAScriptPassParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1464;
        this.match(ECMAScriptPassParser.Throw);
        this.state = 1465;
        this.expression_In();
        this.state = 1466;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(ECMAScriptPassParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchPart = function() {
    return this.getTypedRuleContext(CatchPartContext,0);
};

TryStatementContext.prototype.finallyPart = function() {
    return this.getTypedRuleContext(FinallyPartContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTryStatement(this);
	}
};




ECMAScriptPassParser.TryStatementContext = TryStatementContext;

ECMAScriptPassParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ECMAScriptPassParser.RULE_tryStatement);
    try {
        this.state = 1481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1468;
            this.match(ECMAScriptPassParser.Try);
            this.state = 1469;
            this.block();
            this.state = 1470;
            this.catchPart();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1472;
            this.match(ECMAScriptPassParser.Try);
            this.state = 1473;
            this.block();
            this.state = 1474;
            this.finallyPart();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1476;
            this.match(ECMAScriptPassParser.Try);
            this.state = 1477;
            this.block();
            this.state = 1478;
            this.catchPart();
            this.state = 1479;
            this.finallyPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_catchPart;
    return this;
}

CatchPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchPartContext.prototype.constructor = CatchPartContext;

CatchPartContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptPassParser.Catch, 0);
};

CatchPartContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

CatchPartContext.prototype.catchParameter = function() {
    return this.getTypedRuleContext(CatchParameterContext,0);
};

CatchPartContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

CatchPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCatchPart(this);
	}
};

CatchPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCatchPart(this);
	}
};




ECMAScriptPassParser.CatchPartContext = CatchPartContext;

ECMAScriptPassParser.prototype.catchPart = function() {

    var localctx = new CatchPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ECMAScriptPassParser.RULE_catchPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.match(ECMAScriptPassParser.Catch);
        this.state = 1484;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1485;
        this.catchParameter();
        this.state = 1486;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1487;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_finallyPart;
    return this;
}

FinallyPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyPartContext.prototype.constructor = FinallyPartContext;

FinallyPartContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptPassParser.Finally, 0);
};

FinallyPartContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFinallyPart(this);
	}
};

FinallyPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFinallyPart(this);
	}
};




ECMAScriptPassParser.FinallyPartContext = FinallyPartContext;

ECMAScriptPassParser.prototype.finallyPart = function() {

    var localctx = new FinallyPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ECMAScriptPassParser.RULE_finallyPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1489;
        this.match(ECMAScriptPassParser.Finally);
        this.state = 1490;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_catchParameter;
    return this;
}

CatchParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchParameterContext.prototype.constructor = CatchParameterContext;

CatchParameterContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

CatchParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCatchParameter(this);
	}
};

CatchParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCatchParameter(this);
	}
};




ECMAScriptPassParser.CatchParameterContext = CatchParameterContext;

ECMAScriptPassParser.prototype.catchParameter = function() {

    var localctx = new CatchParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ECMAScriptPassParser.RULE_catchParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1492;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(ECMAScriptPassParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

WithStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterWithStatement(this);
	}
};

WithStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitWithStatement(this);
	}
};




ECMAScriptPassParser.WithStatementContext = WithStatementContext;

ECMAScriptPassParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ECMAScriptPassParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1494;
        this.match(ECMAScriptPassParser.With);
        this.state = 1495;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1496;
        this.expression_In();
        this.state = 1497;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1498;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

LabelledStatementContext.prototype.labelledItem = function() {
    return this.getTypedRuleContext(LabelledItemContext,0);
};

LabelledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelledStatement(this);
	}
};

LabelledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelledStatement(this);
	}
};




ECMAScriptPassParser.LabelledStatementContext = LabelledStatementContext;

ECMAScriptPassParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ECMAScriptPassParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1500;
        this.labelIdentifier();
        this.state = 1501;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 1502;
        this.labelledItem();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelledItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelledItem;
    return this;
}

LabelledItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledItemContext.prototype.constructor = LabelledItemContext;

LabelledItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledItemContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

LabelledItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelledItem(this);
	}
};

LabelledItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelledItem(this);
	}
};




ECMAScriptPassParser.LabelledItemContext = LabelledItemContext;

ECMAScriptPassParser.prototype.labelledItem = function() {

    var localctx = new LabelledItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ECMAScriptPassParser.RULE_labelledItem);
    try {
        this.state = 1506;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1504;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1505;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_labelIdentifier;
    return this;
}

LabelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelIdentifierContext.prototype.constructor = LabelIdentifierContext;

LabelIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabelIdentifierContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

LabelIdentifierContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

LabelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterLabelIdentifier(this);
	}
};

LabelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitLabelIdentifier(this);
	}
};




ECMAScriptPassParser.LabelIdentifierContext = LabelIdentifierContext;

ECMAScriptPassParser.prototype.labelIdentifier = function() {

    var localctx = new LabelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ECMAScriptPassParser.RULE_labelIdentifier);
    try {
        this.state = 1511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1508;
            this.identifier();
            break;
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 1509;
            this.match(ECMAScriptPassParser.Yield);
            break;
        case ECMAScriptPassParser.Await:
            this.enterOuterAlt(localctx, 3);
            this.state = 1510;
            this.match(ECMAScriptPassParser.Await);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptPassParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitSwitchStatement(this);
	}
};




ECMAScriptPassParser.SwitchStatementContext = SwitchStatementContext;

ECMAScriptPassParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ECMAScriptPassParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1513;
        this.match(ECMAScriptPassParser.Switch);
        this.state = 1514;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1515;
        this.expression_In();
        this.state = 1516;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1517;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseBlock(this);
	}
};

CaseBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseBlock(this);
	}
};




ECMAScriptPassParser.CaseBlockContext = CaseBlockContext;

ECMAScriptPassParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ECMAScriptPassParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.state = 1534;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1519;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 1520;
                this.caseClauses();
            }

            this.state = 1523;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1524;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 1525;
                this.caseClauses();
            }

            this.state = 1528;
            this.defaultClause();
            this.state = 1530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Case) {
                this.state = 1529;
                this.caseClauses();
            }

            this.state = 1532;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseClauses(this);
	}
};

CaseClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseClauses(this);
	}
};




ECMAScriptPassParser.CaseClausesContext = CaseClausesContext;

ECMAScriptPassParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ECMAScriptPassParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1537; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1536;
            this.caseClause();
            this.state = 1539; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ECMAScriptPassParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(ECMAScriptPassParser.Case, 0);
};

CaseClauseContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterCaseClause(this);
	}
};

CaseClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitCaseClause(this);
	}
};




ECMAScriptPassParser.CaseClauseContext = CaseClauseContext;

ECMAScriptPassParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ECMAScriptPassParser.RULE_caseClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1541;
        this.match(ECMAScriptPassParser.Case);
        this.state = 1542;
        this.expression_In();
        this.state = 1543;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 1545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1544;
            this.statementList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(ECMAScriptPassParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(ECMAScriptPassParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterDefaultClause(this);
	}
};

DefaultClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitDefaultClause(this);
	}
};




ECMAScriptPassParser.DefaultClauseContext = DefaultClauseContext;

ECMAScriptPassParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ECMAScriptPassParser.RULE_defaultClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1547;
        this.match(ECMAScriptPassParser.Default);
        this.state = 1548;
        this.match(ECMAScriptPassParser.Colon);
        this.state = 1550;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1549;
            this.statementList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.Do = function() {
    return this.getToken(ECMAScriptPassParser.Do, 0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.While = function() {
    return this.getToken(ECMAScriptPassParser.While, 0);
};

IterationStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

IterationStatementContext.prototype.expression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_InContext);
    } else {
        return this.getTypedRuleContext(Expression_InContext,i);
    }
};

IterationStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

IterationStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(ECMAScriptPassParser.For, 0);
};

IterationStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.SemiColon);
    } else {
        return this.getToken(ECMAScriptPassParser.SemiColon, i);
    }
};


IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

IterationStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

IterationStatementContext.prototype.lexicalDeclaration = function() {
    return this.getTypedRuleContext(LexicalDeclarationContext,0);
};

IterationStatementContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

IterationStatementContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};

IterationStatementContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

IterationStatementContext.prototype.forDeclaration = function() {
    return this.getTypedRuleContext(ForDeclarationContext,0);
};

IterationStatementContext.prototype.Of = function() {
    return this.getToken(ECMAScriptPassParser.Of, 0);
};

IterationStatementContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIterationStatement(this);
	}
};




ECMAScriptPassParser.IterationStatementContext = IterationStatementContext;

ECMAScriptPassParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ECMAScriptPassParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 1659;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1552;
            this.match(ECMAScriptPassParser.Do);
            this.state = 1553;
            this.statement();
            this.state = 1554;
            this.match(ECMAScriptPassParser.While);
            this.state = 1555;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1556;
            this.expression_In();
            this.state = 1557;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1558;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1560;
            this.match(ECMAScriptPassParser.While);
            this.state = 1561;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1562;
            this.expression_In();
            this.state = 1563;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1564;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1566;
            this.match(ECMAScriptPassParser.For);
            this.state = 1567;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1568;
                this.expression();
            }

            this.state = 1571;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 1573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1572;
                this.expression_In();
            }

            this.state = 1575;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 1577;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1576;
                this.expression_In();
            }

            this.state = 1579;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1580;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1581;
            this.match(ECMAScriptPassParser.For);
            this.state = 1582;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1583;
            this.match(ECMAScriptPassParser.Var);
            this.state = 1584;
            this.variableDeclarationList();
            this.state = 1585;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 1587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1586;
                this.expression_In();
            }

            this.state = 1589;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 1591;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1590;
                this.expression_In();
            }

            this.state = 1593;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1594;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1596;
            this.match(ECMAScriptPassParser.For);
            this.state = 1597;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1598;
            this.lexicalDeclaration();
            this.state = 1600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1599;
                this.expression_In();
            }

            this.state = 1602;
            this.match(ECMAScriptPassParser.SemiColon);
            this.state = 1604;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
                this.state = 1603;
                this.expression_In();
            }

            this.state = 1606;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1607;
            this.statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1609;
            this.match(ECMAScriptPassParser.For);
            this.state = 1610;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1611;
            this.leftHandSideExpression();
            this.state = 1612;
            this.match(ECMAScriptPassParser.In);
            this.state = 1613;
            this.expression_In();
            this.state = 1614;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1615;
            this.statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1617;
            this.match(ECMAScriptPassParser.For);
            this.state = 1618;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1619;
            this.match(ECMAScriptPassParser.Var);
            this.state = 1620;
            this.forBinding();
            this.state = 1621;
            this.match(ECMAScriptPassParser.In);
            this.state = 1622;
            this.expression_In();
            this.state = 1623;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1624;
            this.statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1626;
            this.match(ECMAScriptPassParser.For);
            this.state = 1627;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1628;
            this.forDeclaration();
            this.state = 1629;
            this.match(ECMAScriptPassParser.In);
            this.state = 1630;
            this.expression_In();
            this.state = 1631;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1632;
            this.statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1634;
            this.match(ECMAScriptPassParser.For);
            this.state = 1635;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1636;
            this.leftHandSideExpression();
            this.state = 1637;
            this.match(ECMAScriptPassParser.Of);
            this.state = 1638;
            this.assignmentExpression_In(0);
            this.state = 1639;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1640;
            this.statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1642;
            this.match(ECMAScriptPassParser.For);
            this.state = 1643;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1644;
            this.match(ECMAScriptPassParser.Var);
            this.state = 1645;
            this.forBinding();
            this.state = 1646;
            this.match(ECMAScriptPassParser.Of);
            this.state = 1647;
            this.assignmentExpression_In(0);
            this.state = 1648;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1649;
            this.statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1651;
            this.match(ECMAScriptPassParser.For);
            this.state = 1652;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1653;
            this.forDeclaration();
            this.state = 1654;
            this.match(ECMAScriptPassParser.Of);
            this.state = 1655;
            this.assignmentExpression_In(0);
            this.state = 1656;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1657;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.letOrConst = function() {
    return this.getTypedRuleContext(LetOrConstContext,0);
};

ForDeclarationContext.prototype.forBinding = function() {
    return this.getTypedRuleContext(ForBindingContext,0);
};

ForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterForDeclaration(this);
	}
};

ForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitForDeclaration(this);
	}
};




ECMAScriptPassParser.ForDeclarationContext = ForDeclarationContext;

ECMAScriptPassParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ECMAScriptPassParser.RULE_forDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1661;
        this.letOrConst();
        this.state = 1662;
        this.forBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_forBinding;
    return this;
}

ForBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForBindingContext.prototype.constructor = ForBindingContext;

ForBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ForBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterForBinding(this);
	}
};

ForBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitForBinding(this);
	}
};




ECMAScriptPassParser.ForBindingContext = ForBindingContext;

ECMAScriptPassParser.prototype.forBinding = function() {

    var localctx = new ForBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ECMAScriptPassParser.RULE_forBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1664;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(ECMAScriptPassParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

IfStatementContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(ECMAScriptPassParser.Else, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIfStatement(this);
	}
};




ECMAScriptPassParser.IfStatementContext = IfStatementContext;

ECMAScriptPassParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ECMAScriptPassParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.match(ECMAScriptPassParser.If);
        this.state = 1667;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1668;
        this.expression_In();
        this.state = 1669;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1670;
        this.statement();
        this.state = 1673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        if(la_===1) {
            this.state = 1671;
            this.match(ECMAScriptPassParser.Else);
            this.state = 1672;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_breakableStatement;
    return this;
}

BreakableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakableStatementContext.prototype.constructor = BreakableStatementContext;

BreakableStatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

BreakableStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

BreakableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBreakableStatement(this);
	}
};

BreakableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBreakableStatement(this);
	}
};




ECMAScriptPassParser.BreakableStatementContext = BreakableStatementContext;

ECMAScriptPassParser.prototype.breakableStatement = function() {

    var localctx = new BreakableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ECMAScriptPassParser.RULE_breakableStatement);
    try {
        this.state = 1677;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 1675;
            this.iterationStatement();
            break;
        case ECMAScriptPassParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 1676;
            this.switchStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptPassParser.Continue, 0);
};

ContinueStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitContinueStatement(this);
	}
};




ECMAScriptPassParser.ContinueStatementContext = ContinueStatementContext;

ECMAScriptPassParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ECMAScriptPassParser.RULE_continueStatement);
    try {
        this.state = 1685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1679;
            this.match(ECMAScriptPassParser.Continue);
            this.state = 1680;
            this.labelIdentifier();
            this.state = 1681;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1683;
            this.match(ECMAScriptPassParser.Continue);
            this.state = 1684;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(ECMAScriptPassParser.Break, 0);
};

BreakStatementContext.prototype.labelIdentifier = function() {
    return this.getTypedRuleContext(LabelIdentifierContext,0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBreakStatement(this);
	}
};




ECMAScriptPassParser.BreakStatementContext = BreakStatementContext;

ECMAScriptPassParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ECMAScriptPassParser.RULE_breakStatement);
    try {
        this.state = 1693;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1687;
            this.match(ECMAScriptPassParser.Break);
            this.state = 1688;
            this.labelIdentifier();
            this.state = 1689;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1691;
            this.match(ECMAScriptPassParser.Break);
            this.state = 1692;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBlockStatement(this);
	}
};




ECMAScriptPassParser.BlockStatementContext = BlockStatementContext;

ECMAScriptPassParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ECMAScriptPassParser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1695;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitBlock(this);
	}
};




ECMAScriptPassParser.BlockContext = BlockContext;

ECMAScriptPassParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ECMAScriptPassParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1697;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1698;
            this.statementList();
        }

        this.state = 1701;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

VariableStatementContext.prototype.variableDeclarationList_In = function() {
    return this.getTypedRuleContext(VariableDeclarationList_InContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableStatement(this);
	}
};

VariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableStatement(this);
	}
};




ECMAScriptPassParser.VariableStatementContext = VariableStatementContext;

ECMAScriptPassParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ECMAScriptPassParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1703;
        this.match(ECMAScriptPassParser.Var);
        this.state = 1704;
        this.variableDeclarationList_In();
        this.state = 1705;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclarationList(this);
	}
};

VariableDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclarationList(this);
	}
};




ECMAScriptPassParser.VariableDeclarationListContext = VariableDeclarationListContext;

ECMAScriptPassParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ECMAScriptPassParser.RULE_variableDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1707;
        this.variableDeclaration();
        this.state = 1712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ECMAScriptPassParser.Comma) {
            this.state = 1708;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1709;
            this.variableDeclaration();
            this.state = 1714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationList_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclarationList_In;
    return this;
}

VariableDeclarationList_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationList_InContext.prototype.constructor = VariableDeclarationList_InContext;

VariableDeclarationList_InContext.prototype.variableDeclaration_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaration_InContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaration_InContext,i);
    }
};

VariableDeclarationList_InContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


VariableDeclarationList_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclarationList_In(this);
	}
};

VariableDeclarationList_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclarationList_In(this);
	}
};




ECMAScriptPassParser.VariableDeclarationList_InContext = VariableDeclarationList_InContext;

ECMAScriptPassParser.prototype.variableDeclarationList_In = function() {

    var localctx = new VariableDeclarationList_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ECMAScriptPassParser.RULE_variableDeclarationList_In);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1715;
        this.variableDeclaration_In();
        this.state = 1720;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1716;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1717;
                this.variableDeclaration_In(); 
            }
            this.state = 1722;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclarationContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

VariableDeclarationContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclaration(this);
	}
};




ECMAScriptPassParser.VariableDeclarationContext = VariableDeclarationContext;

ECMAScriptPassParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ECMAScriptPassParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1730;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1723;
            this.bindingIdentifier();
            this.state = 1725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Assign) {
                this.state = 1724;
                this.initializer();
            }

            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1727;
            this.bindingPattern();
            this.state = 1728;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaration_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_variableDeclaration_In;
    return this;
}

VariableDeclaration_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaration_InContext.prototype.constructor = VariableDeclaration_InContext;

VariableDeclaration_InContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

VariableDeclaration_InContext.prototype.initializer_In = function() {
    return this.getTypedRuleContext(Initializer_InContext,0);
};

VariableDeclaration_InContext.prototype.bindingPattern = function() {
    return this.getTypedRuleContext(BindingPatternContext,0);
};

VariableDeclaration_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterVariableDeclaration_In(this);
	}
};

VariableDeclaration_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitVariableDeclaration_In(this);
	}
};




ECMAScriptPassParser.VariableDeclaration_InContext = VariableDeclaration_InContext;

ECMAScriptPassParser.prototype.variableDeclaration_In = function() {

    var localctx = new VariableDeclaration_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ECMAScriptPassParser.RULE_variableDeclaration_In);
    try {
        this.state = 1739;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1732;
            this.bindingIdentifier();
            this.state = 1734;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
            if(la_===1) {
                this.state = 1733;
                this.initializer_In();

            }
            break;
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1736;
            this.bindingPattern();
            this.state = 1737;
            this.initializer_In();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

FunctionDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ECMAScriptPassParser.FunctionDeclarationContext = FunctionDeclarationContext;

ECMAScriptPassParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ECMAScriptPassParser.RULE_functionDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1741;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1742;
        this.bindingIdentifier();
        this.state = 1743;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1744;
        this.formalParameters();
        this.state = 1745;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1746;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1747;
        this.functionBody();
        this.state = 1748;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclaration_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionDeclaration_Yield;
    return this;
}

FunctionDeclaration_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclaration_YieldContext.prototype.constructor = FunctionDeclaration_YieldContext;

FunctionDeclaration_YieldContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

FunctionDeclaration_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

FunctionDeclaration_YieldContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

FunctionDeclaration_YieldContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionDeclaration_YieldContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

FunctionDeclaration_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

FunctionDeclaration_YieldContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclaration_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

FunctionDeclaration_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionDeclaration_Yield(this);
	}
};

FunctionDeclaration_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionDeclaration_Yield(this);
	}
};




ECMAScriptPassParser.FunctionDeclaration_YieldContext = FunctionDeclaration_YieldContext;

ECMAScriptPassParser.prototype.functionDeclaration_Yield = function() {

    var localctx = new FunctionDeclaration_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ECMAScriptPassParser.RULE_functionDeclaration_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1750;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1751;
        this.bindingIdentifier_Yield();
        this.state = 1752;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1753;
        this.formalParameters();
        this.state = 1754;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1755;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1756;
        this.functionBody();
        this.state = 1757;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionExpression;
    return this;
}

FunctionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

FunctionExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

FunctionExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

FunctionExpressionContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FunctionExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

FunctionExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

FunctionExpressionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

FunctionExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

FunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionExpression(this);
	}
};

FunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionExpression(this);
	}
};




ECMAScriptPassParser.FunctionExpressionContext = FunctionExpressionContext;

ECMAScriptPassParser.prototype.functionExpression = function() {

    var localctx = new FunctionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ECMAScriptPassParser.RULE_functionExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1759;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Await || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Yield - 100)) | (1 << (ECMAScriptPassParser.As - 100)) | (1 << (ECMAScriptPassParser.Async - 100)) | (1 << (ECMAScriptPassParser.From - 100)) | (1 << (ECMAScriptPassParser.Get - 100)) | (1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.Of - 100)) | (1 << (ECMAScriptPassParser.Set - 100)) | (1 << (ECMAScriptPassParser.Static - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 1760;
            this.bindingIdentifier();
        }

        this.state = 1763;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1764;
        this.formalParameters();
        this.state = 1765;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1766;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1767;
        this.functionBody();
        this.state = 1768;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

ClassDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassDeclaration(this);
	}
};




ECMAScriptPassParser.ClassDeclarationContext = ClassDeclarationContext;

ECMAScriptPassParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ECMAScriptPassParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1770;
        this.match(ECMAScriptPassParser.Class);
        this.state = 1771;
        this.bindingIdentifier();
        this.state = 1772;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclaration_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classDeclaration_Yield;
    return this;
}

ClassDeclaration_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclaration_YieldContext.prototype.constructor = ClassDeclaration_YieldContext;

ClassDeclaration_YieldContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

ClassDeclaration_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

ClassDeclaration_YieldContext.prototype.classTail_Yield = function() {
    return this.getTypedRuleContext(ClassTail_YieldContext,0);
};

ClassDeclaration_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassDeclaration_Yield(this);
	}
};

ClassDeclaration_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassDeclaration_Yield(this);
	}
};




ECMAScriptPassParser.ClassDeclaration_YieldContext = ClassDeclaration_YieldContext;

ECMAScriptPassParser.prototype.classDeclaration_Yield = function() {

    var localctx = new ClassDeclaration_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ECMAScriptPassParser.RULE_classDeclaration_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1774;
        this.match(ECMAScriptPassParser.Class);
        this.state = 1775;
        this.bindingIdentifier_Yield();
        this.state = 1776;
        this.classTail_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classExpression;
    return this;
}

ClassExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassExpressionContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ClassExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassExpression(this);
	}
};

ClassExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassExpression(this);
	}
};




ECMAScriptPassParser.ClassExpressionContext = ClassExpressionContext;

ECMAScriptPassParser.prototype.classExpression = function() {

    var localctx = new ClassExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ECMAScriptPassParser.RULE_classExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1778;
        this.match(ECMAScriptPassParser.Class);
        this.state = 1780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Await || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ECMAScriptPassParser.Yield - 100)) | (1 << (ECMAScriptPassParser.As - 100)) | (1 << (ECMAScriptPassParser.Async - 100)) | (1 << (ECMAScriptPassParser.From - 100)) | (1 << (ECMAScriptPassParser.Get - 100)) | (1 << (ECMAScriptPassParser.Let - 100)) | (1 << (ECMAScriptPassParser.Of - 100)) | (1 << (ECMAScriptPassParser.Set - 100)) | (1 << (ECMAScriptPassParser.Static - 100)) | (1 << (ECMAScriptPassParser.IdentifierName - 100)))) !== 0)) {
            this.state = 1779;
            this.bindingIdentifier();
        }

        this.state = 1782;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassExpression_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classExpression_Yield;
    return this;
}

ClassExpression_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassExpression_YieldContext.prototype.constructor = ClassExpression_YieldContext;

ClassExpression_YieldContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

ClassExpression_YieldContext.prototype.classTail_Yield = function() {
    return this.getTypedRuleContext(ClassTail_YieldContext,0);
};

ClassExpression_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

ClassExpression_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassExpression_Yield(this);
	}
};

ClassExpression_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassExpression_Yield(this);
	}
};




ECMAScriptPassParser.ClassExpression_YieldContext = ClassExpression_YieldContext;

ECMAScriptPassParser.prototype.classExpression_Yield = function() {

    var localctx = new ClassExpression_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ECMAScriptPassParser.RULE_classExpression_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1784;
        this.match(ECMAScriptPassParser.Class);
        this.state = 1786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Await || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (ECMAScriptPassParser.As - 105)) | (1 << (ECMAScriptPassParser.Async - 105)) | (1 << (ECMAScriptPassParser.From - 105)) | (1 << (ECMAScriptPassParser.Get - 105)) | (1 << (ECMAScriptPassParser.Let - 105)) | (1 << (ECMAScriptPassParser.Of - 105)) | (1 << (ECMAScriptPassParser.Set - 105)) | (1 << (ECMAScriptPassParser.Static - 105)) | (1 << (ECMAScriptPassParser.IdentifierName - 105)))) !== 0)) {
            this.state = 1785;
            this.bindingIdentifier_Yield();
        }

        this.state = 1788;
        this.classTail_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ClassTailContext.prototype.classHeritage = function() {
    return this.getTypedRuleContext(ClassHeritageContext,0);
};

ClassTailContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassTailContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassTail(this);
	}
};

ClassTailContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassTail(this);
	}
};




ECMAScriptPassParser.ClassTailContext = ClassTailContext;

ECMAScriptPassParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ECMAScriptPassParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Extends) {
            this.state = 1790;
            this.classHeritage();
        }

        this.state = 1793;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1795;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.Multiply))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Case - 65)) | (1 << (ECMAScriptPassParser.Catch - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Default - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Else - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.Extends - 65)) | (1 << (ECMAScriptPassParser.Finally - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.In - 65)) | (1 << (ECMAScriptPassParser.Instanceof - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.Super - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.Enum - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1794;
            this.classBody();
        }

        this.state = 1797;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTail_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classTail_Yield;
    return this;
}

ClassTail_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTail_YieldContext.prototype.constructor = ClassTail_YieldContext;

ClassTail_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ClassTail_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ClassTail_YieldContext.prototype.classHeritage_Yield = function() {
    return this.getTypedRuleContext(ClassHeritage_YieldContext,0);
};

ClassTail_YieldContext.prototype.classBody_Yield = function() {
    return this.getTypedRuleContext(ClassBody_YieldContext,0);
};

ClassTail_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassTail_Yield(this);
	}
};

ClassTail_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassTail_Yield(this);
	}
};




ECMAScriptPassParser.ClassTail_YieldContext = ClassTail_YieldContext;

ECMAScriptPassParser.prototype.classTail_Yield = function() {

    var localctx = new ClassTail_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ECMAScriptPassParser.RULE_classTail_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1800;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Extends) {
            this.state = 1799;
            this.classHeritage_Yield();
        }

        this.state = 1802;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Case - 65)) | (1 << (ECMAScriptPassParser.Catch - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Default - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Else - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.Extends - 65)) | (1 << (ECMAScriptPassParser.Finally - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.In - 65)) | (1 << (ECMAScriptPassParser.Instanceof - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.Super - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.Enum - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1803;
            this.classBody_Yield();
        }

        this.state = 1806;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassHeritageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classHeritage;
    return this;
}

ClassHeritageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassHeritageContext.prototype.constructor = ClassHeritageContext;

ClassHeritageContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptPassParser.Extends, 0);
};

ClassHeritageContext.prototype.leftHandSideExpression = function() {
    return this.getTypedRuleContext(LeftHandSideExpressionContext,0);
};

ClassHeritageContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassHeritage(this);
	}
};

ClassHeritageContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassHeritage(this);
	}
};




ECMAScriptPassParser.ClassHeritageContext = ClassHeritageContext;

ECMAScriptPassParser.prototype.classHeritage = function() {

    var localctx = new ClassHeritageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ECMAScriptPassParser.RULE_classHeritage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1808;
        this.match(ECMAScriptPassParser.Extends);
        this.state = 1809;
        this.leftHandSideExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassHeritage_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classHeritage_Yield;
    return this;
}

ClassHeritage_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassHeritage_YieldContext.prototype.constructor = ClassHeritage_YieldContext;

ClassHeritage_YieldContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptPassParser.Extends, 0);
};

ClassHeritage_YieldContext.prototype.leftHandSideExpression_Yield = function() {
    return this.getTypedRuleContext(LeftHandSideExpression_YieldContext,0);
};

ClassHeritage_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassHeritage_Yield(this);
	}
};

ClassHeritage_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassHeritage_Yield(this);
	}
};




ECMAScriptPassParser.ClassHeritage_YieldContext = ClassHeritage_YieldContext;

ECMAScriptPassParser.prototype.classHeritage_Yield = function() {

    var localctx = new ClassHeritage_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ECMAScriptPassParser.RULE_classHeritage_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1811;
        this.match(ECMAScriptPassParser.Extends);
        this.state = 1812;
        this.leftHandSideExpression_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classElementList = function() {
    return this.getTypedRuleContext(ClassElementListContext,0);
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassBody(this);
	}
};




ECMAScriptPassParser.ClassBodyContext = ClassBodyContext;

ECMAScriptPassParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ECMAScriptPassParser.RULE_classBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1814;
        this.classElementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBody_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classBody_Yield;
    return this;
}

ClassBody_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBody_YieldContext.prototype.constructor = ClassBody_YieldContext;

ClassBody_YieldContext.prototype.classElementList_Yield = function() {
    return this.getTypedRuleContext(ClassElementList_YieldContext,0);
};

ClassBody_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassBody_Yield(this);
	}
};

ClassBody_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassBody_Yield(this);
	}
};




ECMAScriptPassParser.ClassBody_YieldContext = ClassBody_YieldContext;

ECMAScriptPassParser.prototype.classBody_Yield = function() {

    var localctx = new ClassBody_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ECMAScriptPassParser.RULE_classBody_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        this.classElementList_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classElementList;
    return this;
}

ClassElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementListContext.prototype.constructor = ClassElementListContext;

ClassElementListContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassElementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassElementList(this);
	}
};

ClassElementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassElementList(this);
	}
};




ECMAScriptPassParser.ClassElementListContext = ClassElementListContext;

ECMAScriptPassParser.prototype.classElementList = function() {

    var localctx = new ClassElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ECMAScriptPassParser.RULE_classElementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1819; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1818;
            this.classElement();
            this.state = 1821; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus) | (1 << ECMAScriptPassParser.Multiply))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Case - 65)) | (1 << (ECMAScriptPassParser.Catch - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Default - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Else - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.Extends - 65)) | (1 << (ECMAScriptPassParser.Finally - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.In - 65)) | (1 << (ECMAScriptPassParser.Instanceof - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.Super - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.Enum - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classElementList_Yield;
    return this;
}

ClassElementList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementList_YieldContext.prototype.constructor = ClassElementList_YieldContext;

ClassElementList_YieldContext.prototype.classElement_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElement_YieldContext);
    } else {
        return this.getTypedRuleContext(ClassElement_YieldContext,i);
    }
};

ClassElementList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassElementList_Yield(this);
	}
};

ClassElementList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassElementList_Yield(this);
	}
};




ECMAScriptPassParser.ClassElementList_YieldContext = ClassElementList_YieldContext;

ECMAScriptPassParser.prototype.classElementList_Yield = function() {

    var localctx = new ClassElementList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ECMAScriptPassParser.RULE_classElementList_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1824; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1823;
            this.classElement_Yield();
            this.state = 1826; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Case - 65)) | (1 << (ECMAScriptPassParser.Catch - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Default - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Else - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.Extends - 65)) | (1 << (ECMAScriptPassParser.Finally - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.In - 65)) | (1 << (ECMAScriptPassParser.Instanceof - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.Super - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.Enum - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.Static = function() {
    return this.getToken(ECMAScriptPassParser.Static, 0);
};

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

ClassElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassElement(this);
	}
};

ClassElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassElement(this);
	}
};




ECMAScriptPassParser.ClassElementContext = ClassElementContext;

ECMAScriptPassParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, ECMAScriptPassParser.RULE_classElement);
    try {
        this.state = 1832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1828;
            this.match(ECMAScriptPassParser.Static);
            this.state = 1829;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1830;
            this.methodDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1831;
            this.match(ECMAScriptPassParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassElement_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_classElement_Yield;
    return this;
}

ClassElement_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElement_YieldContext.prototype.constructor = ClassElement_YieldContext;

ClassElement_YieldContext.prototype.Static = function() {
    return this.getToken(ECMAScriptPassParser.Static, 0);
};

ClassElement_YieldContext.prototype.methodDefinition_Yield = function() {
    return this.getTypedRuleContext(MethodDefinition_YieldContext,0);
};

ClassElement_YieldContext.prototype.SemiColon = function() {
    return this.getToken(ECMAScriptPassParser.SemiColon, 0);
};

ClassElement_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterClassElement_Yield(this);
	}
};

ClassElement_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitClassElement_Yield(this);
	}
};




ECMAScriptPassParser.ClassElement_YieldContext = ClassElement_YieldContext;

ECMAScriptPassParser.prototype.classElement_Yield = function() {

    var localctx = new ClassElement_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, ECMAScriptPassParser.RULE_classElement_Yield);
    try {
        this.state = 1838;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1834;
            this.match(ECMAScriptPassParser.Static);
            this.state = 1835;
            this.methodDefinition_Yield();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1836;
            this.methodDefinition_Yield();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1837;
            this.match(ECMAScriptPassParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_generatorDeclaration;
    return this;
}

GeneratorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorDeclarationContext.prototype.constructor = GeneratorDeclarationContext;

GeneratorDeclarationContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

GeneratorDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

GeneratorDeclarationContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

GeneratorDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

GeneratorDeclarationContext.prototype.formalParameters_Yield = function() {
    return this.getTypedRuleContext(FormalParameters_YieldContext,0);
};

GeneratorDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

GeneratorDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

GeneratorDeclarationContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

GeneratorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGeneratorDeclaration(this);
	}
};

GeneratorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGeneratorDeclaration(this);
	}
};




ECMAScriptPassParser.GeneratorDeclarationContext = GeneratorDeclarationContext;

ECMAScriptPassParser.prototype.generatorDeclaration = function() {

    var localctx = new GeneratorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, ECMAScriptPassParser.RULE_generatorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1840;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1841;
        this.match(ECMAScriptPassParser.Multiply);
        this.state = 1842;
        this.bindingIdentifier();
        this.state = 1843;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1844;
        this.formalParameters_Yield();
        this.state = 1845;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1846;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1847;
        this.generatorBody();
        this.state = 1848;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorDeclaration_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_generatorDeclaration_Yield;
    return this;
}

GeneratorDeclaration_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorDeclaration_YieldContext.prototype.constructor = GeneratorDeclaration_YieldContext;

GeneratorDeclaration_YieldContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

GeneratorDeclaration_YieldContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

GeneratorDeclaration_YieldContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

GeneratorDeclaration_YieldContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

GeneratorDeclaration_YieldContext.prototype.formalParameters_Yield = function() {
    return this.getTypedRuleContext(FormalParameters_YieldContext,0);
};

GeneratorDeclaration_YieldContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

GeneratorDeclaration_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

GeneratorDeclaration_YieldContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorDeclaration_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

GeneratorDeclaration_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGeneratorDeclaration_Yield(this);
	}
};

GeneratorDeclaration_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGeneratorDeclaration_Yield(this);
	}
};




ECMAScriptPassParser.GeneratorDeclaration_YieldContext = GeneratorDeclaration_YieldContext;

ECMAScriptPassParser.prototype.generatorDeclaration_Yield = function() {

    var localctx = new GeneratorDeclaration_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, ECMAScriptPassParser.RULE_generatorDeclaration_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1850;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1851;
        this.match(ECMAScriptPassParser.Multiply);
        this.state = 1852;
        this.bindingIdentifier_Yield();
        this.state = 1853;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1854;
        this.formalParameters_Yield();
        this.state = 1855;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1856;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1857;
        this.generatorBody();
        this.state = 1858;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_generatorExpression;
    return this;
}

GeneratorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorExpressionContext.prototype.constructor = GeneratorExpressionContext;

GeneratorExpressionContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

GeneratorExpressionContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

GeneratorExpressionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

GeneratorExpressionContext.prototype.formalParameters_Yield = function() {
    return this.getTypedRuleContext(FormalParameters_YieldContext,0);
};

GeneratorExpressionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

GeneratorExpressionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

GeneratorExpressionContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorExpressionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

GeneratorExpressionContext.prototype.bindingIdentifier_Yield = function() {
    return this.getTypedRuleContext(BindingIdentifier_YieldContext,0);
};

GeneratorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGeneratorExpression(this);
	}
};

GeneratorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGeneratorExpression(this);
	}
};




ECMAScriptPassParser.GeneratorExpressionContext = GeneratorExpressionContext;

ECMAScriptPassParser.prototype.generatorExpression = function() {

    var localctx = new GeneratorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, ECMAScriptPassParser.RULE_generatorExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1860;
        this.match(ECMAScriptPassParser.Function);
        this.state = 1861;
        this.match(ECMAScriptPassParser.Multiply);
        this.state = 1863;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.Await || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (ECMAScriptPassParser.As - 105)) | (1 << (ECMAScriptPassParser.Async - 105)) | (1 << (ECMAScriptPassParser.From - 105)) | (1 << (ECMAScriptPassParser.Get - 105)) | (1 << (ECMAScriptPassParser.Let - 105)) | (1 << (ECMAScriptPassParser.Of - 105)) | (1 << (ECMAScriptPassParser.Set - 105)) | (1 << (ECMAScriptPassParser.Static - 105)) | (1 << (ECMAScriptPassParser.IdentifierName - 105)))) !== 0)) {
            this.state = 1862;
            this.bindingIdentifier_Yield();
        }

        this.state = 1865;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 1866;
        this.formalParameters_Yield();
        this.state = 1867;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 1868;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 1869;
        this.generatorBody();
        this.state = 1870;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueFormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_uniqueFormalParameters;
    return this;
}

UniqueFormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueFormalParametersContext.prototype.constructor = UniqueFormalParametersContext;

UniqueFormalParametersContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

UniqueFormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUniqueFormalParameters(this);
	}
};

UniqueFormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUniqueFormalParameters(this);
	}
};




ECMAScriptPassParser.UniqueFormalParametersContext = UniqueFormalParametersContext;

ECMAScriptPassParser.prototype.uniqueFormalParameters = function() {

    var localctx = new UniqueFormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, ECMAScriptPassParser.RULE_uniqueFormalParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1872;
        this.formalParameters();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniqueFormalParameters_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_uniqueFormalParameters_Yield;
    return this;
}

UniqueFormalParameters_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniqueFormalParameters_YieldContext.prototype.constructor = UniqueFormalParameters_YieldContext;

UniqueFormalParameters_YieldContext.prototype.formalParameters_Yield = function() {
    return this.getTypedRuleContext(FormalParameters_YieldContext,0);
};

UniqueFormalParameters_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterUniqueFormalParameters_Yield(this);
	}
};

UniqueFormalParameters_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitUniqueFormalParameters_Yield(this);
	}
};




ECMAScriptPassParser.UniqueFormalParameters_YieldContext = UniqueFormalParameters_YieldContext;

ECMAScriptPassParser.prototype.uniqueFormalParameters_Yield = function() {

    var localctx = new UniqueFormalParameters_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, ECMAScriptPassParser.RULE_uniqueFormalParameters_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1874;
        this.formalParameters_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.functionRestParameter = function() {
    return this.getTypedRuleContext(FunctionRestParameterContext,0);
};

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameters(this);
	}
};




ECMAScriptPassParser.FormalParametersContext = FormalParametersContext;

ECMAScriptPassParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, ECMAScriptPassParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.state = 1886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1877;
            this.functionRestParameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1878;
            this.formalParameterList();
            this.state = 1880;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1879;
                this.match(ECMAScriptPassParser.Comma);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1882;
            this.formalParameterList();
            this.state = 1883;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1884;
            this.functionRestParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameters_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameters_Yield;
    return this;
}

FormalParameters_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameters_YieldContext.prototype.constructor = FormalParameters_YieldContext;

FormalParameters_YieldContext.prototype.functionRestParameter_Yield = function() {
    return this.getTypedRuleContext(FunctionRestParameter_YieldContext,0);
};

FormalParameters_YieldContext.prototype.formalParameterList_Yield = function() {
    return this.getTypedRuleContext(FormalParameterList_YieldContext,0);
};

FormalParameters_YieldContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

FormalParameters_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameters_Yield(this);
	}
};

FormalParameters_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameters_Yield(this);
	}
};




ECMAScriptPassParser.FormalParameters_YieldContext = FormalParameters_YieldContext;

ECMAScriptPassParser.prototype.formalParameters_Yield = function() {

    var localctx = new FormalParameters_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, ECMAScriptPassParser.RULE_formalParameters_Yield);
    var _la = 0; // Token type
    try {
        this.state = 1898;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1889;
            this.functionRestParameter_Yield();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1890;
            this.formalParameterList_Yield();
            this.state = 1892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 1891;
                this.match(ECMAScriptPassParser.Comma);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1894;
            this.formalParameterList_Yield();
            this.state = 1895;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 1896;
            this.functionRestParameter_Yield();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameterList(this);
	}
};




ECMAScriptPassParser.FormalParameterListContext = FormalParameterListContext;

ECMAScriptPassParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, ECMAScriptPassParser.RULE_formalParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1900;
        this.formalParameter();
        this.state = 1905;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1901;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1902;
                this.formalParameter(); 
            }
            this.state = 1907;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameterList_Yield;
    return this;
}

FormalParameterList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterList_YieldContext.prototype.constructor = FormalParameterList_YieldContext;

FormalParameterList_YieldContext.prototype.formalParameter_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameter_YieldContext);
    } else {
        return this.getTypedRuleContext(FormalParameter_YieldContext,i);
    }
};

FormalParameterList_YieldContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


FormalParameterList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameterList_Yield(this);
	}
};

FormalParameterList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameterList_Yield(this);
	}
};




ECMAScriptPassParser.FormalParameterList_YieldContext = FormalParameterList_YieldContext;

ECMAScriptPassParser.prototype.formalParameterList_Yield = function() {

    var localctx = new FormalParameterList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, ECMAScriptPassParser.RULE_formalParameterList_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1908;
        this.formalParameter_Yield();
        this.state = 1913;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1909;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 1910;
                this.formalParameter_Yield(); 
            }
            this.state = 1915;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionRestParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionRestParameter;
    return this;
}

FunctionRestParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionRestParameterContext.prototype.constructor = FunctionRestParameterContext;

FunctionRestParameterContext.prototype.bindingRestElement = function() {
    return this.getTypedRuleContext(BindingRestElementContext,0);
};

FunctionRestParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionRestParameter(this);
	}
};

FunctionRestParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionRestParameter(this);
	}
};




ECMAScriptPassParser.FunctionRestParameterContext = FunctionRestParameterContext;

ECMAScriptPassParser.prototype.functionRestParameter = function() {

    var localctx = new FunctionRestParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, ECMAScriptPassParser.RULE_functionRestParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1916;
        this.bindingRestElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionRestParameter_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionRestParameter_Yield;
    return this;
}

FunctionRestParameter_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionRestParameter_YieldContext.prototype.constructor = FunctionRestParameter_YieldContext;

FunctionRestParameter_YieldContext.prototype.bindingRestElement_Yield = function() {
    return this.getTypedRuleContext(BindingRestElement_YieldContext,0);
};

FunctionRestParameter_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionRestParameter_Yield(this);
	}
};

FunctionRestParameter_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionRestParameter_Yield(this);
	}
};




ECMAScriptPassParser.FunctionRestParameter_YieldContext = FunctionRestParameter_YieldContext;

ECMAScriptPassParser.prototype.functionRestParameter_Yield = function() {

    var localctx = new FunctionRestParameter_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, ECMAScriptPassParser.RULE_functionRestParameter_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1918;
        this.bindingRestElement_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.bindingElement = function() {
    return this.getTypedRuleContext(BindingElementContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameter(this);
	}
};




ECMAScriptPassParser.FormalParameterContext = FormalParameterContext;

ECMAScriptPassParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, ECMAScriptPassParser.RULE_formalParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1920;
        this.bindingElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameter_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_formalParameter_Yield;
    return this;
}

FormalParameter_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameter_YieldContext.prototype.constructor = FormalParameter_YieldContext;

FormalParameter_YieldContext.prototype.bindingElement_Yield = function() {
    return this.getTypedRuleContext(BindingElement_YieldContext,0);
};

FormalParameter_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFormalParameter_Yield(this);
	}
};

FormalParameter_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFormalParameter_Yield(this);
	}
};




ECMAScriptPassParser.FormalParameter_YieldContext = FormalParameter_YieldContext;

ECMAScriptPassParser.prototype.formalParameter_Yield = function() {

    var localctx = new FormalParameter_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, ECMAScriptPassParser.RULE_formalParameter_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1922;
        this.bindingElement_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_arrowParameters;
    return this;
}

ArrowParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowParametersContext.prototype.constructor = ArrowParametersContext;

ArrowParametersContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ArrowParametersContext.prototype.coverParenthesizedExpressionAndArrowParameterList = function() {
    return this.getTypedRuleContext(CoverParenthesizedExpressionAndArrowParameterListContext,0);
};

ArrowParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterArrowParameters(this);
	}
};

ArrowParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitArrowParameters(this);
	}
};




ECMAScriptPassParser.ArrowParametersContext = ArrowParametersContext;

ECMAScriptPassParser.prototype.arrowParameters = function() {

    var localctx = new ArrowParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, ECMAScriptPassParser.RULE_arrowParameters);
    try {
        this.state = 1926;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1924;
            this.bindingIdentifier();
            break;
        case ECMAScriptPassParser.OpenParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 1925;
            this.coverParenthesizedExpressionAndArrowParameterList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.functionStatementList = function() {
    return this.getTypedRuleContext(FunctionStatementListContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionBody(this);
	}
};




ECMAScriptPassParser.FunctionBodyContext = FunctionBodyContext;

ECMAScriptPassParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, ECMAScriptPassParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1928;
        this.functionStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionBody_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionBody_Yield;
    return this;
}

FunctionBody_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBody_YieldContext.prototype.constructor = FunctionBody_YieldContext;

FunctionBody_YieldContext.prototype.functionStatementList_Yield = function() {
    return this.getTypedRuleContext(FunctionStatementList_YieldContext,0);
};

FunctionBody_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionBody_Yield(this);
	}
};

FunctionBody_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionBody_Yield(this);
	}
};




ECMAScriptPassParser.FunctionBody_YieldContext = FunctionBody_YieldContext;

ECMAScriptPassParser.prototype.functionBody_Yield = function() {

    var localctx = new FunctionBody_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, ECMAScriptPassParser.RULE_functionBody_Yield);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1930;
        this.functionStatementList_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionStatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionStatementList;
    return this;
}

FunctionStatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStatementListContext.prototype.constructor = FunctionStatementListContext;

FunctionStatementListContext.prototype.statementList_Return = function() {
    return this.getTypedRuleContext(StatementList_ReturnContext,0);
};

FunctionStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionStatementList(this);
	}
};

FunctionStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionStatementList(this);
	}
};




ECMAScriptPassParser.FunctionStatementListContext = FunctionStatementListContext;

ECMAScriptPassParser.prototype.functionStatementList = function() {

    var localctx = new FunctionStatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, ECMAScriptPassParser.RULE_functionStatementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1932;
            this.statementList_Return();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionStatementList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_functionStatementList_Yield;
    return this;
}

FunctionStatementList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionStatementList_YieldContext.prototype.constructor = FunctionStatementList_YieldContext;

FunctionStatementList_YieldContext.prototype.statementList_Yield_Return = function() {
    return this.getTypedRuleContext(StatementList_Yield_ReturnContext,0);
};

FunctionStatementList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFunctionStatementList_Yield(this);
	}
};

FunctionStatementList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFunctionStatementList_Yield(this);
	}
};




ECMAScriptPassParser.FunctionStatementList_YieldContext = FunctionStatementList_YieldContext;

ECMAScriptPassParser.prototype.functionStatementList_Yield = function() {

    var localctx = new FunctionStatementList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, ECMAScriptPassParser.RULE_functionStatementList_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Return - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 1935;
            this.statementList_Yield_Return();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_generatorBody;
    return this;
}

GeneratorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorBodyContext.prototype.constructor = GeneratorBodyContext;

GeneratorBodyContext.prototype.functionBody_Yield = function() {
    return this.getTypedRuleContext(FunctionBody_YieldContext,0);
};

GeneratorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGeneratorBody(this);
	}
};

GeneratorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGeneratorBody(this);
	}
};




ECMAScriptPassParser.GeneratorBodyContext = GeneratorBodyContext;

ECMAScriptPassParser.prototype.generatorBody = function() {

    var localctx = new GeneratorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, ECMAScriptPassParser.RULE_generatorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1938;
        this.functionBody_Yield();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConciseBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_conciseBody;
    return this;
}

ConciseBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConciseBodyContext.prototype.constructor = ConciseBodyContext;

ConciseBodyContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ConciseBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ConciseBodyContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ConciseBodyContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ConciseBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConciseBody(this);
	}
};

ConciseBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConciseBody(this);
	}
};




ECMAScriptPassParser.ConciseBodyContext = ConciseBodyContext;

ECMAScriptPassParser.prototype.conciseBody = function() {

    var localctx = new ConciseBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, ECMAScriptPassParser.RULE_conciseBody);
    try {
        this.state = 1945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1940;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1941;
            this.functionBody();
            this.state = 1942;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1944;
            this.assignmentExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConciseBody_InContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_conciseBody_In;
    return this;
}

ConciseBody_InContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConciseBody_InContext.prototype.constructor = ConciseBody_InContext;

ConciseBody_InContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ConciseBody_InContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ConciseBody_InContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ConciseBody_InContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ConciseBody_InContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterConciseBody_In(this);
	}
};

ConciseBody_InContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitConciseBody_In(this);
	}
};




ECMAScriptPassParser.ConciseBody_InContext = ConciseBody_InContext;

ECMAScriptPassParser.prototype.conciseBody_In = function() {

    var localctx = new ConciseBody_InContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, ECMAScriptPassParser.RULE_conciseBody_In);
    try {
        this.state = 1952;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1947;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1948;
            this.functionBody();
            this.state = 1949;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1951;
            this.assignmentExpression_In(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.Get = function() {
    return this.getToken(ECMAScriptPassParser.Get, 0);
};

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Set = function() {
    return this.getToken(ECMAScriptPassParser.Set, 0);
};

MethodDefinitionContext.prototype.propertySetParameterList = function() {
    return this.getTypedRuleContext(PropertySetParameterListContext,0);
};

MethodDefinitionContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

MethodDefinitionContext.prototype.generatorMethod = function() {
    return this.getTypedRuleContext(GeneratorMethodContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMethodDefinition(this);
	}
};




ECMAScriptPassParser.MethodDefinitionContext = MethodDefinitionContext;

ECMAScriptPassParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, ECMAScriptPassParser.RULE_methodDefinition);
    try {
        this.state = 1980;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1954;
            this.match(ECMAScriptPassParser.Get);
            this.state = 1955;
            this.propertyName();
            this.state = 1956;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1957;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1958;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1959;
            this.functionBody();
            this.state = 1960;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1962;
            this.match(ECMAScriptPassParser.Set);
            this.state = 1963;
            this.propertyName();
            this.state = 1964;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1965;
            this.propertySetParameterList();
            this.state = 1966;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1967;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1968;
            this.functionBody();
            this.state = 1969;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1971;
            this.propertyName();
            this.state = 1972;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1973;
            this.uniqueFormalParameters();
            this.state = 1974;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1975;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1976;
            this.functionBody();
            this.state = 1977;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1979;
            this.generatorMethod();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinition_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_methodDefinition_Yield;
    return this;
}

MethodDefinition_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinition_YieldContext.prototype.constructor = MethodDefinition_YieldContext;

MethodDefinition_YieldContext.prototype.propertyName_Yield = function() {
    return this.getTypedRuleContext(PropertyName_YieldContext,0);
};

MethodDefinition_YieldContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

MethodDefinition_YieldContext.prototype.uniqueFormalParameters = function() {
    return this.getTypedRuleContext(UniqueFormalParametersContext,0);
};

MethodDefinition_YieldContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

MethodDefinition_YieldContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

MethodDefinition_YieldContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinition_YieldContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

MethodDefinition_YieldContext.prototype.Get = function() {
    return this.getToken(ECMAScriptPassParser.Get, 0);
};

MethodDefinition_YieldContext.prototype.Set = function() {
    return this.getToken(ECMAScriptPassParser.Set, 0);
};

MethodDefinition_YieldContext.prototype.propertySetParameterList = function() {
    return this.getTypedRuleContext(PropertySetParameterListContext,0);
};

MethodDefinition_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMethodDefinition_Yield(this);
	}
};

MethodDefinition_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMethodDefinition_Yield(this);
	}
};




ECMAScriptPassParser.MethodDefinition_YieldContext = MethodDefinition_YieldContext;

ECMAScriptPassParser.prototype.methodDefinition_Yield = function() {

    var localctx = new MethodDefinition_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, ECMAScriptPassParser.RULE_methodDefinition_Yield);
    try {
        this.state = 2007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1982;
            this.propertyName_Yield();
            this.state = 1983;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1984;
            this.uniqueFormalParameters();
            this.state = 1985;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1986;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1987;
            this.functionBody();
            this.state = 1988;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1990;
            this.match(ECMAScriptPassParser.Get);
            this.state = 1991;
            this.propertyName_Yield();
            this.state = 1992;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 1993;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 1994;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 1995;
            this.functionBody();
            this.state = 1996;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1998;
            this.match(ECMAScriptPassParser.Set);
            this.state = 1999;
            this.propertyName_Yield();
            this.state = 2000;
            this.match(ECMAScriptPassParser.OpenParen);
            this.state = 2001;
            this.propertySetParameterList();
            this.state = 2002;
            this.match(ECMAScriptPassParser.CloseParen);
            this.state = 2003;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 2004;
            this.functionBody();
            this.state = 2005;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySetParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_propertySetParameterList;
    return this;
}

PropertySetParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySetParameterListContext.prototype.constructor = PropertySetParameterListContext;

PropertySetParameterListContext.prototype.formalParameter = function() {
    return this.getTypedRuleContext(FormalParameterContext,0);
};

PropertySetParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterPropertySetParameterList(this);
	}
};

PropertySetParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitPropertySetParameterList(this);
	}
};




ECMAScriptPassParser.PropertySetParameterListContext = PropertySetParameterListContext;

ECMAScriptPassParser.prototype.propertySetParameterList = function() {

    var localctx = new PropertySetParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, ECMAScriptPassParser.RULE_propertySetParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2009;
        this.formalParameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneratorMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_generatorMethod;
    return this;
}

GeneratorMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneratorMethodContext.prototype.constructor = GeneratorMethodContext;

GeneratorMethodContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

GeneratorMethodContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GeneratorMethodContext.prototype.OpenParen = function() {
    return this.getToken(ECMAScriptPassParser.OpenParen, 0);
};

GeneratorMethodContext.prototype.uniqueFormalParameters_Yield = function() {
    return this.getTypedRuleContext(UniqueFormalParameters_YieldContext,0);
};

GeneratorMethodContext.prototype.CloseParen = function() {
    return this.getToken(ECMAScriptPassParser.CloseParen, 0);
};

GeneratorMethodContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

GeneratorMethodContext.prototype.generatorBody = function() {
    return this.getTypedRuleContext(GeneratorBodyContext,0);
};

GeneratorMethodContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

GeneratorMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterGeneratorMethod(this);
	}
};

GeneratorMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitGeneratorMethod(this);
	}
};




ECMAScriptPassParser.GeneratorMethodContext = GeneratorMethodContext;

ECMAScriptPassParser.prototype.generatorMethod = function() {

    var localctx = new GeneratorMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, ECMAScriptPassParser.RULE_generatorMethod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2011;
        this.match(ECMAScriptPassParser.Multiply);
        this.state = 2012;
        this.propertyName();
        this.state = 2013;
        this.match(ECMAScriptPassParser.OpenParen);
        this.state = 2014;
        this.uniqueFormalParameters_Yield();
        this.state = 2015;
        this.match(ECMAScriptPassParser.CloseParen);
        this.state = 2016;
        this.match(ECMAScriptPassParser.OpenBrace);
        this.state = 2017;
        this.generatorBody();
        this.state = 2018;
        this.match(ECMAScriptPassParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_script;
    return this;
}

ScriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptContext.prototype.constructor = ScriptContext;

ScriptContext.prototype.scriptBody = function() {
    return this.getTypedRuleContext(ScriptBodyContext,0);
};

ScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterScript(this);
	}
};

ScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitScript(this);
	}
};




ECMAScriptPassParser.ScriptContext = ScriptContext;

ECMAScriptPassParser.prototype.script = function() {

    var localctx = new ScriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, ECMAScriptPassParser.RULE_script);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 2020;
            this.scriptBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_scriptBody;
    return this;
}

ScriptBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptBodyContext.prototype.constructor = ScriptBodyContext;

ScriptBodyContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

ScriptBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterScriptBody(this);
	}
};

ScriptBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitScriptBody(this);
	}
};




ECMAScriptPassParser.ScriptBodyContext = ScriptBodyContext;

ECMAScriptPassParser.prototype.scriptBody = function() {

    var localctx = new ScriptBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, ECMAScriptPassParser.RULE_scriptBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2023;
        this.statementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitModule(this);
	}
};




ECMAScriptPassParser.ModuleContext = ModuleContext;

ECMAScriptPassParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, ECMAScriptPassParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0)) {
            this.state = 2025;
            this.moduleBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.moduleItemList = function() {
    return this.getTypedRuleContext(ModuleItemListContext,0);
};

ModuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterModuleBody(this);
	}
};

ModuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitModuleBody(this);
	}
};




ECMAScriptPassParser.ModuleBodyContext = ModuleBodyContext;

ECMAScriptPassParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, ECMAScriptPassParser.RULE_moduleBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2028;
        this.moduleItemList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_moduleItemList;
    return this;
}

ModuleItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemListContext.prototype.constructor = ModuleItemListContext;

ModuleItemListContext.prototype.moduleItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleItemContext);
    } else {
        return this.getTypedRuleContext(ModuleItemContext,i);
    }
};

ModuleItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterModuleItemList(this);
	}
};

ModuleItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitModuleItemList(this);
	}
};




ECMAScriptPassParser.ModuleItemListContext = ModuleItemListContext;

ECMAScriptPassParser.prototype.moduleItemList = function() {

    var localctx = new ModuleItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, ECMAScriptPassParser.RULE_moduleItemList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2031; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2030;
            this.moduleItem();
            this.state = 2033; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.SemiColon) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Break - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Const - 65)) | (1 << (ECMAScriptPassParser.Continue - 65)) | (1 << (ECMAScriptPassParser.Debugger - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Do - 65)) | (1 << (ECMAScriptPassParser.Export - 65)) | (1 << (ECMAScriptPassParser.For - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.If - 65)) | (1 << (ECMAScriptPassParser.Import - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.Switch - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Throw - 65)) | (1 << (ECMAScriptPassParser.Try - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)) | (1 << (ECMAScriptPassParser.Var - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.While - 97)) | (1 << (ECMAScriptPassParser.With - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_moduleItem;
    return this;
}

ModuleItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemContext.prototype.constructor = ModuleItemContext;

ModuleItemContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

ModuleItemContext.prototype.exportDeclaration = function() {
    return this.getTypedRuleContext(ExportDeclarationContext,0);
};

ModuleItemContext.prototype.statementListItem = function() {
    return this.getTypedRuleContext(StatementListItemContext,0);
};

ModuleItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterModuleItem(this);
	}
};

ModuleItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitModuleItem(this);
	}
};




ECMAScriptPassParser.ModuleItemContext = ModuleItemContext;

ECMAScriptPassParser.prototype.moduleItem = function() {

    var localctx = new ModuleItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, ECMAScriptPassParser.RULE_moduleItem);
    try {
        this.state = 2038;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Import:
            this.enterOuterAlt(localctx, 1);
            this.state = 2035;
            this.importDeclaration();
            break;
        case ECMAScriptPassParser.Export:
            this.enterOuterAlt(localctx, 2);
            this.state = 2036;
            this.exportDeclaration();
            break;
        case ECMAScriptPassParser.NumericLiteral:
        case ECMAScriptPassParser.TemplateHead:
        case ECMAScriptPassParser.NoSubstitutionTemplate:
        case ECMAScriptPassParser.RegularExpressionLiteral:
        case ECMAScriptPassParser.OpenBrace:
        case ECMAScriptPassParser.OpenParen:
        case ECMAScriptPassParser.OpenBracket:
        case ECMAScriptPassParser.SemiColon:
        case ECMAScriptPassParser.Plus:
        case ECMAScriptPassParser.Minus:
        case ECMAScriptPassParser.PlusPlus:
        case ECMAScriptPassParser.MinusMinus:
        case ECMAScriptPassParser.Not:
        case ECMAScriptPassParser.BitNot:
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
        case ECMAScriptPassParser.StringLiteral:
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 3);
            this.state = 2037;
            this.statementListItem();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.Import = function() {
    return this.getToken(ECMAScriptPassParser.Import, 0);
};

ImportDeclarationContext.prototype.importClause = function() {
    return this.getTypedRuleContext(ImportClauseContext,0);
};

ImportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ImportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ImportDeclarationContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportDeclaration(this);
	}
};




ECMAScriptPassParser.ImportDeclarationContext = ImportDeclarationContext;

ECMAScriptPassParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, ECMAScriptPassParser.RULE_importDeclaration);
    try {
        this.state = 2049;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2040;
            this.match(ECMAScriptPassParser.Import);
            this.state = 2041;
            this.importClause();
            this.state = 2042;
            this.fromClause();
            this.state = 2043;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2045;
            this.match(ECMAScriptPassParser.Import);
            this.state = 2046;
            this.moduleSpecifier();
            this.state = 2047;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importClause;
    return this;
}

ImportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportClauseContext.prototype.constructor = ImportClauseContext;

ImportClauseContext.prototype.importedDefaultBinding = function() {
    return this.getTypedRuleContext(ImportedDefaultBindingContext,0);
};

ImportClauseContext.prototype.nameSpaceImport = function() {
    return this.getTypedRuleContext(NameSpaceImportContext,0);
};

ImportClauseContext.prototype.namedImports = function() {
    return this.getTypedRuleContext(NamedImportsContext,0);
};

ImportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ImportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportClause(this);
	}
};

ImportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportClause(this);
	}
};




ECMAScriptPassParser.ImportClauseContext = ImportClauseContext;

ECMAScriptPassParser.prototype.importClause = function() {

    var localctx = new ImportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, ECMAScriptPassParser.RULE_importClause);
    try {
        this.state = 2058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2051;
            this.importedDefaultBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2052;
            this.nameSpaceImport();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2053;
            this.namedImports();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2054;
            this.importedDefaultBinding();
            this.state = 2055;
            this.match(ECMAScriptPassParser.Comma);
            this.state = 2056;
            this.namedImports();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedDefaultBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importedDefaultBinding;
    return this;
}

ImportedDefaultBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedDefaultBindingContext.prototype.constructor = ImportedDefaultBindingContext;

ImportedDefaultBindingContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportedDefaultBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportedDefaultBinding(this);
	}
};

ImportedDefaultBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportedDefaultBinding(this);
	}
};




ECMAScriptPassParser.ImportedDefaultBindingContext = ImportedDefaultBindingContext;

ECMAScriptPassParser.prototype.importedDefaultBinding = function() {

    var localctx = new ImportedDefaultBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, ECMAScriptPassParser.RULE_importedDefaultBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2060;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameSpaceImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_nameSpaceImport;
    return this;
}

NameSpaceImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameSpaceImportContext.prototype.constructor = NameSpaceImportContext;

NameSpaceImportContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

NameSpaceImportContext.prototype.As = function() {
    return this.getToken(ECMAScriptPassParser.As, 0);
};

NameSpaceImportContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

NameSpaceImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterNameSpaceImport(this);
	}
};

NameSpaceImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitNameSpaceImport(this);
	}
};




ECMAScriptPassParser.NameSpaceImportContext = NameSpaceImportContext;

ECMAScriptPassParser.prototype.nameSpaceImport = function() {

    var localctx = new NameSpaceImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, ECMAScriptPassParser.RULE_nameSpaceImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2062;
        this.match(ECMAScriptPassParser.Multiply);
        this.state = 2063;
        this.match(ECMAScriptPassParser.As);
        this.state = 2064;
        this.importedBinding();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_namedImports;
    return this;
}

NamedImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedImportsContext.prototype.constructor = NamedImportsContext;

NamedImportsContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

NamedImportsContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

NamedImportsContext.prototype.importsList = function() {
    return this.getTypedRuleContext(ImportsListContext,0);
};

NamedImportsContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

NamedImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterNamedImports(this);
	}
};

NamedImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitNamedImports(this);
	}
};




ECMAScriptPassParser.NamedImportsContext = NamedImportsContext;

ECMAScriptPassParser.prototype.namedImports = function() {

    var localctx = new NamedImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, ECMAScriptPassParser.RULE_namedImports);
    var _la = 0; // Token type
    try {
        this.state = 2075;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2066;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 2067;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2068;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 2069;
            this.importsList();
            this.state = 2071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 2070;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 2073;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.From = function() {
    return this.getToken(ECMAScriptPassParser.From, 0);
};

FromClauseContext.prototype.moduleSpecifier = function() {
    return this.getTypedRuleContext(ModuleSpecifierContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFromClause(this);
	}
};




ECMAScriptPassParser.FromClauseContext = FromClauseContext;

ECMAScriptPassParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, ECMAScriptPassParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2077;
        this.match(ECMAScriptPassParser.From);
        this.state = 2078;
        this.moduleSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importsList;
    return this;
}

ImportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsListContext.prototype.constructor = ImportsListContext;

ImportsListContext.prototype.importSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ImportSpecifierContext,i);
    }
};

ImportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ImportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportsList(this);
	}
};

ImportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportsList(this);
	}
};




ECMAScriptPassParser.ImportsListContext = ImportsListContext;

ECMAScriptPassParser.prototype.importsList = function() {

    var localctx = new ImportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, ECMAScriptPassParser.RULE_importsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2080;
        this.importSpecifier();
        this.state = 2085;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,194,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2081;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 2082;
                this.importSpecifier(); 
            }
            this.state = 2087;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,194,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importSpecifier;
    return this;
}

ImportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportSpecifierContext.prototype.constructor = ImportSpecifierContext;

ImportSpecifierContext.prototype.importedBinding = function() {
    return this.getTypedRuleContext(ImportedBindingContext,0);
};

ImportSpecifierContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ImportSpecifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptPassParser.As, 0);
};

ImportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportSpecifier(this);
	}
};

ImportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportSpecifier(this);
	}
};




ECMAScriptPassParser.ImportSpecifierContext = ImportSpecifierContext;

ECMAScriptPassParser.prototype.importSpecifier = function() {

    var localctx = new ImportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, ECMAScriptPassParser.RULE_importSpecifier);
    try {
        this.state = 2093;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2088;
            this.importedBinding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2089;
            this.identifierName();
            this.state = 2090;
            this.match(ECMAScriptPassParser.As);
            this.state = 2091;
            this.importedBinding();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_moduleSpecifier;
    return this;
}

ModuleSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleSpecifierContext.prototype.constructor = ModuleSpecifierContext;

ModuleSpecifierContext.prototype.StringLiteral = function() {
    return this.getToken(ECMAScriptPassParser.StringLiteral, 0);
};

ModuleSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterModuleSpecifier(this);
	}
};

ModuleSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitModuleSpecifier(this);
	}
};




ECMAScriptPassParser.ModuleSpecifierContext = ModuleSpecifierContext;

ECMAScriptPassParser.prototype.moduleSpecifier = function() {

    var localctx = new ModuleSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, ECMAScriptPassParser.RULE_moduleSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2095;
        this.match(ECMAScriptPassParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportedBindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_importedBinding;
    return this;
}

ImportedBindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportedBindingContext.prototype.constructor = ImportedBindingContext;

ImportedBindingContext.prototype.bindingIdentifier = function() {
    return this.getTypedRuleContext(BindingIdentifierContext,0);
};

ImportedBindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterImportedBinding(this);
	}
};

ImportedBindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitImportedBinding(this);
	}
};




ECMAScriptPassParser.ImportedBindingContext = ImportedBindingContext;

ECMAScriptPassParser.prototype.importedBinding = function() {

    var localctx = new ImportedBindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, ECMAScriptPassParser.RULE_importedBinding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2097;
        this.bindingIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_exportDeclaration;
    return this;
}

ExportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
    return this.getToken(ECMAScriptPassParser.Export, 0);
};

ExportDeclarationContext.prototype.Multiply = function() {
    return this.getToken(ECMAScriptPassParser.Multiply, 0);
};

ExportDeclarationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

ExportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDeclarationContext.prototype.exportClause = function() {
    return this.getTypedRuleContext(ExportClauseContext,0);
};

ExportDeclarationContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

ExportDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExportDeclarationContext.prototype.Default = function() {
    return this.getToken(ECMAScriptPassParser.Default, 0);
};

ExportDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ExportDeclarationContext.prototype.assignmentExpression_In = function() {
    return this.getTypedRuleContext(AssignmentExpression_InContext,0);
};

ExportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExportDeclaration(this);
	}
};

ExportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExportDeclaration(this);
	}
};




ECMAScriptPassParser.ExportDeclarationContext = ExportDeclarationContext;

ECMAScriptPassParser.prototype.exportDeclaration = function() {

    var localctx = new ExportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, ECMAScriptPassParser.RULE_exportDeclaration);
    try {
        this.state = 2125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2099;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2100;
            this.match(ECMAScriptPassParser.Multiply);
            this.state = 2101;
            this.fromClause();
            this.state = 2102;
            this.eos();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2104;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2105;
            this.exportClause();
            this.state = 2106;
            this.fromClause();
            this.state = 2107;
            this.eos();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2109;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2110;
            this.exportClause();
            this.state = 2111;
            this.eos();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2113;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2114;
            this.variableStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2115;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2116;
            this.declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2117;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2118;
            this.match(ECMAScriptPassParser.Default);
            this.state = 2119;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2120;
            this.match(ECMAScriptPassParser.Export);
            this.state = 2121;
            this.match(ECMAScriptPassParser.Default);
            this.state = 2122;
            this.assignmentExpression_In(0);
            this.state = 2123;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_exportClause;
    return this;
}

ExportClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportClauseContext.prototype.constructor = ExportClauseContext;

ExportClauseContext.prototype.OpenBrace = function() {
    return this.getToken(ECMAScriptPassParser.OpenBrace, 0);
};

ExportClauseContext.prototype.CloseBrace = function() {
    return this.getToken(ECMAScriptPassParser.CloseBrace, 0);
};

ExportClauseContext.prototype.exportsList = function() {
    return this.getTypedRuleContext(ExportsListContext,0);
};

ExportClauseContext.prototype.Comma = function() {
    return this.getToken(ECMAScriptPassParser.Comma, 0);
};

ExportClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExportClause(this);
	}
};

ExportClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExportClause(this);
	}
};




ECMAScriptPassParser.ExportClauseContext = ExportClauseContext;

ECMAScriptPassParser.prototype.exportClause = function() {

    var localctx = new ExportClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, ECMAScriptPassParser.RULE_exportClause);
    var _la = 0; // Token type
    try {
        this.state = 2136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2127;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 2128;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2129;
            this.match(ECMAScriptPassParser.OpenBrace);
            this.state = 2130;
            this.exportsList();
            this.state = 2132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ECMAScriptPassParser.Comma) {
                this.state = 2131;
                this.match(ECMAScriptPassParser.Comma);
            }

            this.state = 2134;
            this.match(ECMAScriptPassParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_exportsList;
    return this;
}

ExportsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsListContext.prototype.constructor = ExportsListContext;

ExportsListContext.prototype.exportSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportSpecifierContext);
    } else {
        return this.getTypedRuleContext(ExportSpecifierContext,i);
    }
};

ExportsListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ECMAScriptPassParser.Comma);
    } else {
        return this.getToken(ECMAScriptPassParser.Comma, i);
    }
};


ExportsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExportsList(this);
	}
};

ExportsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExportsList(this);
	}
};




ECMAScriptPassParser.ExportsListContext = ExportsListContext;

ECMAScriptPassParser.prototype.exportsList = function() {

    var localctx = new ExportsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, ECMAScriptPassParser.RULE_exportsList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2138;
        this.exportSpecifier();
        this.state = 2143;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,199,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2139;
                this.match(ECMAScriptPassParser.Comma);
                this.state = 2140;
                this.exportSpecifier(); 
            }
            this.state = 2145;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,199,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_exportSpecifier;
    return this;
}

ExportSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportSpecifierContext.prototype.constructor = ExportSpecifierContext;

ExportSpecifierContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ExportSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterExportSpecifier(this);
	}
};

ExportSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitExportSpecifier(this);
	}
};




ECMAScriptPassParser.ExportSpecifierContext = ExportSpecifierContext;

ECMAScriptPassParser.prototype.exportSpecifier = function() {

    var localctx = new ExportSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, ECMAScriptPassParser.RULE_exportSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2146;
        this.identifierName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateLiteral;
    return this;
}

TemplateLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateLiteralContext.prototype.constructor = TemplateLiteralContext;

TemplateLiteralContext.prototype.TemplateHead = function() {
    return this.getToken(ECMAScriptPassParser.TemplateHead, 0);
};

TemplateLiteralContext.prototype.expression_In = function() {
    return this.getTypedRuleContext(Expression_InContext,0);
};

TemplateLiteralContext.prototype.templateSpans = function() {
    return this.getTypedRuleContext(TemplateSpansContext,0);
};

TemplateLiteralContext.prototype.NoSubstitutionTemplate = function() {
    return this.getToken(ECMAScriptPassParser.NoSubstitutionTemplate, 0);
};

TemplateLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateLiteral(this);
	}
};

TemplateLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateLiteral(this);
	}
};




ECMAScriptPassParser.TemplateLiteralContext = TemplateLiteralContext;

ECMAScriptPassParser.prototype.templateLiteral = function() {

    var localctx = new TemplateLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, ECMAScriptPassParser.RULE_templateLiteral);
    try {
        this.state = 2153;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.TemplateHead:
            this.enterOuterAlt(localctx, 1);
            this.state = 2148;
            this.match(ECMAScriptPassParser.TemplateHead);
            this.state = 2149;
            this.expression_In();
            this.state = 2150;
            this.templateSpans();
            break;
        case ECMAScriptPassParser.NoSubstitutionTemplate:
            this.enterOuterAlt(localctx, 2);
            this.state = 2152;
            this.match(ECMAScriptPassParser.NoSubstitutionTemplate);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateLiteral_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateLiteral_Yield;
    return this;
}

TemplateLiteral_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateLiteral_YieldContext.prototype.constructor = TemplateLiteral_YieldContext;

TemplateLiteral_YieldContext.prototype.TemplateHead = function() {
    return this.getToken(ECMAScriptPassParser.TemplateHead, 0);
};

TemplateLiteral_YieldContext.prototype.expression_In_Yield = function() {
    return this.getTypedRuleContext(Expression_In_YieldContext,0);
};

TemplateLiteral_YieldContext.prototype.templateSpans_Yield = function() {
    return this.getTypedRuleContext(TemplateSpans_YieldContext,0);
};

TemplateLiteral_YieldContext.prototype.NoSubstitutionTemplate = function() {
    return this.getToken(ECMAScriptPassParser.NoSubstitutionTemplate, 0);
};

TemplateLiteral_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateLiteral_Yield(this);
	}
};

TemplateLiteral_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateLiteral_Yield(this);
	}
};




ECMAScriptPassParser.TemplateLiteral_YieldContext = TemplateLiteral_YieldContext;

ECMAScriptPassParser.prototype.templateLiteral_Yield = function() {

    var localctx = new TemplateLiteral_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, ECMAScriptPassParser.RULE_templateLiteral_Yield);
    try {
        this.state = 2160;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.TemplateHead:
            this.enterOuterAlt(localctx, 1);
            this.state = 2155;
            this.match(ECMAScriptPassParser.TemplateHead);
            this.state = 2156;
            this.expression_In_Yield();
            this.state = 2157;
            this.templateSpans_Yield();
            break;
        case ECMAScriptPassParser.NoSubstitutionTemplate:
            this.enterOuterAlt(localctx, 2);
            this.state = 2159;
            this.match(ECMAScriptPassParser.NoSubstitutionTemplate);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateSpansContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateSpans;
    return this;
}

TemplateSpansContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateSpansContext.prototype.constructor = TemplateSpansContext;

TemplateSpansContext.prototype.TemplateTail = function() {
    return this.getToken(ECMAScriptPassParser.TemplateTail, 0);
};

TemplateSpansContext.prototype.templateMiddleList = function() {
    return this.getTypedRuleContext(TemplateMiddleListContext,0);
};

TemplateSpansContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateSpans(this);
	}
};

TemplateSpansContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateSpans(this);
	}
};




ECMAScriptPassParser.TemplateSpansContext = TemplateSpansContext;

ECMAScriptPassParser.prototype.templateSpans = function() {

    var localctx = new TemplateSpansContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, ECMAScriptPassParser.RULE_templateSpans);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.TemplateMiddle) {
            this.state = 2162;
            this.templateMiddleList();
        }

        this.state = 2165;
        this.match(ECMAScriptPassParser.TemplateTail);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateSpans_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateSpans_Yield;
    return this;
}

TemplateSpans_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateSpans_YieldContext.prototype.constructor = TemplateSpans_YieldContext;

TemplateSpans_YieldContext.prototype.TemplateTail = function() {
    return this.getToken(ECMAScriptPassParser.TemplateTail, 0);
};

TemplateSpans_YieldContext.prototype.templateMiddleList_Yield = function() {
    return this.getTypedRuleContext(TemplateMiddleList_YieldContext,0);
};

TemplateSpans_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateSpans_Yield(this);
	}
};

TemplateSpans_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateSpans_Yield(this);
	}
};




ECMAScriptPassParser.TemplateSpans_YieldContext = TemplateSpans_YieldContext;

ECMAScriptPassParser.prototype.templateSpans_Yield = function() {

    var localctx = new TemplateSpans_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, ECMAScriptPassParser.RULE_templateSpans_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ECMAScriptPassParser.TemplateMiddle) {
            this.state = 2167;
            this.templateMiddleList_Yield();
        }

        this.state = 2170;
        this.match(ECMAScriptPassParser.TemplateTail);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateMiddleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateMiddleList;
    return this;
}

TemplateMiddleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateMiddleListContext.prototype.constructor = TemplateMiddleListContext;

TemplateMiddleListContext.prototype.TemplateMiddle = function() {
    return this.getToken(ECMAScriptPassParser.TemplateMiddle, 0);
};

TemplateMiddleListContext.prototype.expression_In = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_InContext);
    } else {
        return this.getTypedRuleContext(Expression_InContext,i);
    }
};

TemplateMiddleListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateMiddleList(this);
	}
};

TemplateMiddleListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateMiddleList(this);
	}
};




ECMAScriptPassParser.TemplateMiddleListContext = TemplateMiddleListContext;

ECMAScriptPassParser.prototype.templateMiddleList = function() {

    var localctx = new TemplateMiddleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, ECMAScriptPassParser.RULE_templateMiddleList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2172;
        this.match(ECMAScriptPassParser.TemplateMiddle);
        this.state = 2174; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2173;
            this.expression_In();
            this.state = 2176; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateMiddleList_YieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_templateMiddleList_Yield;
    return this;
}

TemplateMiddleList_YieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateMiddleList_YieldContext.prototype.constructor = TemplateMiddleList_YieldContext;

TemplateMiddleList_YieldContext.prototype.TemplateMiddle = function() {
    return this.getToken(ECMAScriptPassParser.TemplateMiddle, 0);
};

TemplateMiddleList_YieldContext.prototype.expression_In_Yield = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_In_YieldContext);
    } else {
        return this.getTypedRuleContext(Expression_In_YieldContext,i);
    }
};

TemplateMiddleList_YieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterTemplateMiddleList_Yield(this);
	}
};

TemplateMiddleList_YieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitTemplateMiddleList_Yield(this);
	}
};




ECMAScriptPassParser.TemplateMiddleList_YieldContext = TemplateMiddleList_YieldContext;

ECMAScriptPassParser.prototype.templateMiddleList_Yield = function() {

    var localctx = new TemplateMiddleList_YieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, ECMAScriptPassParser.RULE_templateMiddleList_Yield);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2178;
        this.match(ECMAScriptPassParser.TemplateMiddle);
        this.state = 2180; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2179;
            this.expression_In_Yield();
            this.state = 2182; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptPassParser.NumericLiteral) | (1 << ECMAScriptPassParser.TemplateHead) | (1 << ECMAScriptPassParser.NoSubstitutionTemplate) | (1 << ECMAScriptPassParser.RegularExpressionLiteral) | (1 << ECMAScriptPassParser.OpenBrace) | (1 << ECMAScriptPassParser.OpenParen) | (1 << ECMAScriptPassParser.OpenBracket) | (1 << ECMAScriptPassParser.Plus) | (1 << ECMAScriptPassParser.Minus))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ECMAScriptPassParser.PlusPlus - 33)) | (1 << (ECMAScriptPassParser.MinusMinus - 33)) | (1 << (ECMAScriptPassParser.Not - 33)) | (1 << (ECMAScriptPassParser.BitNot - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ECMAScriptPassParser.NullLiteral - 65)) | (1 << (ECMAScriptPassParser.BooleanLiteral - 65)) | (1 << (ECMAScriptPassParser.Await - 65)) | (1 << (ECMAScriptPassParser.Class - 65)) | (1 << (ECMAScriptPassParser.Delete - 65)) | (1 << (ECMAScriptPassParser.Function - 65)) | (1 << (ECMAScriptPassParser.New - 65)) | (1 << (ECMAScriptPassParser.This - 65)) | (1 << (ECMAScriptPassParser.Typeof - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ECMAScriptPassParser.Void - 97)) | (1 << (ECMAScriptPassParser.Yield - 97)) | (1 << (ECMAScriptPassParser.As - 97)) | (1 << (ECMAScriptPassParser.Async - 97)) | (1 << (ECMAScriptPassParser.From - 97)) | (1 << (ECMAScriptPassParser.Get - 97)) | (1 << (ECMAScriptPassParser.Let - 97)) | (1 << (ECMAScriptPassParser.Of - 97)) | (1 << (ECMAScriptPassParser.Set - 97)) | (1 << (ECMAScriptPassParser.Static - 97)) | (1 << (ECMAScriptPassParser.StringLiteral - 97)) | (1 << (ECMAScriptPassParser.IdentifierName - 97)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.futureReservedWord = function() {
    return this.getTypedRuleContext(FutureReservedWordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(ECMAScriptPassParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(ECMAScriptPassParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitReservedWord(this);
	}
};




ECMAScriptPassParser.ReservedWordContext = ReservedWordContext;

ECMAScriptPassParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, ECMAScriptPassParser.RULE_reservedWord);
    try {
        this.state = 2188;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
            this.enterOuterAlt(localctx, 1);
            this.state = 2184;
            this.keyword();
            break;
        case ECMAScriptPassParser.Enum:
            this.enterOuterAlt(localctx, 2);
            this.state = 2185;
            this.futureReservedWord();
            break;
        case ECMAScriptPassParser.NullLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 2186;
            this.match(ECMAScriptPassParser.NullLiteral);
            break;
        case ECMAScriptPassParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 2187;
            this.match(ECMAScriptPassParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Await = function() {
    return this.getToken(ECMAScriptPassParser.Await, 0);
};

KeywordContext.prototype.Break = function() {
    return this.getToken(ECMAScriptPassParser.Break, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(ECMAScriptPassParser.Case, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(ECMAScriptPassParser.Catch, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(ECMAScriptPassParser.Class, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(ECMAScriptPassParser.Const, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(ECMAScriptPassParser.Continue, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(ECMAScriptPassParser.Debugger, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(ECMAScriptPassParser.Default, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(ECMAScriptPassParser.Delete, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(ECMAScriptPassParser.Do, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(ECMAScriptPassParser.Else, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(ECMAScriptPassParser.Export, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(ECMAScriptPassParser.Extends, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(ECMAScriptPassParser.Finally, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(ECMAScriptPassParser.For, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(ECMAScriptPassParser.Function, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(ECMAScriptPassParser.If, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(ECMAScriptPassParser.Import, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(ECMAScriptPassParser.In, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(ECMAScriptPassParser.Instanceof, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(ECMAScriptPassParser.New, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(ECMAScriptPassParser.Return, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(ECMAScriptPassParser.Super, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(ECMAScriptPassParser.Switch, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(ECMAScriptPassParser.This, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(ECMAScriptPassParser.Throw, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(ECMAScriptPassParser.Try, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(ECMAScriptPassParser.Typeof, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(ECMAScriptPassParser.Var, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(ECMAScriptPassParser.Void, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(ECMAScriptPassParser.While, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(ECMAScriptPassParser.With, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(ECMAScriptPassParser.Yield, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitKeyword(this);
	}
};




ECMAScriptPassParser.KeywordContext = KeywordContext;

ECMAScriptPassParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, ECMAScriptPassParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2190;
        _la = this._input.LA(1);
        if(!(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (ECMAScriptPassParser.Await - 67)) | (1 << (ECMAScriptPassParser.Break - 67)) | (1 << (ECMAScriptPassParser.Case - 67)) | (1 << (ECMAScriptPassParser.Catch - 67)) | (1 << (ECMAScriptPassParser.Class - 67)) | (1 << (ECMAScriptPassParser.Const - 67)) | (1 << (ECMAScriptPassParser.Continue - 67)) | (1 << (ECMAScriptPassParser.Debugger - 67)) | (1 << (ECMAScriptPassParser.Default - 67)) | (1 << (ECMAScriptPassParser.Delete - 67)) | (1 << (ECMAScriptPassParser.Do - 67)) | (1 << (ECMAScriptPassParser.Else - 67)) | (1 << (ECMAScriptPassParser.Export - 67)) | (1 << (ECMAScriptPassParser.Extends - 67)) | (1 << (ECMAScriptPassParser.Finally - 67)) | (1 << (ECMAScriptPassParser.For - 67)) | (1 << (ECMAScriptPassParser.Function - 67)) | (1 << (ECMAScriptPassParser.If - 67)) | (1 << (ECMAScriptPassParser.Import - 67)) | (1 << (ECMAScriptPassParser.In - 67)) | (1 << (ECMAScriptPassParser.Instanceof - 67)) | (1 << (ECMAScriptPassParser.New - 67)) | (1 << (ECMAScriptPassParser.Return - 67)) | (1 << (ECMAScriptPassParser.Super - 67)) | (1 << (ECMAScriptPassParser.Switch - 67)) | (1 << (ECMAScriptPassParser.This - 67)) | (1 << (ECMAScriptPassParser.Throw - 67)) | (1 << (ECMAScriptPassParser.Try - 67)) | (1 << (ECMAScriptPassParser.Typeof - 67)) | (1 << (ECMAScriptPassParser.Var - 67)) | (1 << (ECMAScriptPassParser.Void - 67)) | (1 << (ECMAScriptPassParser.While - 67)))) !== 0) || _la===ECMAScriptPassParser.With || _la===ECMAScriptPassParser.Yield)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FutureReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_futureReservedWord;
    return this;
}

FutureReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FutureReservedWordContext.prototype.constructor = FutureReservedWordContext;

FutureReservedWordContext.prototype.Enum = function() {
    return this.getToken(ECMAScriptPassParser.Enum, 0);
};

FutureReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterFutureReservedWord(this);
	}
};

FutureReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitFutureReservedWord(this);
	}
};




ECMAScriptPassParser.FutureReservedWordContext = FutureReservedWordContext;

ECMAScriptPassParser.prototype.futureReservedWord = function() {

    var localctx = new FutureReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, ECMAScriptPassParser.RULE_futureReservedWord);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2192;
        this.match(ECMAScriptPassParser.Enum);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MiscIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_miscIdentifier;
    return this;
}

MiscIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MiscIdentifierContext.prototype.constructor = MiscIdentifierContext;

MiscIdentifierContext.prototype.As = function() {
    return this.getToken(ECMAScriptPassParser.As, 0);
};

MiscIdentifierContext.prototype.Async = function() {
    return this.getToken(ECMAScriptPassParser.Async, 0);
};

MiscIdentifierContext.prototype.From = function() {
    return this.getToken(ECMAScriptPassParser.From, 0);
};

MiscIdentifierContext.prototype.Get = function() {
    return this.getToken(ECMAScriptPassParser.Get, 0);
};

MiscIdentifierContext.prototype.Let = function() {
    return this.getToken(ECMAScriptPassParser.Let, 0);
};

MiscIdentifierContext.prototype.Of = function() {
    return this.getToken(ECMAScriptPassParser.Of, 0);
};

MiscIdentifierContext.prototype.Set = function() {
    return this.getToken(ECMAScriptPassParser.Set, 0);
};

MiscIdentifierContext.prototype.Static = function() {
    return this.getToken(ECMAScriptPassParser.Static, 0);
};

MiscIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterMiscIdentifier(this);
	}
};

MiscIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitMiscIdentifier(this);
	}
};




ECMAScriptPassParser.MiscIdentifierContext = MiscIdentifierContext;

ECMAScriptPassParser.prototype.miscIdentifier = function() {

    var localctx = new MiscIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, ECMAScriptPassParser.RULE_miscIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2194;
        _la = this._input.LA(1);
        if(!(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (ECMAScriptPassParser.As - 105)) | (1 << (ECMAScriptPassParser.Async - 105)) | (1 << (ECMAScriptPassParser.From - 105)) | (1 << (ECMAScriptPassParser.Get - 105)) | (1 << (ECMAScriptPassParser.Let - 105)) | (1 << (ECMAScriptPassParser.Of - 105)) | (1 << (ECMAScriptPassParser.Set - 105)) | (1 << (ECMAScriptPassParser.Static - 105)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ECMAScriptPassParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.IdentifierName = function() {
    return this.getToken(ECMAScriptPassParser.IdentifierName, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.miscIdentifier = function() {
    return this.getTypedRuleContext(MiscIdentifierContext,0);
};

IdentifierNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.enterIdentifierName(this);
	}
};

IdentifierNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ECMAScriptPassListener ) {
        listener.exitIdentifierName(this);
	}
};




ECMAScriptPassParser.IdentifierNameContext = IdentifierNameContext;

ECMAScriptPassParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, ECMAScriptPassParser.RULE_identifierName);
    try {
        this.state = 2199;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ECMAScriptPassParser.IdentifierName:
            this.enterOuterAlt(localctx, 1);
            this.state = 2196;
            this.match(ECMAScriptPassParser.IdentifierName);
            break;
        case ECMAScriptPassParser.NullLiteral:
        case ECMAScriptPassParser.BooleanLiteral:
        case ECMAScriptPassParser.Await:
        case ECMAScriptPassParser.Break:
        case ECMAScriptPassParser.Case:
        case ECMAScriptPassParser.Catch:
        case ECMAScriptPassParser.Class:
        case ECMAScriptPassParser.Const:
        case ECMAScriptPassParser.Continue:
        case ECMAScriptPassParser.Debugger:
        case ECMAScriptPassParser.Default:
        case ECMAScriptPassParser.Delete:
        case ECMAScriptPassParser.Do:
        case ECMAScriptPassParser.Else:
        case ECMAScriptPassParser.Export:
        case ECMAScriptPassParser.Extends:
        case ECMAScriptPassParser.Finally:
        case ECMAScriptPassParser.For:
        case ECMAScriptPassParser.Function:
        case ECMAScriptPassParser.If:
        case ECMAScriptPassParser.Import:
        case ECMAScriptPassParser.In:
        case ECMAScriptPassParser.Instanceof:
        case ECMAScriptPassParser.New:
        case ECMAScriptPassParser.Return:
        case ECMAScriptPassParser.Super:
        case ECMAScriptPassParser.Switch:
        case ECMAScriptPassParser.This:
        case ECMAScriptPassParser.Throw:
        case ECMAScriptPassParser.Try:
        case ECMAScriptPassParser.Typeof:
        case ECMAScriptPassParser.Var:
        case ECMAScriptPassParser.Void:
        case ECMAScriptPassParser.While:
        case ECMAScriptPassParser.With:
        case ECMAScriptPassParser.Yield:
        case ECMAScriptPassParser.Enum:
            this.enterOuterAlt(localctx, 2);
            this.state = 2197;
            this.reservedWord();
            break;
        case ECMAScriptPassParser.As:
        case ECMAScriptPassParser.Async:
        case ECMAScriptPassParser.From:
        case ECMAScriptPassParser.Get:
        case ECMAScriptPassParser.Let:
        case ECMAScriptPassParser.Of:
        case ECMAScriptPassParser.Set:
        case ECMAScriptPassParser.Static:
            this.enterOuterAlt(localctx, 3);
            this.state = 2198;
            this.miscIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ECMAScriptPassParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.eos_sempred(localctx, predIndex);
	case 19:
			return this.elementList_sempred(localctx, predIndex);
	case 20:
			return this.elementList_Yield_sempred(localctx, predIndex);
	case 35:
			return this.callExpression_sempred(localctx, predIndex);
	case 36:
			return this.callExpression_Yield_sempred(localctx, predIndex);
	case 45:
			return this.memberExpression_sempred(localctx, predIndex);
	case 46:
			return this.memberExpression_Yield_sempred(localctx, predIndex);
	case 51:
			return this.assignmentExpression_sempred(localctx, predIndex);
	case 52:
			return this.assignmentExpression_Yield_sempred(localctx, predIndex);
	case 53:
			return this.assignmentExpression_In_sempred(localctx, predIndex);
	case 54:
			return this.assignmentExpression_In_Yield_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ECMAScriptPassParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.isLineTerminatorEquivalent();
		case 1:
			return this._input.LT(1).type === ECMAScriptPassParser.CloseBrace;
		case 2:
			return this._input.LT(1).type === ECMAScriptPassParser.EOF;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.elementList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.elementList_Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 2);
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.callExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 2);
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.callExpression_Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);
		case 10:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.memberExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 4);
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.memberExpression_Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 4);
		case 15:
			return this.precpred(this._ctx, 3);
		case 16:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 17:
			return this.precpred(this._ctx, 16);
		case 18:
			return this.precpred(this._ctx, 15);
		case 19:
			return this.precpred(this._ctx, 14);
		case 20:
			return this.precpred(this._ctx, 13);
		case 21:
			return this.precpred(this._ctx, 12);
		case 22:
			return this.precpred(this._ctx, 11);
		case 23:
			return this.precpred(this._ctx, 10);
		case 24:
			return this.precpred(this._ctx, 9);
		case 25:
			return this.precpred(this._ctx, 8);
		case 26:
			return this.precpred(this._ctx, 7);
		case 27:
			return this.precpred(this._ctx, 6);
		case 28:
			return this.precpred(this._ctx, 5);
		case 29:
			return this.precpred(this._ctx, 4);
		case 30:
			return this.precpred(this._ctx, 3);
		case 31:
			return this.precpred(this._ctx, 2);
		case 32:
			return this.precpred(this._ctx, 18);
		case 33:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 17);
		case 35:
			return this.precpred(this._ctx, 16);
		case 36:
			return this.precpred(this._ctx, 15);
		case 37:
			return this.precpred(this._ctx, 14);
		case 38:
			return this.precpred(this._ctx, 13);
		case 39:
			return this.precpred(this._ctx, 12);
		case 40:
			return this.precpred(this._ctx, 11);
		case 41:
			return this.precpred(this._ctx, 10);
		case 42:
			return this.precpred(this._ctx, 9);
		case 43:
			return this.precpred(this._ctx, 8);
		case 44:
			return this.precpred(this._ctx, 7);
		case 45:
			return this.precpred(this._ctx, 6);
		case 46:
			return this.precpred(this._ctx, 5);
		case 47:
			return this.precpred(this._ctx, 4);
		case 48:
			return this.precpred(this._ctx, 3);
		case 49:
			return this.precpred(this._ctx, 19);
		case 50:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_In_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.precpred(this._ctx, 18);
		case 52:
			return this.precpred(this._ctx, 17);
		case 53:
			return this.precpred(this._ctx, 16);
		case 54:
			return this.precpred(this._ctx, 15);
		case 55:
			return this.precpred(this._ctx, 14);
		case 56:
			return this.precpred(this._ctx, 13);
		case 57:
			return this.precpred(this._ctx, 12);
		case 58:
			return this.precpred(this._ctx, 11);
		case 59:
			return this.precpred(this._ctx, 10);
		case 60:
			return this.precpred(this._ctx, 9);
		case 61:
			return this.precpred(this._ctx, 8);
		case 62:
			return this.precpred(this._ctx, 7);
		case 63:
			return this.precpred(this._ctx, 6);
		case 64:
			return this.precpred(this._ctx, 5);
		case 65:
			return this.precpred(this._ctx, 3);
		case 66:
			return this.precpred(this._ctx, 2);
		case 67:
			return this.precpred(this._ctx, 20);
		case 68:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ECMAScriptPassParser.prototype.assignmentExpression_In_Yield_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 69:
			return this.precpred(this._ctx, 18);
		case 70:
			return this.precpred(this._ctx, 17);
		case 71:
			return this.precpred(this._ctx, 16);
		case 72:
			return this.precpred(this._ctx, 15);
		case 73:
			return this.precpred(this._ctx, 14);
		case 74:
			return this.precpred(this._ctx, 13);
		case 75:
			return this.precpred(this._ctx, 12);
		case 76:
			return this.precpred(this._ctx, 11);
		case 77:
			return this.precpred(this._ctx, 10);
		case 78:
			return this.precpred(this._ctx, 9);
		case 79:
			return this.precpred(this._ctx, 8);
		case 80:
			return this.precpred(this._ctx, 7);
		case 81:
			return this.precpred(this._ctx, 6);
		case 82:
			return this.precpred(this._ctx, 5);
		case 83:
			return this.precpred(this._ctx, 4);
		case 84:
			return this.precpred(this._ctx, 3);
		case 85:
			return this.precpred(this._ctx, 20);
		case 86:
			return !this.isLineTerminatorEquivalent();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ECMAScriptPassParser = ECMAScriptPassParser;
